
new_board_rover.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8a8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b4  0800da38  0800da38  0000ea38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dfec  0800dfec  0000f1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800dfec  0800dfec  0000efec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dff4  0800dff4  0000f1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dff4  0800dff4  0000eff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dff8  0800dff8  0000eff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800dffc  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  200001d4  0800e1d0  0000f1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006cc  0800e1d0  0000f6cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d836  00000000  00000000  0000f204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cc8  00000000  00000000  0002ca3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b38  00000000  00000000  0002f708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001540  00000000  00000000  00031240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000289f7  00000000  00000000  00032780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a859  00000000  00000000  0005b177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fce35  00000000  00000000  000759d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00172805  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008e6c  00000000  00000000  00172848  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0017b6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800da20 	.word	0x0800da20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800da20 	.word	0x0800da20

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001024:	b094      	sub	sp, #80	@ 0x50
 8001026:	af0c      	add	r7, sp, #48	@ 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001028:	f001 fdbb 	bl	8002ba2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102c:	f000 f912 	bl	8001254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001030:	f000 fad0 	bl	80015d4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001034:	f000 f9a0 	bl	8001378 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001038:	f000 fa02 	bl	8001440 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 800103c:	f000 fa9a 	bl	8001574 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 8001040:	f000 fa68 	bl	8001514 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8001044:	f000 f958 	bl	80012f8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

	// ============= Capteurs =============

	IMU_Init();
 8001048:	f000 ffa8 	bl	8001f9c <IMU_Init>

	// ============= Ecoute du mode Manuel =============
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1); // LIN
 800104c:	2100      	movs	r1, #0
 800104e:	4870      	ldr	r0, [pc, #448]	@ (8001210 <main+0x1f0>)
 8001050:	f004 fcca 	bl	80059e8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2); // ANG
 8001054:	2104      	movs	r1, #4
 8001056:	486e      	ldr	r0, [pc, #440]	@ (8001210 <main+0x1f0>)
 8001058:	f004 fcc6 	bl	80059e8 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_4); // Switch (TIM1_CH1)
 800105c:	210c      	movs	r1, #12
 800105e:	486c      	ldr	r0, [pc, #432]	@ (8001210 <main+0x1f0>)
 8001060:	f004 fcc2 	bl	80059e8 <HAL_TIM_IC_Start_IT>

	// ============= Envoie des PWM =============
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Moteur Droit (TIM3_CH2)
 8001064:	2100      	movs	r1, #0
 8001066:	486b      	ldr	r0, [pc, #428]	@ (8001214 <main+0x1f4>)
 8001068:	f004 fb60 	bl	800572c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // Moteur Gauche (TIM3_CH3)
 800106c:	2104      	movs	r1, #4
 800106e:	4869      	ldr	r0, [pc, #420]	@ (8001214 <main+0x1f4>)
 8001070:	f004 fb5c 	bl	800572c <HAL_TIM_PWM_Start>

	// Initialisation PWM neutre
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1500); // 1.5ms
 8001074:	4b67      	ldr	r3, [pc, #412]	@ (8001214 <main+0x1f4>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800107c:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1500); // 1.5ms
 800107e:	4b65      	ldr	r3, [pc, #404]	@ (8001214 <main+0x1f4>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001086:	639a      	str	r2, [r3, #56]	@ 0x38

	setvbuf(stdout, NULL, _IONBF, 0);
 8001088:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <main+0x1f8>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	6898      	ldr	r0, [r3, #8]
 800108e:	2300      	movs	r3, #0
 8001090:	2202      	movs	r2, #2
 8001092:	2100      	movs	r1, #0
 8001094:	f008 fb68 	bl	8009768 <setvbuf>
	setvbuf(stderr, NULL, _IONBF, 0);
 8001098:	4b5f      	ldr	r3, [pc, #380]	@ (8001218 <main+0x1f8>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	68d8      	ldr	r0, [r3, #12]
 800109e:	2300      	movs	r3, #0
 80010a0:	2202      	movs	r2, #2
 80010a2:	2100      	movs	r1, #0
 80010a4:	f008 fb60 	bl	8009768 <setvbuf>

	printf("Démarrage de l'application...\n\r");
 80010a8:	485c      	ldr	r0, [pc, #368]	@ (800121c <main+0x1fc>)
 80010aa:	f008 faed 	bl	8009688 <iprintf>
	printf("Control Mode :: Manual\n\r");
 80010ae:	485c      	ldr	r0, [pc, #368]	@ (8001220 <main+0x200>)
 80010b0:	f008 faea 	bl	8009688 <iprintf>


	while (true) {
		/* USER CODE BEGIN WHILE */

		uint32_t current_time = HAL_GetTick();
 80010b4:	f001 fdde 	bl	8002c74 <HAL_GetTick>
 80010b8:	61f8      	str	r0, [r7, #28]

		if (current_time - last_send > 100) {
 80010ba:	4b5a      	ldr	r3, [pc, #360]	@ (8001224 <main+0x204>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	69fa      	ldr	r2, [r7, #28]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	2b64      	cmp	r3, #100	@ 0x64
 80010c4:	d952      	bls.n	800116c <main+0x14c>
			if (IMU_Read(accel, gyro)) {
 80010c6:	4958      	ldr	r1, [pc, #352]	@ (8001228 <main+0x208>)
 80010c8:	4858      	ldr	r0, [pc, #352]	@ (800122c <main+0x20c>)
 80010ca:	f000 ffaf 	bl	800202c <IMU_Read>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d04b      	beq.n	800116c <main+0x14c>
				last_send = current_time;
 80010d4:	4a53      	ldr	r2, [pc, #332]	@ (8001224 <main+0x204>)
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	6013      	str	r3, [r2, #0]

				int len = snprintf(sensors_buffer, sizeof(sensors_buffer),
						"IMU,%lu,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n",
						current_time, accel[0], accel[1], accel[2], gyro[0],
 80010da:	4b54      	ldr	r3, [pc, #336]	@ (800122c <main+0x20c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
				int len = snprintf(sensors_buffer, sizeof(sensors_buffer),
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff fa32 	bl	8000548 <__aeabi_f2d>
 80010e4:	4604      	mov	r4, r0
 80010e6:	460d      	mov	r5, r1
						current_time, accel[0], accel[1], accel[2], gyro[0],
 80010e8:	4b50      	ldr	r3, [pc, #320]	@ (800122c <main+0x20c>)
 80010ea:	685b      	ldr	r3, [r3, #4]
				int len = snprintf(sensors_buffer, sizeof(sensors_buffer),
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fa2b 	bl	8000548 <__aeabi_f2d>
 80010f2:	4680      	mov	r8, r0
 80010f4:	4689      	mov	r9, r1
						current_time, accel[0], accel[1], accel[2], gyro[0],
 80010f6:	4b4d      	ldr	r3, [pc, #308]	@ (800122c <main+0x20c>)
 80010f8:	689b      	ldr	r3, [r3, #8]
				int len = snprintf(sensors_buffer, sizeof(sensors_buffer),
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fa24 	bl	8000548 <__aeabi_f2d>
 8001100:	4682      	mov	sl, r0
 8001102:	468b      	mov	fp, r1
						current_time, accel[0], accel[1], accel[2], gyro[0],
 8001104:	4b48      	ldr	r3, [pc, #288]	@ (8001228 <main+0x208>)
 8001106:	681b      	ldr	r3, [r3, #0]
				int len = snprintf(sensors_buffer, sizeof(sensors_buffer),
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fa1d 	bl	8000548 <__aeabi_f2d>
 800110e:	e9c7 0102 	strd	r0, r1, [r7, #8]
						gyro[1], gyro[2]);
 8001112:	4b45      	ldr	r3, [pc, #276]	@ (8001228 <main+0x208>)
 8001114:	685b      	ldr	r3, [r3, #4]
				int len = snprintf(sensors_buffer, sizeof(sensors_buffer),
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fa16 	bl	8000548 <__aeabi_f2d>
 800111c:	e9c7 0100 	strd	r0, r1, [r7]
						gyro[1], gyro[2]);
 8001120:	4b41      	ldr	r3, [pc, #260]	@ (8001228 <main+0x208>)
 8001122:	689b      	ldr	r3, [r3, #8]
				int len = snprintf(sensors_buffer, sizeof(sensors_buffer),
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fa0f 	bl	8000548 <__aeabi_f2d>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8001132:	ed97 7b00 	vldr	d7, [r7]
 8001136:	ed8d 7b08 	vstr	d7, [sp, #32]
 800113a:	ed97 7b02 	vldr	d7, [r7, #8]
 800113e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001142:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001146:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800114a:	e9cd 4500 	strd	r4, r5, [sp]
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	4a37      	ldr	r2, [pc, #220]	@ (8001230 <main+0x210>)
 8001152:	2164      	movs	r1, #100	@ 0x64
 8001154:	4837      	ldr	r0, [pc, #220]	@ (8001234 <main+0x214>)
 8001156:	f008 fbbb 	bl	80098d0 <sniprintf>
 800115a:	61b8      	str	r0, [r7, #24]

				HAL_UART_Transmit(&huart3, (uint8_t*) sensors_buffer, len,
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	b29a      	uxth	r2, r3
 8001160:	f04f 33ff 	mov.w	r3, #4294967295
 8001164:	4933      	ldr	r1, [pc, #204]	@ (8001234 <main+0x214>)
 8001166:	4834      	ldr	r0, [pc, #208]	@ (8001238 <main+0x218>)
 8001168:	f005 ff24 	bl	8006fb4 <HAL_UART_Transmit>
						HAL_MAX_DELAY);
			}
		}

		if (CheckSwitchMode(pulse_width_SWITCH)) {
 800116c:	4b33      	ldr	r3, [pc, #204]	@ (800123c <main+0x21c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	ee07 3a90 	vmov	s15, r3
 8001174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001178:	eeb0 0a67 	vmov.f32	s0, s15
 800117c:	f000 fe2c 	bl	8001dd8 <CheckSwitchMode>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d00b      	beq.n	800119e <main+0x17e>
			if (switch_state == 0) {
 8001186:	4b2e      	ldr	r3, [pc, #184]	@ (8001240 <main+0x220>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2b00      	cmp	r3, #0
 800118e:	d103      	bne.n	8001198 <main+0x178>
				printf("Control Mode :: Manual\n\r");
 8001190:	4823      	ldr	r0, [pc, #140]	@ (8001220 <main+0x200>)
 8001192:	f008 fa79 	bl	8009688 <iprintf>
 8001196:	e002      	b.n	800119e <main+0x17e>
			} else {
				printf("Control Mode :: Automatic\n\r");
 8001198:	482a      	ldr	r0, [pc, #168]	@ (8001244 <main+0x224>)
 800119a:	f008 fa75 	bl	8009688 <iprintf>
			}
		}
		if (switch_state == 0) { // Mode Télécommande
 800119e:	4b28      	ldr	r3, [pc, #160]	@ (8001240 <main+0x220>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d185      	bne.n	80010b4 <main+0x94>
			int16_t pwm_left = 1500 + (int) ((lin - ang) * 500);
 80011a8:	4b27      	ldr	r3, [pc, #156]	@ (8001248 <main+0x228>)
 80011aa:	ed93 7a00 	vldr	s14, [r3]
 80011ae:	4b27      	ldr	r3, [pc, #156]	@ (800124c <main+0x22c>)
 80011b0:	edd3 7a00 	vldr	s15, [r3]
 80011b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011b8:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001250 <main+0x230>
 80011bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011c4:	ee17 3a90 	vmov	r3, s15
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	82fb      	strh	r3, [r7, #22]
			int16_t pwm_right = 1500 + (int) ((lin + ang) * 500);
 80011d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001248 <main+0x228>)
 80011d4:	ed93 7a00 	vldr	s14, [r3]
 80011d8:	4b1c      	ldr	r3, [pc, #112]	@ (800124c <main+0x22c>)
 80011da:	edd3 7a00 	vldr	s15, [r3]
 80011de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011e2:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001250 <main+0x230>
 80011e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011ee:	ee17 3a90 	vmov	r3, s15
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 80011f8:	b29b      	uxth	r3, r3
 80011fa:	82bb      	strh	r3, [r7, #20]
			Update_Motors(pwm_left, pwm_right);
 80011fc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001200:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001204:	4611      	mov	r1, r2
 8001206:	4618      	mov	r0, r3
 8001208:	f000 fd22 	bl	8001c50 <Update_Motors>
	while (true) {
 800120c:	e752      	b.n	80010b4 <main+0x94>
 800120e:	bf00      	nop
 8001210:	20000290 	.word	0x20000290
 8001214:	20000244 	.word	0x20000244
 8001218:	20000018 	.word	0x20000018
 800121c:	0800da38 	.word	0x0800da38
 8001220:	0800da5c 	.word	0x0800da5c
 8001224:	200004ec 	.word	0x200004ec
 8001228:	2000047c 	.word	0x2000047c
 800122c:	20000470 	.word	0x20000470
 8001230:	0800da78 	.word	0x0800da78
 8001234:	20000488 	.word	0x20000488
 8001238:	20000364 	.word	0x20000364
 800123c:	20000458 	.word	0x20000458
 8001240:	2000045c 	.word	0x2000045c
 8001244:	0800daa0 	.word	0x0800daa0
 8001248:	20000438 	.word	0x20000438
 800124c:	20000448 	.word	0x20000448
 8001250:	43fa0000 	.word	0x43fa0000

08001254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b096      	sub	sp, #88	@ 0x58
 8001258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	2244      	movs	r2, #68	@ 0x44
 8001260:	2100      	movs	r1, #0
 8001262:	4618      	mov	r0, r3
 8001264:	f008 fc92 	bl	8009b8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001268:	463b      	mov	r3, r7
 800126a:	2200      	movs	r2, #0
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	605a      	str	r2, [r3, #4]
 8001270:	609a      	str	r2, [r3, #8]
 8001272:	60da      	str	r2, [r3, #12]
 8001274:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001276:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800127a:	f002 feed 	bl	8004058 <HAL_PWREx_ControlVoltageScaling>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001284:	f000 ff72 	bl	800216c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001288:	2310      	movs	r3, #16
 800128a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800128c:	2301      	movs	r3, #1
 800128e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001294:	2360      	movs	r3, #96	@ 0x60
 8001296:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001298:	2302      	movs	r3, #2
 800129a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800129c:	2301      	movs	r3, #1
 800129e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012a0:	2301      	movs	r3, #1
 80012a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80012a4:	2328      	movs	r3, #40	@ 0x28
 80012a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80012a8:	2307      	movs	r3, #7
 80012aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012ac:	2302      	movs	r3, #2
 80012ae:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012b0:	2302      	movs	r3, #2
 80012b2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	4618      	mov	r0, r3
 80012ba:	f002 ff23 	bl	8004104 <HAL_RCC_OscConfig>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80012c4:	f000 ff52 	bl	800216c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012c8:	230f      	movs	r3, #15
 80012ca:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012cc:	2303      	movs	r3, #3
 80012ce:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012d8:	2300      	movs	r3, #0
 80012da:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012dc:	463b      	mov	r3, r7
 80012de:	2104      	movs	r1, #4
 80012e0:	4618      	mov	r0, r3
 80012e2:	f003 faeb 	bl	80048bc <HAL_RCC_ClockConfig>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80012ec:	f000 ff3e 	bl	800216c <Error_Handler>
  }
}
 80012f0:	bf00      	nop
 80012f2:	3758      	adds	r7, #88	@ 0x58
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012fc:	4b1b      	ldr	r3, [pc, #108]	@ (800136c <MX_I2C2_Init+0x74>)
 80012fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001370 <MX_I2C2_Init+0x78>)
 8001300:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00F12981;
 8001302:	4b1a      	ldr	r3, [pc, #104]	@ (800136c <MX_I2C2_Init+0x74>)
 8001304:	4a1b      	ldr	r2, [pc, #108]	@ (8001374 <MX_I2C2_Init+0x7c>)
 8001306:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001308:	4b18      	ldr	r3, [pc, #96]	@ (800136c <MX_I2C2_Init+0x74>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800130e:	4b17      	ldr	r3, [pc, #92]	@ (800136c <MX_I2C2_Init+0x74>)
 8001310:	2201      	movs	r2, #1
 8001312:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001314:	4b15      	ldr	r3, [pc, #84]	@ (800136c <MX_I2C2_Init+0x74>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800131a:	4b14      	ldr	r3, [pc, #80]	@ (800136c <MX_I2C2_Init+0x74>)
 800131c:	2200      	movs	r2, #0
 800131e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001320:	4b12      	ldr	r3, [pc, #72]	@ (800136c <MX_I2C2_Init+0x74>)
 8001322:	2200      	movs	r2, #0
 8001324:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001326:	4b11      	ldr	r3, [pc, #68]	@ (800136c <MX_I2C2_Init+0x74>)
 8001328:	2200      	movs	r2, #0
 800132a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800132c:	4b0f      	ldr	r3, [pc, #60]	@ (800136c <MX_I2C2_Init+0x74>)
 800132e:	2200      	movs	r2, #0
 8001330:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001332:	480e      	ldr	r0, [pc, #56]	@ (800136c <MX_I2C2_Init+0x74>)
 8001334:	f002 f85e 	bl	80033f4 <HAL_I2C_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800133e:	f000 ff15 	bl	800216c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001342:	2100      	movs	r1, #0
 8001344:	4809      	ldr	r0, [pc, #36]	@ (800136c <MX_I2C2_Init+0x74>)
 8001346:	f002 fde1 	bl	8003f0c <HAL_I2CEx_ConfigAnalogFilter>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001350:	f000 ff0c 	bl	800216c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001354:	2100      	movs	r1, #0
 8001356:	4805      	ldr	r0, [pc, #20]	@ (800136c <MX_I2C2_Init+0x74>)
 8001358:	f002 fe23 	bl	8003fa2 <HAL_I2CEx_ConfigDigitalFilter>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001362:	f000 ff03 	bl	800216c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200001f0 	.word	0x200001f0
 8001370:	40005800 	.word	0x40005800
 8001374:	00f12981 	.word	0x00f12981

08001378 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	@ 0x28
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800137e:	f107 031c 	add.w	r3, r7, #28
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800138a:	463b      	mov	r3, r7
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
 8001398:	615a      	str	r2, [r3, #20]
 800139a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800139c:	4b27      	ldr	r3, [pc, #156]	@ (800143c <MX_TIM2_Init+0xc4>)
 800139e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 80013a4:	4b25      	ldr	r3, [pc, #148]	@ (800143c <MX_TIM2_Init+0xc4>)
 80013a6:	224f      	movs	r2, #79	@ 0x4f
 80013a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013aa:	4b24      	ldr	r3, [pc, #144]	@ (800143c <MX_TIM2_Init+0xc4>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 80013b0:	4b22      	ldr	r3, [pc, #136]	@ (800143c <MX_TIM2_Init+0xc4>)
 80013b2:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80013b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b8:	4b20      	ldr	r3, [pc, #128]	@ (800143c <MX_TIM2_Init+0xc4>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013be:	4b1f      	ldr	r3, [pc, #124]	@ (800143c <MX_TIM2_Init+0xc4>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013c4:	481d      	ldr	r0, [pc, #116]	@ (800143c <MX_TIM2_Init+0xc4>)
 80013c6:	f004 f959 	bl	800567c <HAL_TIM_PWM_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80013d0:	f000 fecc 	bl	800216c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d8:	2300      	movs	r3, #0
 80013da:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013dc:	f107 031c 	add.w	r3, r7, #28
 80013e0:	4619      	mov	r1, r3
 80013e2:	4816      	ldr	r0, [pc, #88]	@ (800143c <MX_TIM2_Init+0xc4>)
 80013e4:	f005 fcf2 	bl	8006dcc <HAL_TIMEx_MasterConfigSynchronization>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80013ee:	f000 febd 	bl	800216c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013f2:	2360      	movs	r3, #96	@ 0x60
 80013f4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001402:	463b      	mov	r3, r7
 8001404:	2200      	movs	r2, #0
 8001406:	4619      	mov	r1, r3
 8001408:	480c      	ldr	r0, [pc, #48]	@ (800143c <MX_TIM2_Init+0xc4>)
 800140a:	f004 fe99 	bl	8006140 <HAL_TIM_PWM_ConfigChannel>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001414:	f000 feaa 	bl	800216c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001418:	463b      	mov	r3, r7
 800141a:	2204      	movs	r2, #4
 800141c:	4619      	mov	r1, r3
 800141e:	4807      	ldr	r0, [pc, #28]	@ (800143c <MX_TIM2_Init+0xc4>)
 8001420:	f004 fe8e 	bl	8006140 <HAL_TIM_PWM_ConfigChannel>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800142a:	f000 fe9f 	bl	800216c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800142e:	4803      	ldr	r0, [pc, #12]	@ (800143c <MX_TIM2_Init+0xc4>)
 8001430:	f000 ffb0 	bl	8002394 <HAL_TIM_MspPostInit>

}
 8001434:	bf00      	nop
 8001436:	3728      	adds	r7, #40	@ 0x28
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000244 	.word	0x20000244

08001440 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001446:	f107 0314 	add.w	r3, r7, #20
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800145e:	4b2b      	ldr	r3, [pc, #172]	@ (800150c <MX_TIM3_Init+0xcc>)
 8001460:	4a2b      	ldr	r2, [pc, #172]	@ (8001510 <MX_TIM3_Init+0xd0>)
 8001462:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8001464:	4b29      	ldr	r3, [pc, #164]	@ (800150c <MX_TIM3_Init+0xcc>)
 8001466:	224f      	movs	r2, #79	@ 0x4f
 8001468:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146a:	4b28      	ldr	r3, [pc, #160]	@ (800150c <MX_TIM3_Init+0xcc>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8001470:	4b26      	ldr	r3, [pc, #152]	@ (800150c <MX_TIM3_Init+0xcc>)
 8001472:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001476:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001478:	4b24      	ldr	r3, [pc, #144]	@ (800150c <MX_TIM3_Init+0xcc>)
 800147a:	2200      	movs	r2, #0
 800147c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147e:	4b23      	ldr	r3, [pc, #140]	@ (800150c <MX_TIM3_Init+0xcc>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8001484:	4821      	ldr	r0, [pc, #132]	@ (800150c <MX_TIM3_Init+0xcc>)
 8001486:	f004 fa57 	bl	8005938 <HAL_TIM_IC_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001490:	f000 fe6c 	bl	800216c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001498:	2300      	movs	r3, #0
 800149a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	4619      	mov	r1, r3
 80014a2:	481a      	ldr	r0, [pc, #104]	@ (800150c <MX_TIM3_Init+0xcc>)
 80014a4:	f005 fc92 	bl	8006dcc <HAL_TIMEx_MasterConfigSynchronization>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80014ae:	f000 fe5d 	bl	800216c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014b2:	2300      	movs	r3, #0
 80014b4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014b6:	2301      	movs	r3, #1
 80014b8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	2200      	movs	r2, #0
 80014c6:	4619      	mov	r1, r3
 80014c8:	4810      	ldr	r0, [pc, #64]	@ (800150c <MX_TIM3_Init+0xcc>)
 80014ca:	f004 fd9c 	bl	8006006 <HAL_TIM_IC_ConfigChannel>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80014d4:	f000 fe4a 	bl	800216c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	2204      	movs	r2, #4
 80014dc:	4619      	mov	r1, r3
 80014de:	480b      	ldr	r0, [pc, #44]	@ (800150c <MX_TIM3_Init+0xcc>)
 80014e0:	f004 fd91 	bl	8006006 <HAL_TIM_IC_ConfigChannel>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80014ea:	f000 fe3f 	bl	800216c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	220c      	movs	r2, #12
 80014f2:	4619      	mov	r1, r3
 80014f4:	4805      	ldr	r0, [pc, #20]	@ (800150c <MX_TIM3_Init+0xcc>)
 80014f6:	f004 fd86 	bl	8006006 <HAL_TIM_IC_ConfigChannel>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM3_Init+0xc4>
  {
    Error_Handler();
 8001500:	f000 fe34 	bl	800216c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001504:	bf00      	nop
 8001506:	3720      	adds	r7, #32
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	20000290 	.word	0x20000290
 8001510:	40000400 	.word	0x40000400

08001514 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001518:	4b14      	ldr	r3, [pc, #80]	@ (800156c <MX_USART1_UART_Init+0x58>)
 800151a:	4a15      	ldr	r2, [pc, #84]	@ (8001570 <MX_USART1_UART_Init+0x5c>)
 800151c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800151e:	4b13      	ldr	r3, [pc, #76]	@ (800156c <MX_USART1_UART_Init+0x58>)
 8001520:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001524:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001526:	4b11      	ldr	r3, [pc, #68]	@ (800156c <MX_USART1_UART_Init+0x58>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800152c:	4b0f      	ldr	r3, [pc, #60]	@ (800156c <MX_USART1_UART_Init+0x58>)
 800152e:	2200      	movs	r2, #0
 8001530:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001532:	4b0e      	ldr	r3, [pc, #56]	@ (800156c <MX_USART1_UART_Init+0x58>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001538:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <MX_USART1_UART_Init+0x58>)
 800153a:	220c      	movs	r2, #12
 800153c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153e:	4b0b      	ldr	r3, [pc, #44]	@ (800156c <MX_USART1_UART_Init+0x58>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001544:	4b09      	ldr	r3, [pc, #36]	@ (800156c <MX_USART1_UART_Init+0x58>)
 8001546:	2200      	movs	r2, #0
 8001548:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800154a:	4b08      	ldr	r3, [pc, #32]	@ (800156c <MX_USART1_UART_Init+0x58>)
 800154c:	2200      	movs	r2, #0
 800154e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001550:	4b06      	ldr	r3, [pc, #24]	@ (800156c <MX_USART1_UART_Init+0x58>)
 8001552:	2200      	movs	r2, #0
 8001554:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001556:	4805      	ldr	r0, [pc, #20]	@ (800156c <MX_USART1_UART_Init+0x58>)
 8001558:	f005 fcde 	bl	8006f18 <HAL_UART_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001562:	f000 fe03 	bl	800216c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	200002dc 	.word	0x200002dc
 8001570:	40013800 	.word	0x40013800

08001574 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001578:	4b14      	ldr	r3, [pc, #80]	@ (80015cc <MX_USART3_UART_Init+0x58>)
 800157a:	4a15      	ldr	r2, [pc, #84]	@ (80015d0 <MX_USART3_UART_Init+0x5c>)
 800157c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800157e:	4b13      	ldr	r3, [pc, #76]	@ (80015cc <MX_USART3_UART_Init+0x58>)
 8001580:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001584:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001586:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <MX_USART3_UART_Init+0x58>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800158c:	4b0f      	ldr	r3, [pc, #60]	@ (80015cc <MX_USART3_UART_Init+0x58>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001592:	4b0e      	ldr	r3, [pc, #56]	@ (80015cc <MX_USART3_UART_Init+0x58>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001598:	4b0c      	ldr	r3, [pc, #48]	@ (80015cc <MX_USART3_UART_Init+0x58>)
 800159a:	220c      	movs	r2, #12
 800159c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159e:	4b0b      	ldr	r3, [pc, #44]	@ (80015cc <MX_USART3_UART_Init+0x58>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a4:	4b09      	ldr	r3, [pc, #36]	@ (80015cc <MX_USART3_UART_Init+0x58>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015aa:	4b08      	ldr	r3, [pc, #32]	@ (80015cc <MX_USART3_UART_Init+0x58>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015b0:	4b06      	ldr	r3, [pc, #24]	@ (80015cc <MX_USART3_UART_Init+0x58>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015b6:	4805      	ldr	r0, [pc, #20]	@ (80015cc <MX_USART3_UART_Init+0x58>)
 80015b8:	f005 fcae 	bl	8006f18 <HAL_UART_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80015c2:	f000 fdd3 	bl	800216c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000364 	.word	0x20000364
 80015d0:	40004800 	.word	0x40004800

080015d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	@ 0x28
 80015d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
 80015e8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015ea:	4bbb      	ldr	r3, [pc, #748]	@ (80018d8 <MX_GPIO_Init+0x304>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ee:	4aba      	ldr	r2, [pc, #744]	@ (80018d8 <MX_GPIO_Init+0x304>)
 80015f0:	f043 0310 	orr.w	r3, r3, #16
 80015f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015f6:	4bb8      	ldr	r3, [pc, #736]	@ (80018d8 <MX_GPIO_Init+0x304>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fa:	f003 0310 	and.w	r3, r3, #16
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001602:	4bb5      	ldr	r3, [pc, #724]	@ (80018d8 <MX_GPIO_Init+0x304>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001606:	4ab4      	ldr	r2, [pc, #720]	@ (80018d8 <MX_GPIO_Init+0x304>)
 8001608:	f043 0304 	orr.w	r3, r3, #4
 800160c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800160e:	4bb2      	ldr	r3, [pc, #712]	@ (80018d8 <MX_GPIO_Init+0x304>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001612:	f003 0304 	and.w	r3, r3, #4
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800161a:	4baf      	ldr	r3, [pc, #700]	@ (80018d8 <MX_GPIO_Init+0x304>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161e:	4aae      	ldr	r2, [pc, #696]	@ (80018d8 <MX_GPIO_Init+0x304>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001626:	4bac      	ldr	r3, [pc, #688]	@ (80018d8 <MX_GPIO_Init+0x304>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001632:	4ba9      	ldr	r3, [pc, #676]	@ (80018d8 <MX_GPIO_Init+0x304>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001636:	4aa8      	ldr	r2, [pc, #672]	@ (80018d8 <MX_GPIO_Init+0x304>)
 8001638:	f043 0302 	orr.w	r3, r3, #2
 800163c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800163e:	4ba6      	ldr	r3, [pc, #664]	@ (80018d8 <MX_GPIO_Init+0x304>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800164a:	4ba3      	ldr	r3, [pc, #652]	@ (80018d8 <MX_GPIO_Init+0x304>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164e:	4aa2      	ldr	r2, [pc, #648]	@ (80018d8 <MX_GPIO_Init+0x304>)
 8001650:	f043 0308 	orr.w	r3, r3, #8
 8001654:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001656:	4ba0      	ldr	r3, [pc, #640]	@ (80018d8 <MX_GPIO_Init+0x304>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800165a:	f003 0308 	and.w	r3, r3, #8
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001662:	2200      	movs	r2, #0
 8001664:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8001668:	489c      	ldr	r0, [pc, #624]	@ (80018dc <MX_GPIO_Init+0x308>)
 800166a:	f001 feab 	bl	80033c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800166e:	2200      	movs	r2, #0
 8001670:	f24f 0114 	movw	r1, #61460	@ 0xf014
 8001674:	489a      	ldr	r0, [pc, #616]	@ (80018e0 <MX_GPIO_Init+0x30c>)
 8001676:	f001 fea5 	bl	80033c4 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 800167a:	2200      	movs	r2, #0
 800167c:	f241 0181 	movw	r1, #4225	@ 0x1081
 8001680:	4898      	ldr	r0, [pc, #608]	@ (80018e4 <MX_GPIO_Init+0x310>)
 8001682:	f001 fe9f 	bl	80033c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001686:	2201      	movs	r2, #1
 8001688:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800168c:	4895      	ldr	r0, [pc, #596]	@ (80018e4 <MX_GPIO_Init+0x310>)
 800168e:	f001 fe99 	bl	80033c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001692:	2200      	movs	r2, #0
 8001694:	f44f 7110 	mov.w	r1, #576	@ 0x240
 8001698:	4893      	ldr	r0, [pc, #588]	@ (80018e8 <MX_GPIO_Init+0x314>)
 800169a:	f001 fe93 	bl	80033c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ARD_D9_GPIO_Port, ARD_D9_Pin, GPIO_PIN_RESET);
 800169e:	2200      	movs	r2, #0
 80016a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016a8:	f001 fe8c 	bl	80033c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80016ac:	2201      	movs	r2, #1
 80016ae:	2120      	movs	r1, #32
 80016b0:	488b      	ldr	r0, [pc, #556]	@ (80018e0 <MX_GPIO_Init+0x30c>)
 80016b2:	f001 fe87 	bl	80033c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80016b6:	2201      	movs	r2, #1
 80016b8:	2101      	movs	r1, #1
 80016ba:	4888      	ldr	r0, [pc, #544]	@ (80018dc <MX_GPIO_Init+0x308>)
 80016bc:	f001 fe82 	bl	80033c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80016c0:	f240 1315 	movw	r3, #277	@ 0x115
 80016c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c6:	2301      	movs	r3, #1
 80016c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ce:	2300      	movs	r3, #0
 80016d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	4619      	mov	r1, r3
 80016d8:	4880      	ldr	r0, [pc, #512]	@ (80018dc <MX_GPIO_Init+0x308>)
 80016da:	f001 fcc9 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80016de:	236a      	movs	r3, #106	@ 0x6a
 80016e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016e2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80016e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	4619      	mov	r1, r3
 80016f2:	487a      	ldr	r0, [pc, #488]	@ (80018dc <MX_GPIO_Init+0x308>)
 80016f4:	f001 fcbc 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80016f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016fe:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001702:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	4619      	mov	r1, r3
 800170e:	4876      	ldr	r0, [pc, #472]	@ (80018e8 <MX_GPIO_Init+0x314>)
 8001710:	f001 fcae 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin;
 8001714:	230f      	movs	r3, #15
 8001716:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001718:	230b      	movs	r3, #11
 800171a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	4619      	mov	r1, r3
 8001726:	4870      	ldr	r0, [pc, #448]	@ (80018e8 <MX_GPIO_Init+0x314>)
 8001728:	f001 fca2 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800172c:	230c      	movs	r3, #12
 800172e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001738:	2303      	movs	r3, #3
 800173a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800173c:	2307      	movs	r3, #7
 800173e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800174a:	f001 fc91 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800174e:	2310      	movs	r3, #16
 8001750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001752:	230b      	movs	r3, #11
 8001754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 800175a:	f107 0314 	add.w	r3, r7, #20
 800175e:	4619      	mov	r1, r3
 8001760:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001764:	f001 fc84 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001768:	2301      	movs	r3, #1
 800176a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800176c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	4619      	mov	r1, r3
 800177c:	4858      	ldr	r0, [pc, #352]	@ (80018e0 <MX_GPIO_Init+0x30c>)
 800177e:	f001 fc77 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001782:	f24f 0334 	movw	r3, #61492	@ 0xf034
 8001786:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001788:	2301      	movs	r3, #1
 800178a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	4619      	mov	r1, r3
 800179a:	4851      	ldr	r0, [pc, #324]	@ (80018e0 <MX_GPIO_Init+0x30c>)
 800179c:	f001 fc68 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80017a0:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80017a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a6:	2302      	movs	r3, #2
 80017a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2300      	movs	r3, #0
 80017b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80017b2:	2306      	movs	r3, #6
 80017b4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017b6:	f107 0314 	add.w	r3, r7, #20
 80017ba:	4619      	mov	r1, r3
 80017bc:	4847      	ldr	r0, [pc, #284]	@ (80018dc <MX_GPIO_Init+0x308>)
 80017be:	f001 fc57 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80017c2:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 80017c6:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	2302      	movs	r3, #2
 80017ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d0:	2303      	movs	r3, #3
 80017d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80017d4:	230a      	movs	r3, #10
 80017d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	4619      	mov	r1, r3
 80017de:	483f      	ldr	r0, [pc, #252]	@ (80018dc <MX_GPIO_Init+0x308>)
 80017e0:	f001 fc46 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80017e4:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 80017e8:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017ea:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	4619      	mov	r1, r3
 80017fa:	483a      	ldr	r0, [pc, #232]	@ (80018e4 <MX_GPIO_Init+0x310>)
 80017fc:	f001 fc38 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001800:	f243 0381 	movw	r3, #12417	@ 0x3081
 8001804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001806:	2301      	movs	r3, #1
 8001808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180e:	2300      	movs	r3, #0
 8001810:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001812:	f107 0314 	add.w	r3, r7, #20
 8001816:	4619      	mov	r1, r3
 8001818:	4832      	ldr	r0, [pc, #200]	@ (80018e4 <MX_GPIO_Init+0x310>)
 800181a:	f001 fc29 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800181e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001824:	2301      	movs	r3, #1
 8001826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182c:	2300      	movs	r3, #0
 800182e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	4619      	mov	r1, r3
 8001836:	482c      	ldr	r0, [pc, #176]	@ (80018e8 <MX_GPIO_Init+0x314>)
 8001838:	f001 fc1a 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 800183c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001842:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	4619      	mov	r1, r3
 8001852:	4825      	ldr	r0, [pc, #148]	@ (80018e8 <MX_GPIO_Init+0x314>)
 8001854:	f001 fc0c 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8001858:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800185c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185e:	2301      	movs	r3, #1
 8001860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001866:	2300      	movs	r3, #0
 8001868:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 800186a:	f107 0314 	add.w	r3, r7, #20
 800186e:	4619      	mov	r1, r3
 8001870:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001874:	f001 fbfc 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001878:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800187c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187e:	2302      	movs	r3, #2
 8001880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001886:	2303      	movs	r3, #3
 8001888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800188a:	2306      	movs	r3, #6
 800188c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	4619      	mov	r1, r3
 8001894:	4814      	ldr	r0, [pc, #80]	@ (80018e8 <MX_GPIO_Init+0x314>)
 8001896:	f001 fbeb 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800189a:	2302      	movs	r3, #2
 800189c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189e:	2302      	movs	r3, #2
 80018a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a6:	2303      	movs	r3, #3
 80018a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018aa:	2305      	movs	r3, #5
 80018ac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	4619      	mov	r1, r3
 80018b4:	480b      	ldr	r0, [pc, #44]	@ (80018e4 <MX_GPIO_Init+0x310>)
 80018b6:	f001 fbdb 	bl	8003070 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80018ba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018c0:	2312      	movs	r3, #18
 80018c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c8:	2303      	movs	r3, #3
 80018ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018cc:	2304      	movs	r3, #4
 80018ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	4619      	mov	r1, r3
 80018d6:	e009      	b.n	80018ec <MX_GPIO_Init+0x318>
 80018d8:	40021000 	.word	0x40021000
 80018dc:	48001000 	.word	0x48001000
 80018e0:	48000400 	.word	0x48000400
 80018e4:	48000c00 	.word	0x48000c00
 80018e8:	48000800 	.word	0x48000800
 80018ec:	4803      	ldr	r0, [pc, #12]	@ (80018fc <MX_GPIO_Init+0x328>)
 80018ee:	f001 fbbf 	bl	8003070 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80018f2:	bf00      	nop
 80018f4:	3728      	adds	r7, #40	@ 0x28
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	48000400 	.word	0x48000400

08001900 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */

// ============= Callback d'interruption PWM =============
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
	uint32_t diff;

	// TIM2 - Commandes RC (Linéaire et Angulaire)
	if (htim->Instance == TIM3) {
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a99      	ldr	r2, [pc, #612]	@ (8001b74 <HAL_TIM_IC_CaptureCallback+0x274>)
 800190e:	4293      	cmp	r3, r2
 8001910:	f040 8191 	bne.w	8001c36 <HAL_TIM_IC_CaptureCallback+0x336>
		switch (htim->Channel) {
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	7f1b      	ldrb	r3, [r3, #28]
 8001918:	2b08      	cmp	r3, #8
 800191a:	f000 810b 	beq.w	8001b34 <HAL_TIM_IC_CaptureCallback+0x234>
 800191e:	2b08      	cmp	r3, #8
 8001920:	f300 8182 	bgt.w	8001c28 <HAL_TIM_IC_CaptureCallback+0x328>
 8001924:	2b01      	cmp	r3, #1
 8001926:	d003      	beq.n	8001930 <HAL_TIM_IC_CaptureCallback+0x30>
 8001928:	2b02      	cmp	r3, #2
 800192a:	f000 8082 	beq.w	8001a32 <HAL_TIM_IC_CaptureCallback+0x132>
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4,
						TIM_INPUTCHANNELPOLARITY_RISING);
			}
			break;
		default:
			break;
 800192e:	e17b      	b.n	8001c28 <HAL_TIM_IC_CaptureCallback+0x328>
			if (IC1_Captured == 0) {
 8001930:	4b91      	ldr	r3, [pc, #580]	@ (8001b78 <HAL_TIM_IC_CaptureCallback+0x278>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d11a      	bne.n	8001970 <HAL_TIM_IC_CaptureCallback+0x70>
				IC1_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800193a:	2100      	movs	r1, #0
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f004 fd13 	bl	8006368 <HAL_TIM_ReadCapturedValue>
 8001942:	4603      	mov	r3, r0
 8001944:	4a8d      	ldr	r2, [pc, #564]	@ (8001b7c <HAL_TIM_IC_CaptureCallback+0x27c>)
 8001946:	6013      	str	r3, [r2, #0]
				IC1_Captured = 1;
 8001948:	4b8b      	ldr	r3, [pc, #556]	@ (8001b78 <HAL_TIM_IC_CaptureCallback+0x278>)
 800194a:	2201      	movs	r2, #1
 800194c:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6a1a      	ldr	r2, [r3, #32]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f022 020a 	bic.w	r2, r2, #10
 800195c:	621a      	str	r2, [r3, #32]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	6a1a      	ldr	r2, [r3, #32]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f042 0202 	orr.w	r2, r2, #2
 800196c:	621a      	str	r2, [r3, #32]
			break;
 800196e:	e15d      	b.n	8001c2c <HAL_TIM_IC_CaptureCallback+0x32c>
			} else if (IC1_Captured == 1) {
 8001970:	4b81      	ldr	r3, [pc, #516]	@ (8001b78 <HAL_TIM_IC_CaptureCallback+0x278>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b01      	cmp	r3, #1
 8001978:	f040 8158 	bne.w	8001c2c <HAL_TIM_IC_CaptureCallback+0x32c>
				IC1_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800197c:	2100      	movs	r1, #0
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f004 fcf2 	bl	8006368 <HAL_TIM_ReadCapturedValue>
 8001984:	4603      	mov	r3, r0
 8001986:	4a7e      	ldr	r2, [pc, #504]	@ (8001b80 <HAL_TIM_IC_CaptureCallback+0x280>)
 8001988:	6013      	str	r3, [r2, #0]
				if (IC1_Value2 >= IC1_Value1)
 800198a:	4b7d      	ldr	r3, [pc, #500]	@ (8001b80 <HAL_TIM_IC_CaptureCallback+0x280>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	4b7b      	ldr	r3, [pc, #492]	@ (8001b7c <HAL_TIM_IC_CaptureCallback+0x27c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d306      	bcc.n	80019a4 <HAL_TIM_IC_CaptureCallback+0xa4>
					diff = IC1_Value2 - IC1_Value1;
 8001996:	4b7a      	ldr	r3, [pc, #488]	@ (8001b80 <HAL_TIM_IC_CaptureCallback+0x280>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	4b78      	ldr	r3, [pc, #480]	@ (8001b7c <HAL_TIM_IC_CaptureCallback+0x27c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	e00a      	b.n	80019ba <HAL_TIM_IC_CaptureCallback+0xba>
					diff = (htim->Instance->ARR - IC1_Value1) + IC1_Value2 + 1;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019aa:	4b74      	ldr	r3, [pc, #464]	@ (8001b7c <HAL_TIM_IC_CaptureCallback+0x27c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	1ad2      	subs	r2, r2, r3
 80019b0:	4b73      	ldr	r3, [pc, #460]	@ (8001b80 <HAL_TIM_IC_CaptureCallback+0x280>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4413      	add	r3, r2
 80019b6:	3301      	adds	r3, #1
 80019b8:	617b      	str	r3, [r7, #20]
				float pulse_width_us = (float) diff;
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	ee07 3a90 	vmov	s15, r3
 80019c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019c4:	edc7 7a04 	vstr	s15, [r7, #16]
				if (pulse_width_us < 1000)
 80019c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80019cc:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8001b84 <HAL_TIM_IC_CaptureCallback+0x284>
 80019d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d8:	d501      	bpl.n	80019de <HAL_TIM_IC_CaptureCallback+0xde>
					pulse_width_us = 1000;
 80019da:	4b6b      	ldr	r3, [pc, #428]	@ (8001b88 <HAL_TIM_IC_CaptureCallback+0x288>)
 80019dc:	613b      	str	r3, [r7, #16]
				if (pulse_width_us > 2000)
 80019de:	edd7 7a04 	vldr	s15, [r7, #16]
 80019e2:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 8001b8c <HAL_TIM_IC_CaptureCallback+0x28c>
 80019e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ee:	dd01      	ble.n	80019f4 <HAL_TIM_IC_CaptureCallback+0xf4>
					pulse_width_us = 2000;
 80019f0:	4b67      	ldr	r3, [pc, #412]	@ (8001b90 <HAL_TIM_IC_CaptureCallback+0x290>)
 80019f2:	613b      	str	r3, [r7, #16]
				lin = (pulse_width_us - 1500.0f) / 500.0f;
 80019f4:	edd7 7a04 	vldr	s15, [r7, #16]
 80019f8:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8001b94 <HAL_TIM_IC_CaptureCallback+0x294>
 80019fc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001a00:	eddf 6a65 	vldr	s13, [pc, #404]	@ 8001b98 <HAL_TIM_IC_CaptureCallback+0x298>
 8001a04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a08:	4b64      	ldr	r3, [pc, #400]	@ (8001b9c <HAL_TIM_IC_CaptureCallback+0x29c>)
 8001a0a:	edc3 7a00 	vstr	s15, [r3]
				IC1_Captured = 0;
 8001a0e:	4b5a      	ldr	r3, [pc, #360]	@ (8001b78 <HAL_TIM_IC_CaptureCallback+0x278>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1,
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6a1a      	ldr	r2, [r3, #32]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 020a 	bic.w	r2, r2, #10
 8001a22:	621a      	str	r2, [r3, #32]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6a12      	ldr	r2, [r2, #32]
 8001a2e:	621a      	str	r2, [r3, #32]
			break;
 8001a30:	e0fc      	b.n	8001c2c <HAL_TIM_IC_CaptureCallback+0x32c>
			if (IC2_Captured == 0) {
 8001a32:	4b5b      	ldr	r3, [pc, #364]	@ (8001ba0 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d11a      	bne.n	8001a72 <HAL_TIM_IC_CaptureCallback+0x172>
				IC2_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001a3c:	2104      	movs	r1, #4
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f004 fc92 	bl	8006368 <HAL_TIM_ReadCapturedValue>
 8001a44:	4603      	mov	r3, r0
 8001a46:	4a57      	ldr	r2, [pc, #348]	@ (8001ba4 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8001a48:	6013      	str	r3, [r2, #0]
				IC2_Captured = 1;
 8001a4a:	4b55      	ldr	r3, [pc, #340]	@ (8001ba0 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2,
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	6a1a      	ldr	r2, [r3, #32]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001a5e:	621a      	str	r2, [r3, #32]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6a1a      	ldr	r2, [r3, #32]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f042 0220 	orr.w	r2, r2, #32
 8001a6e:	621a      	str	r2, [r3, #32]
			break;
 8001a70:	e0de      	b.n	8001c30 <HAL_TIM_IC_CaptureCallback+0x330>
			} else if (IC2_Captured == 1) {
 8001a72:	4b4b      	ldr	r3, [pc, #300]	@ (8001ba0 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	f040 80d9 	bne.w	8001c30 <HAL_TIM_IC_CaptureCallback+0x330>
				IC2_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8001a7e:	2104      	movs	r1, #4
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f004 fc71 	bl	8006368 <HAL_TIM_ReadCapturedValue>
 8001a86:	4603      	mov	r3, r0
 8001a88:	4a47      	ldr	r2, [pc, #284]	@ (8001ba8 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8001a8a:	6013      	str	r3, [r2, #0]
				if (IC2_Value2 >= IC2_Value1)
 8001a8c:	4b46      	ldr	r3, [pc, #280]	@ (8001ba8 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b44      	ldr	r3, [pc, #272]	@ (8001ba4 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d306      	bcc.n	8001aa6 <HAL_TIM_IC_CaptureCallback+0x1a6>
					diff = IC2_Value2 - IC2_Value1;
 8001a98:	4b43      	ldr	r3, [pc, #268]	@ (8001ba8 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4b41      	ldr	r3, [pc, #260]	@ (8001ba4 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	e00a      	b.n	8001abc <HAL_TIM_IC_CaptureCallback+0x1bc>
					diff = (htim->Instance->ARR - IC2_Value1) + IC2_Value2 + 1;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001aac:	4b3d      	ldr	r3, [pc, #244]	@ (8001ba4 <HAL_TIM_IC_CaptureCallback+0x2a4>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	1ad2      	subs	r2, r2, r3
 8001ab2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ba8 <HAL_TIM_IC_CaptureCallback+0x2a8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	3301      	adds	r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
				float pulse_width_us = (float) diff;
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	ee07 3a90 	vmov	s15, r3
 8001ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ac6:	edc7 7a03 	vstr	s15, [r7, #12]
				if (pulse_width_us < 1000)
 8001aca:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ace:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8001b84 <HAL_TIM_IC_CaptureCallback+0x284>
 8001ad2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ada:	d501      	bpl.n	8001ae0 <HAL_TIM_IC_CaptureCallback+0x1e0>
					pulse_width_us = 1000;
 8001adc:	4b2a      	ldr	r3, [pc, #168]	@ (8001b88 <HAL_TIM_IC_CaptureCallback+0x288>)
 8001ade:	60fb      	str	r3, [r7, #12]
				if (pulse_width_us > 2000)
 8001ae0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ae4:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8001b8c <HAL_TIM_IC_CaptureCallback+0x28c>
 8001ae8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001af0:	dd01      	ble.n	8001af6 <HAL_TIM_IC_CaptureCallback+0x1f6>
					pulse_width_us = 2000;
 8001af2:	4b27      	ldr	r3, [pc, #156]	@ (8001b90 <HAL_TIM_IC_CaptureCallback+0x290>)
 8001af4:	60fb      	str	r3, [r7, #12]
				ang = (pulse_width_us - 1500.0f) / 500.0f;
 8001af6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001afa:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001b94 <HAL_TIM_IC_CaptureCallback+0x294>
 8001afe:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001b02:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8001b98 <HAL_TIM_IC_CaptureCallback+0x298>
 8001b06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b0a:	4b28      	ldr	r3, [pc, #160]	@ (8001bac <HAL_TIM_IC_CaptureCallback+0x2ac>)
 8001b0c:	edc3 7a00 	vstr	s15, [r3]
				IC2_Captured = 0;
 8001b10:	4b23      	ldr	r3, [pc, #140]	@ (8001ba0 <HAL_TIM_IC_CaptureCallback+0x2a0>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2,
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6a1a      	ldr	r2, [r3, #32]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001b24:	621a      	str	r2, [r3, #32]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6a12      	ldr	r2, [r2, #32]
 8001b30:	621a      	str	r2, [r3, #32]
			break;
 8001b32:	e07d      	b.n	8001c30 <HAL_TIM_IC_CaptureCallback+0x330>
			if (IC3_Captured == 0) {
 8001b34:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb0 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d13c      	bne.n	8001bb8 <HAL_TIM_IC_CaptureCallback+0x2b8>
				IC3_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8001b3e:	210c      	movs	r1, #12
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f004 fc11 	bl	8006368 <HAL_TIM_ReadCapturedValue>
 8001b46:	4603      	mov	r3, r0
 8001b48:	4a1a      	ldr	r2, [pc, #104]	@ (8001bb4 <HAL_TIM_IC_CaptureCallback+0x2b4>)
 8001b4a:	6013      	str	r3, [r2, #0]
				IC3_Captured = 1;
 8001b4c:	4b18      	ldr	r3, [pc, #96]	@ (8001bb0 <HAL_TIM_IC_CaptureCallback+0x2b0>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4,
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6a1a      	ldr	r2, [r3, #32]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 8001b60:	621a      	str	r2, [r3, #32]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6a1a      	ldr	r2, [r3, #32]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001b70:	621a      	str	r2, [r3, #32]
			break;
 8001b72:	e05f      	b.n	8001c34 <HAL_TIM_IC_CaptureCallback+0x334>
 8001b74:	40000400 	.word	0x40000400
 8001b78:	20000434 	.word	0x20000434
 8001b7c:	2000042c 	.word	0x2000042c
 8001b80:	20000430 	.word	0x20000430
 8001b84:	447a0000 	.word	0x447a0000
 8001b88:	447a0000 	.word	0x447a0000
 8001b8c:	44fa0000 	.word	0x44fa0000
 8001b90:	44fa0000 	.word	0x44fa0000
 8001b94:	44bb8000 	.word	0x44bb8000
 8001b98:	43fa0000 	.word	0x43fa0000
 8001b9c:	20000438 	.word	0x20000438
 8001ba0:	20000444 	.word	0x20000444
 8001ba4:	2000043c 	.word	0x2000043c
 8001ba8:	20000440 	.word	0x20000440
 8001bac:	20000448 	.word	0x20000448
 8001bb0:	20000454 	.word	0x20000454
 8001bb4:	2000044c 	.word	0x2000044c
			} else if (IC3_Captured == 1) {
 8001bb8:	4b21      	ldr	r3, [pc, #132]	@ (8001c40 <HAL_TIM_IC_CaptureCallback+0x340>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d138      	bne.n	8001c34 <HAL_TIM_IC_CaptureCallback+0x334>
				IC3_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 8001bc2:	210c      	movs	r1, #12
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f004 fbcf 	bl	8006368 <HAL_TIM_ReadCapturedValue>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	4a1d      	ldr	r2, [pc, #116]	@ (8001c44 <HAL_TIM_IC_CaptureCallback+0x344>)
 8001bce:	6013      	str	r3, [r2, #0]
				if (IC3_Value2 >= IC3_Value1)
 8001bd0:	4b1c      	ldr	r3, [pc, #112]	@ (8001c44 <HAL_TIM_IC_CaptureCallback+0x344>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c48 <HAL_TIM_IC_CaptureCallback+0x348>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d307      	bcc.n	8001bec <HAL_TIM_IC_CaptureCallback+0x2ec>
					pulse_width_SWITCH = IC3_Value2 - IC3_Value1;
 8001bdc:	4b19      	ldr	r3, [pc, #100]	@ (8001c44 <HAL_TIM_IC_CaptureCallback+0x344>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4b19      	ldr	r3, [pc, #100]	@ (8001c48 <HAL_TIM_IC_CaptureCallback+0x348>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	4a19      	ldr	r2, [pc, #100]	@ (8001c4c <HAL_TIM_IC_CaptureCallback+0x34c>)
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	e00b      	b.n	8001c04 <HAL_TIM_IC_CaptureCallback+0x304>
					pulse_width_SWITCH = (htim->Instance->ARR - IC3_Value1)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bf2:	4b15      	ldr	r3, [pc, #84]	@ (8001c48 <HAL_TIM_IC_CaptureCallback+0x348>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	1ad2      	subs	r2, r2, r3
							+ IC3_Value2 + 1;
 8001bf8:	4b12      	ldr	r3, [pc, #72]	@ (8001c44 <HAL_TIM_IC_CaptureCallback+0x344>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	3301      	adds	r3, #1
					pulse_width_SWITCH = (htim->Instance->ARR - IC3_Value1)
 8001c00:	4a12      	ldr	r2, [pc, #72]	@ (8001c4c <HAL_TIM_IC_CaptureCallback+0x34c>)
 8001c02:	6013      	str	r3, [r2, #0]
				IC3_Captured = 0;
 8001c04:	4b0e      	ldr	r3, [pc, #56]	@ (8001c40 <HAL_TIM_IC_CaptureCallback+0x340>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_4,
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6a1a      	ldr	r2, [r3, #32]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 8001c18:	621a      	str	r2, [r3, #32]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	6a12      	ldr	r2, [r2, #32]
 8001c24:	621a      	str	r2, [r3, #32]
			break;
 8001c26:	e005      	b.n	8001c34 <HAL_TIM_IC_CaptureCallback+0x334>
			break;
 8001c28:	bf00      	nop
 8001c2a:	e004      	b.n	8001c36 <HAL_TIM_IC_CaptureCallback+0x336>
			break;
 8001c2c:	bf00      	nop
 8001c2e:	e002      	b.n	8001c36 <HAL_TIM_IC_CaptureCallback+0x336>
			break;
 8001c30:	bf00      	nop
 8001c32:	e000      	b.n	8001c36 <HAL_TIM_IC_CaptureCallback+0x336>
			break;
 8001c34:	bf00      	nop
		}
	}
}
 8001c36:	bf00      	nop
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000454 	.word	0x20000454
 8001c44:	20000450 	.word	0x20000450
 8001c48:	2000044c 	.word	0x2000044c
 8001c4c:	20000458 	.word	0x20000458

08001c50 <Update_Motors>:

// Fonction de contrôle moteur
void Update_Motors(int16_t pwm_left, int16_t pwm_right) {
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	460a      	mov	r2, r1
 8001c5a:	80fb      	strh	r3, [r7, #6]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	80bb      	strh	r3, [r7, #4]
	// Clamping des valeurs
	pwm_left = (pwm_left < 1000) ? 1000 : (pwm_left > 2000) ? 2000 : pwm_left;
 8001c60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c64:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c68:	db08      	blt.n	8001c7c <Update_Motors+0x2c>
 8001c6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c6e:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001c72:	bfa8      	it	ge
 8001c74:	f44f 63fa 	movge.w	r3, #2000	@ 0x7d0
 8001c78:	b21b      	sxth	r3, r3
 8001c7a:	e001      	b.n	8001c80 <Update_Motors+0x30>
 8001c7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c80:	80fb      	strh	r3, [r7, #6]
	pwm_right = (pwm_right < 1000) ? 1000 :
 8001c82:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c86:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c8a:	db08      	blt.n	8001c9e <Update_Motors+0x4e>
 8001c8c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c90:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001c94:	bfa8      	it	ge
 8001c96:	f44f 63fa 	movge.w	r3, #2000	@ 0x7d0
 8001c9a:	b21b      	sxth	r3, r3
 8001c9c:	e001      	b.n	8001ca2 <Update_Motors+0x52>
 8001c9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ca2:	80bb      	strh	r3, [r7, #4]
				(pwm_right > 2000) ? 2000 : pwm_right;

	// Commande Moteurs
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwm_left); // Moteur Gauche (TIM3_CH3)
 8001ca4:	4b07      	ldr	r3, [pc, #28]	@ (8001cc4 <Update_Motors+0x74>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001cac:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwm_right); // Moteur Droit (TIM3_CH2)
 8001cae:	4b05      	ldr	r3, [pc, #20]	@ (8001cc4 <Update_Motors+0x74>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001cb6:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr
 8001cc4:	20000244 	.word	0x20000244

08001cc8 <HAL_UART_RxCpltCallback>:

// ============= Gestion UART =============
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
	static char buffer[128];
	static uint8_t idx = 0;

	if (rx_buffer[0] == '\n' || idx >= sizeof(buffer) - 1) {
 8001cd0:	4b18      	ldr	r3, [pc, #96]	@ (8001d34 <HAL_UART_RxCpltCallback+0x6c>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b0a      	cmp	r3, #10
 8001cd6:	d003      	beq.n	8001ce0 <HAL_UART_RxCpltCallback+0x18>
 8001cd8:	4b17      	ldr	r3, [pc, #92]	@ (8001d38 <HAL_UART_RxCpltCallback+0x70>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b7e      	cmp	r3, #126	@ 0x7e
 8001cde:	d90c      	bls.n	8001cfa <HAL_UART_RxCpltCallback+0x32>
		buffer[idx] = '\0';
 8001ce0:	4b15      	ldr	r3, [pc, #84]	@ (8001d38 <HAL_UART_RxCpltCallback+0x70>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4b15      	ldr	r3, [pc, #84]	@ (8001d3c <HAL_UART_RxCpltCallback+0x74>)
 8001ce8:	2100      	movs	r1, #0
 8001cea:	5499      	strb	r1, [r3, r2]
		processCompleteMessage(buffer);
 8001cec:	4813      	ldr	r0, [pc, #76]	@ (8001d3c <HAL_UART_RxCpltCallback+0x74>)
 8001cee:	f000 f827 	bl	8001d40 <processCompleteMessage>
		idx = 0;
 8001cf2:	4b11      	ldr	r3, [pc, #68]	@ (8001d38 <HAL_UART_RxCpltCallback+0x70>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	701a      	strb	r2, [r3, #0]
 8001cf8:	e012      	b.n	8001d20 <HAL_UART_RxCpltCallback+0x58>
	} else if (rx_buffer[0] >= 32 && rx_buffer[0] <= 126) {
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001d34 <HAL_UART_RxCpltCallback+0x6c>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b1f      	cmp	r3, #31
 8001d00:	d90e      	bls.n	8001d20 <HAL_UART_RxCpltCallback+0x58>
 8001d02:	4b0c      	ldr	r3, [pc, #48]	@ (8001d34 <HAL_UART_RxCpltCallback+0x6c>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b7e      	cmp	r3, #126	@ 0x7e
 8001d08:	d80a      	bhi.n	8001d20 <HAL_UART_RxCpltCallback+0x58>
		buffer[idx++] = rx_buffer[0];
 8001d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d38 <HAL_UART_RxCpltCallback+0x70>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	1c5a      	adds	r2, r3, #1
 8001d10:	b2d1      	uxtb	r1, r2
 8001d12:	4a09      	ldr	r2, [pc, #36]	@ (8001d38 <HAL_UART_RxCpltCallback+0x70>)
 8001d14:	7011      	strb	r1, [r2, #0]
 8001d16:	461a      	mov	r2, r3
 8001d18:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <HAL_UART_RxCpltCallback+0x6c>)
 8001d1a:	7819      	ldrb	r1, [r3, #0]
 8001d1c:	4b07      	ldr	r3, [pc, #28]	@ (8001d3c <HAL_UART_RxCpltCallback+0x74>)
 8001d1e:	5499      	strb	r1, [r3, r2]
	}

	// Relance la réception sur le premier octet
	HAL_UART_Receive_IT(huart, &rx_buffer[0], 1);
 8001d20:	2201      	movs	r2, #1
 8001d22:	4904      	ldr	r1, [pc, #16]	@ (8001d34 <HAL_UART_RxCpltCallback+0x6c>)
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f005 f9cf 	bl	80070c8 <HAL_UART_Receive_IT>
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200003ec 	.word	0x200003ec
 8001d38:	200004f0 	.word	0x200004f0
 8001d3c:	200004f4 	.word	0x200004f4

08001d40 <processCompleteMessage>:

void processCompleteMessage(char *msg) {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
	float lin_val, ang_val;
	if (sscanf(msg, "L:%f A:%f", &lin_val, &ang_val) == 2) {
 8001d48:	f107 030c 	add.w	r3, r7, #12
 8001d4c:	f107 0210 	add.w	r2, r7, #16
 8001d50:	491e      	ldr	r1, [pc, #120]	@ (8001dcc <processCompleteMessage+0x8c>)
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f007 fe14 	bl	8009980 <siscanf>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d131      	bne.n	8001dc2 <processCompleteMessage+0x82>
		printf("Message valide: %s\n\r", msg);
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	481b      	ldr	r0, [pc, #108]	@ (8001dd0 <processCompleteMessage+0x90>)
 8001d62:	f007 fc91 	bl	8009688 <iprintf>

		// Calcul des PWM
		int16_t pwm_left = 1500 + (int) ((lin_val - ang_val) * 500);
 8001d66:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d72:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001dd4 <processCompleteMessage+0x94>
 8001d76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d7e:	ee17 3a90 	vmov	r3, s15
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	82fb      	strh	r3, [r7, #22]
		int16_t pwm_right = 1500 + (int) ((lin_val + ang_val) * 500);
 8001d8c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001d90:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d98:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001dd4 <processCompleteMessage+0x94>
 8001d9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001da0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001da4:	ee17 3a90 	vmov	r3, s15
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	82bb      	strh	r3, [r7, #20]

		Update_Motors(pwm_left, pwm_right);
 8001db2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001db6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001dba:	4611      	mov	r1, r2
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff47 	bl	8001c50 <Update_Motors>
	}
}
 8001dc2:	bf00      	nop
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	0800dabc 	.word	0x0800dabc
 8001dd0:	0800dac8 	.word	0x0800dac8
 8001dd4:	43fa0000 	.word	0x43fa0000

08001dd8 <CheckSwitchMode>:

bool CheckSwitchMode(float pulse_width_SWITCH) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	ed87 0a01 	vstr	s0, [r7, #4]
	static uint32_t last_switch_time = 0;
	if (HAL_GetTick() - last_switch_time < 200)
 8001de2:	f000 ff47 	bl	8002c74 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	4b2c      	ldr	r3, [pc, #176]	@ (8001e9c <CheckSwitchMode+0xc4>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2bc7      	cmp	r3, #199	@ 0xc7
 8001df0:	d801      	bhi.n	8001df6 <CheckSwitchMode+0x1e>
		return false; // Anti-rebond 200ms
 8001df2:	2300      	movs	r3, #0
 8001df4:	e04e      	b.n	8001e94 <CheckSwitchMode+0xbc>

	if ((switch_state == 1) && (pulse_width_SWITCH < 1800)) {
 8001df6:	4b2a      	ldr	r3, [pc, #168]	@ (8001ea0 <CheckSwitchMode+0xc8>)
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d120      	bne.n	8001e42 <CheckSwitchMode+0x6a>
 8001e00:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e04:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001ea4 <CheckSwitchMode+0xcc>
 8001e08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e10:	d517      	bpl.n	8001e42 <CheckSwitchMode+0x6a>
		// Retour en mode Manuel
		HAL_UART_AbortReceive(&huart3);
 8001e12:	4825      	ldr	r0, [pc, #148]	@ (8001ea8 <CheckSwitchMode+0xd0>)
 8001e14:	f005 f9a4 	bl	8007160 <HAL_UART_AbortReceive>
		HAL_NVIC_DisableIRQ(USART3_IRQn);
 8001e18:	2027      	movs	r0, #39	@ 0x27
 8001e1a:	f001 f884 	bl	8002f26 <HAL_NVIC_DisableIRQ>

		// Réactivation des captures RC
		HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4822      	ldr	r0, [pc, #136]	@ (8001eac <CheckSwitchMode+0xd4>)
 8001e22:	f003 fde1 	bl	80059e8 <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8001e26:	2104      	movs	r1, #4
 8001e28:	4820      	ldr	r0, [pc, #128]	@ (8001eac <CheckSwitchMode+0xd4>)
 8001e2a:	f003 fddd 	bl	80059e8 <HAL_TIM_IC_Start_IT>

		switch_state = 0;
 8001e2e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea0 <CheckSwitchMode+0xc8>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]
		last_switch_time = HAL_GetTick();
 8001e34:	f000 ff1e 	bl	8002c74 <HAL_GetTick>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	4a18      	ldr	r2, [pc, #96]	@ (8001e9c <CheckSwitchMode+0xc4>)
 8001e3c:	6013      	str	r3, [r2, #0]
		return true;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e028      	b.n	8001e94 <CheckSwitchMode+0xbc>
	} else if ((switch_state == 0) && (pulse_width_SWITCH > 1800)) {
 8001e42:	4b17      	ldr	r3, [pc, #92]	@ (8001ea0 <CheckSwitchMode+0xc8>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d122      	bne.n	8001e92 <CheckSwitchMode+0xba>
 8001e4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e50:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001ea4 <CheckSwitchMode+0xcc>
 8001e54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5c:	dd19      	ble.n	8001e92 <CheckSwitchMode+0xba>
		// Passage en mode Automatique
		HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8001e5e:	2100      	movs	r1, #0
 8001e60:	4812      	ldr	r0, [pc, #72]	@ (8001eac <CheckSwitchMode+0xd4>)
 8001e62:	f003 ff0b 	bl	8005c7c <HAL_TIM_IC_Stop_IT>
		HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_2);
 8001e66:	2104      	movs	r1, #4
 8001e68:	4810      	ldr	r0, [pc, #64]	@ (8001eac <CheckSwitchMode+0xd4>)
 8001e6a:	f003 ff07 	bl	8005c7c <HAL_TIM_IC_Stop_IT>

		HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001e6e:	2027      	movs	r0, #39	@ 0x27
 8001e70:	f001 f84b 	bl	8002f0a <HAL_NVIC_EnableIRQ>
		HAL_UART_Receive_IT(&huart3, &rx_buffer[0], 1);
 8001e74:	2201      	movs	r2, #1
 8001e76:	490e      	ldr	r1, [pc, #56]	@ (8001eb0 <CheckSwitchMode+0xd8>)
 8001e78:	480b      	ldr	r0, [pc, #44]	@ (8001ea8 <CheckSwitchMode+0xd0>)
 8001e7a:	f005 f925 	bl	80070c8 <HAL_UART_Receive_IT>

		switch_state = 1;
 8001e7e:	4b08      	ldr	r3, [pc, #32]	@ (8001ea0 <CheckSwitchMode+0xc8>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	701a      	strb	r2, [r3, #0]
		last_switch_time = HAL_GetTick();
 8001e84:	f000 fef6 	bl	8002c74 <HAL_GetTick>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	4a04      	ldr	r2, [pc, #16]	@ (8001e9c <CheckSwitchMode+0xc4>)
 8001e8c:	6013      	str	r3, [r2, #0]
		return true;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <CheckSwitchMode+0xbc>
	}
	return false;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3708      	adds	r7, #8
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20000574 	.word	0x20000574
 8001ea0:	2000045c 	.word	0x2000045c
 8001ea4:	44e10000 	.word	0x44e10000
 8001ea8:	20000364 	.word	0x20000364
 8001eac:	20000290 	.word	0x20000290
 8001eb0:	200003ec 	.word	0x200003ec

08001eb4 <__io_putchar>:

int __io_putchar(int ch) {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8001ebc:	1d39      	adds	r1, r7, #4
 8001ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	4803      	ldr	r0, [pc, #12]	@ (8001ed4 <__io_putchar+0x20>)
 8001ec6:	f005 f875 	bl	8006fb4 <HAL_UART_Transmit>
	return ch;
 8001eca:	687b      	ldr	r3, [r7, #4]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	200002dc 	.word	0x200002dc

08001ed8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	printf("Erreur UART! Réinitialisation...\n");
 8001ee0:	4807      	ldr	r0, [pc, #28]	@ (8001f00 <HAL_UART_ErrorCallback+0x28>)
 8001ee2:	f007 fc39 	bl	8009758 <puts>
	HAL_UART_AbortReceive(huart);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f005 f93a 	bl	8007160 <HAL_UART_AbortReceive>
	HAL_UART_Receive_IT(huart, &rx_buffer[0], 1);
 8001eec:	2201      	movs	r2, #1
 8001eee:	4905      	ldr	r1, [pc, #20]	@ (8001f04 <HAL_UART_ErrorCallback+0x2c>)
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f005 f8e9 	bl	80070c8 <HAL_UART_Receive_IT>
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	0800dae0 	.word	0x0800dae0
 8001f04:	200003ec 	.word	0x200003ec

08001f08 <platform_write>:

#define LSM6DSL_I2C_ADDRESS (0x6A << 1) // 0xD4 en 8 bits adresse pour HAL!


static int32_t platform_write(void *handle, uint8_t Reg, uint8_t *Bufp,
		uint16_t Len) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08a      	sub	sp, #40	@ 0x28
 8001f0c:	af04      	add	r7, sp, #16
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	607a      	str	r2, [r7, #4]
 8001f12:	461a      	mov	r2, r3
 8001f14:	460b      	mov	r3, r1
 8001f16:	72fb      	strb	r3, [r7, #11]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	813b      	strh	r3, [r7, #8]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Write((I2C_HandleTypeDef*) handle,
 8001f1c:	7afb      	ldrb	r3, [r7, #11]
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f24:	9302      	str	r3, [sp, #8]
 8001f26:	893b      	ldrh	r3, [r7, #8]
 8001f28:	9301      	str	r3, [sp, #4]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	2301      	movs	r3, #1
 8001f30:	21d4      	movs	r1, #212	@ 0xd4
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f001 fafa 	bl	800352c <HAL_I2C_Mem_Write>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	75fb      	strb	r3, [r7, #23]
			(LSM6DSL_I2C_ADDRESS), Reg, I2C_MEMADD_SIZE_8BIT, Bufp, Len, 1000);
	return (status == HAL_OK) ? 0 : -1;
 8001f3c:	7dfb      	ldrb	r3, [r7, #23]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <platform_write+0x3e>
 8001f42:	2300      	movs	r3, #0
 8001f44:	e001      	b.n	8001f4a <platform_write+0x42>
 8001f46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <platform_read>:

static int32_t platform_read(void *handle, uint8_t Reg, uint8_t *Bufp,
		uint16_t Len) {
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b08a      	sub	sp, #40	@ 0x28
 8001f56:	af04      	add	r7, sp, #16
 8001f58:	60f8      	str	r0, [r7, #12]
 8001f5a:	607a      	str	r2, [r7, #4]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	460b      	mov	r3, r1
 8001f60:	72fb      	strb	r3, [r7, #11]
 8001f62:	4613      	mov	r3, r2
 8001f64:	813b      	strh	r3, [r7, #8]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read((I2C_HandleTypeDef*) handle,
 8001f66:	7afb      	ldrb	r3, [r7, #11]
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f6e:	9302      	str	r3, [sp, #8]
 8001f70:	893b      	ldrh	r3, [r7, #8]
 8001f72:	9301      	str	r3, [sp, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	2301      	movs	r3, #1
 8001f7a:	21d4      	movs	r1, #212	@ 0xd4
 8001f7c:	68f8      	ldr	r0, [r7, #12]
 8001f7e:	f001 fbe9 	bl	8003754 <HAL_I2C_Mem_Read>
 8001f82:	4603      	mov	r3, r0
 8001f84:	75fb      	strb	r3, [r7, #23]
			(LSM6DSL_I2C_ADDRESS), Reg, I2C_MEMADD_SIZE_8BIT, Bufp, Len, 1000);
	return (status == HAL_OK) ? 0 : -1;
 8001f86:	7dfb      	ldrb	r3, [r7, #23]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <platform_read+0x3e>
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	e001      	b.n	8001f94 <platform_read+0x42>
 8001f90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <IMU_Init>:

void IMU_Init(void) {
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0

	int32_t ret;
	imu_ctx.handle = (void*) &hi2c2;
 8001fa2:	4b1d      	ldr	r3, [pc, #116]	@ (8002018 <IMU_Init+0x7c>)
 8001fa4:	4a1d      	ldr	r2, [pc, #116]	@ (800201c <IMU_Init+0x80>)
 8001fa6:	60da      	str	r2, [r3, #12]
	imu_ctx.read_reg = platform_read;
 8001fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8002018 <IMU_Init+0x7c>)
 8001faa:	4a1d      	ldr	r2, [pc, #116]	@ (8002020 <IMU_Init+0x84>)
 8001fac:	605a      	str	r2, [r3, #4]
	imu_ctx.write_reg = platform_write;
 8001fae:	4b1a      	ldr	r3, [pc, #104]	@ (8002018 <IMU_Init+0x7c>)
 8001fb0:	4a1c      	ldr	r2, [pc, #112]	@ (8002024 <IMU_Init+0x88>)
 8001fb2:	601a      	str	r2, [r3, #0]

	uint8_t whoamI;
	lsm6dsl_device_id_get(&imu_ctx, &whoamI);
 8001fb4:	1dfb      	adds	r3, r7, #7
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4817      	ldr	r0, [pc, #92]	@ (8002018 <IMU_Init+0x7c>)
 8001fba:	f000 fda2 	bl	8002b02 <lsm6dsl_device_id_get>
	if (whoamI != LSM6DSL_ID) {
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	2b6a      	cmp	r3, #106	@ 0x6a
 8001fc2:	d002      	beq.n	8001fca <IMU_Init+0x2e>
		printf("Erreur IMU non détectée\n");
 8001fc4:	4818      	ldr	r0, [pc, #96]	@ (8002028 <IMU_Init+0x8c>)
 8001fc6:	f007 fbc7 	bl	8009758 <puts>
	}

	lsm6dsl_reset_set(&imu_ctx, PROPERTY_ENABLE);
 8001fca:	2101      	movs	r1, #1
 8001fcc:	4812      	ldr	r0, [pc, #72]	@ (8002018 <IMU_Init+0x7c>)
 8001fce:	f000 fda9 	bl	8002b24 <lsm6dsl_reset_set>
	HAL_Delay(100);
 8001fd2:	2064      	movs	r0, #100	@ 0x64
 8001fd4:	f000 fe5a 	bl	8002c8c <HAL_Delay>
	uint8_t rst;
	do {
		lsm6dsl_reset_get(&imu_ctx, &rst);
 8001fd8:	1dbb      	adds	r3, r7, #6
 8001fda:	4619      	mov	r1, r3
 8001fdc:	480e      	ldr	r0, [pc, #56]	@ (8002018 <IMU_Init+0x7c>)
 8001fde:	f000 fdc7 	bl	8002b70 <lsm6dsl_reset_get>
	} while (rst);
 8001fe2:	79bb      	ldrb	r3, [r7, #6]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1f7      	bne.n	8001fd8 <IMU_Init+0x3c>

	lsm6dsl_block_data_update_set(&imu_ctx, PROPERTY_ENABLE);
 8001fe8:	2101      	movs	r1, #1
 8001fea:	480b      	ldr	r0, [pc, #44]	@ (8002018 <IMU_Init+0x7c>)
 8001fec:	f000 fcd3 	bl	8002996 <lsm6dsl_block_data_update_set>
	lsm6dsl_xl_full_scale_set(&imu_ctx, LSM6DSL_2g);
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	4809      	ldr	r0, [pc, #36]	@ (8002018 <IMU_Init+0x7c>)
 8001ff4:	f000 fc37 	bl	8002866 <lsm6dsl_xl_full_scale_set>
	lsm6dsl_gy_full_scale_set(&imu_ctx, LSM6DSL_2000dps);
 8001ff8:	2106      	movs	r1, #6
 8001ffa:	4807      	ldr	r0, [pc, #28]	@ (8002018 <IMU_Init+0x7c>)
 8001ffc:	f000 fc7f 	bl	80028fe <lsm6dsl_gy_full_scale_set>
	lsm6dsl_xl_data_rate_set(&imu_ctx, LSM6DSL_XL_ODR_52Hz);
 8002000:	2103      	movs	r1, #3
 8002002:	4805      	ldr	r0, [pc, #20]	@ (8002018 <IMU_Init+0x7c>)
 8002004:	f000 fc55 	bl	80028b2 <lsm6dsl_xl_data_rate_set>
	lsm6dsl_gy_data_rate_set(&imu_ctx, LSM6DSL_GY_ODR_52Hz);
 8002008:	2103      	movs	r1, #3
 800200a:	4803      	ldr	r0, [pc, #12]	@ (8002018 <IMU_Init+0x7c>)
 800200c:	f000 fc9d 	bl	800294a <lsm6dsl_gy_data_rate_set>
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20000460 	.word	0x20000460
 800201c:	200001f0 	.word	0x200001f0
 8002020:	08001f53 	.word	0x08001f53
 8002024:	08001f09 	.word	0x08001f09
 8002028:	0800db04 	.word	0x0800db04

0800202c <IMU_Read>:


bool IMU_Read(float *accel_data, float *gyro_data) {
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]

    int16_t raw_accel[3], raw_gyro[3];

    // Lecture accéléromètre
    int32_t ret_accel = lsm6dsl_acceleration_raw_get(&imu_ctx, raw_accel);
 8002036:	f107 0310 	add.w	r3, r7, #16
 800203a:	4619      	mov	r1, r3
 800203c:	4845      	ldr	r0, [pc, #276]	@ (8002154 <IMU_Read+0x128>)
 800203e:	f000 fd18 	bl	8002a72 <lsm6dsl_acceleration_raw_get>
 8002042:	61f8      	str	r0, [r7, #28]
    if (ret_accel != 0) {
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d005      	beq.n	8002056 <IMU_Read+0x2a>
        printf("Erreur lecture accel: %ld\n\r", ret_accel);
 800204a:	69f9      	ldr	r1, [r7, #28]
 800204c:	4842      	ldr	r0, [pc, #264]	@ (8002158 <IMU_Read+0x12c>)
 800204e:	f007 fb1b 	bl	8009688 <iprintf>
        return false;
 8002052:	2300      	movs	r3, #0
 8002054:	e07a      	b.n	800214c <IMU_Read+0x120>
    }

    // Lecture gyroscope
    int32_t ret_gyro = lsm6dsl_angular_rate_raw_get(&imu_ctx, raw_gyro);
 8002056:	f107 0308 	add.w	r3, r7, #8
 800205a:	4619      	mov	r1, r3
 800205c:	483d      	ldr	r0, [pc, #244]	@ (8002154 <IMU_Read+0x128>)
 800205e:	f000 fcc0 	bl	80029e2 <lsm6dsl_angular_rate_raw_get>
 8002062:	61b8      	str	r0, [r7, #24]
    if (ret_gyro != 0) {
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d005      	beq.n	8002076 <IMU_Read+0x4a>
        printf("Erreur lecture gyro: %ld\n\r", ret_gyro);
 800206a:	69b9      	ldr	r1, [r7, #24]
 800206c:	483b      	ldr	r0, [pc, #236]	@ (800215c <IMU_Read+0x130>)
 800206e:	f007 fb0b 	bl	8009688 <iprintf>
        return false;
 8002072:	2300      	movs	r3, #0
 8002074:	e06a      	b.n	800214c <IMU_Read+0x120>
    }

    // Conversion en g (acc) et dps (gyro)
    accel_data[0] = raw_accel[0] * 0.061f / 1000.0f;
 8002076:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800207a:	ee07 3a90 	vmov	s15, r3
 800207e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002082:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8002160 <IMU_Read+0x134>
 8002086:	ee27 7a87 	vmul.f32	s14, s15, s14
 800208a:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8002164 <IMU_Read+0x138>
 800208e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	edc3 7a00 	vstr	s15, [r3]
    accel_data[1] = raw_accel[1] * 0.061f / 1000.0f;
 8002098:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800209c:	ee07 3a90 	vmov	s15, r3
 80020a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020a4:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8002160 <IMU_Read+0x134>
 80020a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3304      	adds	r3, #4
 80020b0:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8002164 <IMU_Read+0x138>
 80020b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020b8:	edc3 7a00 	vstr	s15, [r3]
    accel_data[2] = raw_accel[2] * 0.061f / 1000.0f;
 80020bc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80020c0:	ee07 3a90 	vmov	s15, r3
 80020c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020c8:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8002160 <IMU_Read+0x134>
 80020cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3308      	adds	r3, #8
 80020d4:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8002164 <IMU_Read+0x138>
 80020d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020dc:	edc3 7a00 	vstr	s15, [r3]

    gyro_data[0] = raw_gyro[0] * 70.0f / 1000.0f;
 80020e0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80020e4:	ee07 3a90 	vmov	s15, r3
 80020e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020ec:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8002168 <IMU_Read+0x13c>
 80020f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020f4:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8002164 <IMU_Read+0x138>
 80020f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	edc3 7a00 	vstr	s15, [r3]
    gyro_data[1] = raw_gyro[1] * 70.0f / 1000.0f;
 8002102:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002106:	ee07 3a90 	vmov	s15, r3
 800210a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800210e:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8002168 <IMU_Read+0x13c>
 8002112:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	3304      	adds	r3, #4
 800211a:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002164 <IMU_Read+0x138>
 800211e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002122:	edc3 7a00 	vstr	s15, [r3]
    gyro_data[2] = raw_gyro[2] * 70.0f / 1000.0f;
 8002126:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800212a:	ee07 3a90 	vmov	s15, r3
 800212e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002132:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8002168 <IMU_Read+0x13c>
 8002136:	ee27 7a87 	vmul.f32	s14, s15, s14
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	3308      	adds	r3, #8
 800213e:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8002164 <IMU_Read+0x138>
 8002142:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002146:	edc3 7a00 	vstr	s15, [r3]

    return true;
 800214a:	2301      	movs	r3, #1
}
 800214c:	4618      	mov	r0, r3
 800214e:	3720      	adds	r7, #32
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20000460 	.word	0x20000460
 8002158:	0800db20 	.word	0x0800db20
 800215c:	0800db3c 	.word	0x0800db3c
 8002160:	3d79db23 	.word	0x3d79db23
 8002164:	447a0000 	.word	0x447a0000
 8002168:	428c0000 	.word	0x428c0000

0800216c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002170:	b672      	cpsid	i
}
 8002172:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002174:	bf00      	nop
 8002176:	e7fd      	b.n	8002174 <Error_Handler+0x8>

08002178 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800217e:	4b0f      	ldr	r3, [pc, #60]	@ (80021bc <HAL_MspInit+0x44>)
 8002180:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002182:	4a0e      	ldr	r2, [pc, #56]	@ (80021bc <HAL_MspInit+0x44>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	6613      	str	r3, [r2, #96]	@ 0x60
 800218a:	4b0c      	ldr	r3, [pc, #48]	@ (80021bc <HAL_MspInit+0x44>)
 800218c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	607b      	str	r3, [r7, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002196:	4b09      	ldr	r3, [pc, #36]	@ (80021bc <HAL_MspInit+0x44>)
 8002198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800219a:	4a08      	ldr	r2, [pc, #32]	@ (80021bc <HAL_MspInit+0x44>)
 800219c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80021a2:	4b06      	ldr	r3, [pc, #24]	@ (80021bc <HAL_MspInit+0x44>)
 80021a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021aa:	603b      	str	r3, [r7, #0]
 80021ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	40021000 	.word	0x40021000

080021c0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b0ac      	sub	sp, #176	@ 0xb0
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
 80021d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021d8:	f107 0314 	add.w	r3, r7, #20
 80021dc:	2288      	movs	r2, #136	@ 0x88
 80021de:	2100      	movs	r1, #0
 80021e0:	4618      	mov	r0, r3
 80021e2:	f007 fcd3 	bl	8009b8c <memset>
  if(hi2c->Instance==I2C2)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a21      	ldr	r2, [pc, #132]	@ (8002270 <HAL_I2C_MspInit+0xb0>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d13b      	bne.n	8002268 <HAL_I2C_MspInit+0xa8>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80021f0:	2380      	movs	r3, #128	@ 0x80
 80021f2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80021f4:	2300      	movs	r3, #0
 80021f6:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	4618      	mov	r0, r3
 80021fe:	f002 fd81 	bl	8004d04 <HAL_RCCEx_PeriphCLKConfig>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002208:	f7ff ffb0 	bl	800216c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800220c:	4b19      	ldr	r3, [pc, #100]	@ (8002274 <HAL_I2C_MspInit+0xb4>)
 800220e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002210:	4a18      	ldr	r2, [pc, #96]	@ (8002274 <HAL_I2C_MspInit+0xb4>)
 8002212:	f043 0302 	orr.w	r3, r3, #2
 8002216:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002218:	4b16      	ldr	r3, [pc, #88]	@ (8002274 <HAL_I2C_MspInit+0xb4>)
 800221a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002224:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002228:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800222c:	2312      	movs	r3, #18
 800222e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002238:	2303      	movs	r3, #3
 800223a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800223e:	2304      	movs	r3, #4
 8002240:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002244:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002248:	4619      	mov	r1, r3
 800224a:	480b      	ldr	r0, [pc, #44]	@ (8002278 <HAL_I2C_MspInit+0xb8>)
 800224c:	f000 ff10 	bl	8003070 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002250:	4b08      	ldr	r3, [pc, #32]	@ (8002274 <HAL_I2C_MspInit+0xb4>)
 8002252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002254:	4a07      	ldr	r2, [pc, #28]	@ (8002274 <HAL_I2C_MspInit+0xb4>)
 8002256:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800225a:	6593      	str	r3, [r2, #88]	@ 0x58
 800225c:	4b05      	ldr	r3, [pc, #20]	@ (8002274 <HAL_I2C_MspInit+0xb4>)
 800225e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002260:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002268:	bf00      	nop
 800226a:	37b0      	adds	r7, #176	@ 0xb0
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40005800 	.word	0x40005800
 8002274:	40021000 	.word	0x40021000
 8002278:	48000400 	.word	0x48000400

0800227c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800228c:	d113      	bne.n	80022b6 <HAL_TIM_PWM_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800228e:	4b0c      	ldr	r3, [pc, #48]	@ (80022c0 <HAL_TIM_PWM_MspInit+0x44>)
 8002290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002292:	4a0b      	ldr	r2, [pc, #44]	@ (80022c0 <HAL_TIM_PWM_MspInit+0x44>)
 8002294:	f043 0301 	orr.w	r3, r3, #1
 8002298:	6593      	str	r3, [r2, #88]	@ 0x58
 800229a:	4b09      	ldr	r3, [pc, #36]	@ (80022c0 <HAL_TIM_PWM_MspInit+0x44>)
 800229c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80022a6:	2200      	movs	r2, #0
 80022a8:	2100      	movs	r1, #0
 80022aa:	201c      	movs	r0, #28
 80022ac:	f000 fe11 	bl	8002ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022b0:	201c      	movs	r0, #28
 80022b2:	f000 fe2a 	bl	8002f0a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80022b6:	bf00      	nop
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40021000 	.word	0x40021000

080022c4 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b08a      	sub	sp, #40	@ 0x28
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022cc:	f107 0314 	add.w	r3, r7, #20
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	605a      	str	r2, [r3, #4]
 80022d6:	609a      	str	r2, [r3, #8]
 80022d8:	60da      	str	r2, [r3, #12]
 80022da:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM3)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a29      	ldr	r2, [pc, #164]	@ (8002388 <HAL_TIM_IC_MspInit+0xc4>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d14c      	bne.n	8002380 <HAL_TIM_IC_MspInit+0xbc>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022e6:	4b29      	ldr	r3, [pc, #164]	@ (800238c <HAL_TIM_IC_MspInit+0xc8>)
 80022e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ea:	4a28      	ldr	r2, [pc, #160]	@ (800238c <HAL_TIM_IC_MspInit+0xc8>)
 80022ec:	f043 0302 	orr.w	r3, r3, #2
 80022f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80022f2:	4b26      	ldr	r3, [pc, #152]	@ (800238c <HAL_TIM_IC_MspInit+0xc8>)
 80022f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	613b      	str	r3, [r7, #16]
 80022fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fe:	4b23      	ldr	r3, [pc, #140]	@ (800238c <HAL_TIM_IC_MspInit+0xc8>)
 8002300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002302:	4a22      	ldr	r2, [pc, #136]	@ (800238c <HAL_TIM_IC_MspInit+0xc8>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800230a:	4b20      	ldr	r3, [pc, #128]	@ (800238c <HAL_TIM_IC_MspInit+0xc8>)
 800230c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002316:	4b1d      	ldr	r3, [pc, #116]	@ (800238c <HAL_TIM_IC_MspInit+0xc8>)
 8002318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800231a:	4a1c      	ldr	r2, [pc, #112]	@ (800238c <HAL_TIM_IC_MspInit+0xc8>)
 800231c:	f043 0302 	orr.w	r3, r3, #2
 8002320:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002322:	4b1a      	ldr	r3, [pc, #104]	@ (800238c <HAL_TIM_IC_MspInit+0xc8>)
 8002324:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	60bb      	str	r3, [r7, #8]
 800232c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800232e:	23c0      	movs	r3, #192	@ 0xc0
 8002330:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002332:	2302      	movs	r3, #2
 8002334:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233a:	2300      	movs	r3, #0
 800233c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800233e:	2302      	movs	r3, #2
 8002340:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002342:	f107 0314 	add.w	r3, r7, #20
 8002346:	4619      	mov	r1, r3
 8002348:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800234c:	f000 fe90 	bl	8003070 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002350:	2302      	movs	r3, #2
 8002352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002354:	2302      	movs	r3, #2
 8002356:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235c:	2300      	movs	r3, #0
 800235e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002360:	2302      	movs	r3, #2
 8002362:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002364:	f107 0314 	add.w	r3, r7, #20
 8002368:	4619      	mov	r1, r3
 800236a:	4809      	ldr	r0, [pc, #36]	@ (8002390 <HAL_TIM_IC_MspInit+0xcc>)
 800236c:	f000 fe80 	bl	8003070 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002370:	2200      	movs	r2, #0
 8002372:	2100      	movs	r1, #0
 8002374:	201d      	movs	r0, #29
 8002376:	f000 fdac 	bl	8002ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800237a:	201d      	movs	r0, #29
 800237c:	f000 fdc5 	bl	8002f0a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002380:	bf00      	nop
 8002382:	3728      	adds	r7, #40	@ 0x28
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	40000400 	.word	0x40000400
 800238c:	40021000 	.word	0x40021000
 8002390:	48000400 	.word	0x48000400

08002394 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b088      	sub	sp, #32
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239c:	f107 030c 	add.w	r3, r7, #12
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	60da      	str	r2, [r3, #12]
 80023aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023b4:	d11c      	bne.n	80023f0 <HAL_TIM_MspPostInit+0x5c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b6:	4b10      	ldr	r3, [pc, #64]	@ (80023f8 <HAL_TIM_MspPostInit+0x64>)
 80023b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ba:	4a0f      	ldr	r2, [pc, #60]	@ (80023f8 <HAL_TIM_MspPostInit+0x64>)
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023c2:	4b0d      	ldr	r3, [pc, #52]	@ (80023f8 <HAL_TIM_MspPostInit+0x64>)
 80023c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	60bb      	str	r3, [r7, #8]
 80023cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80023ce:	2303      	movs	r3, #3
 80023d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d2:	2302      	movs	r3, #2
 80023d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023da:	2300      	movs	r3, #0
 80023dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023de:	2301      	movs	r3, #1
 80023e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e2:	f107 030c 	add.w	r3, r7, #12
 80023e6:	4619      	mov	r1, r3
 80023e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023ec:	f000 fe40 	bl	8003070 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80023f0:	bf00      	nop
 80023f2:	3720      	adds	r7, #32
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40021000 	.word	0x40021000

080023fc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b0ae      	sub	sp, #184	@ 0xb8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002404:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	60da      	str	r2, [r3, #12]
 8002412:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002414:	f107 031c 	add.w	r3, r7, #28
 8002418:	2288      	movs	r2, #136	@ 0x88
 800241a:	2100      	movs	r1, #0
 800241c:	4618      	mov	r0, r3
 800241e:	f007 fbb5 	bl	8009b8c <memset>
  if(huart->Instance==USART1)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a45      	ldr	r2, [pc, #276]	@ (800253c <HAL_UART_MspInit+0x140>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d13b      	bne.n	80024a4 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800242c:	2301      	movs	r3, #1
 800242e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002430:	2300      	movs	r3, #0
 8002432:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002434:	f107 031c 	add.w	r3, r7, #28
 8002438:	4618      	mov	r0, r3
 800243a:	f002 fc63 	bl	8004d04 <HAL_RCCEx_PeriphCLKConfig>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002444:	f7ff fe92 	bl	800216c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002448:	4b3d      	ldr	r3, [pc, #244]	@ (8002540 <HAL_UART_MspInit+0x144>)
 800244a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800244c:	4a3c      	ldr	r2, [pc, #240]	@ (8002540 <HAL_UART_MspInit+0x144>)
 800244e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002452:	6613      	str	r3, [r2, #96]	@ 0x60
 8002454:	4b3a      	ldr	r3, [pc, #232]	@ (8002540 <HAL_UART_MspInit+0x144>)
 8002456:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002458:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800245c:	61bb      	str	r3, [r7, #24]
 800245e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002460:	4b37      	ldr	r3, [pc, #220]	@ (8002540 <HAL_UART_MspInit+0x144>)
 8002462:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002464:	4a36      	ldr	r2, [pc, #216]	@ (8002540 <HAL_UART_MspInit+0x144>)
 8002466:	f043 0302 	orr.w	r3, r3, #2
 800246a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800246c:	4b34      	ldr	r3, [pc, #208]	@ (8002540 <HAL_UART_MspInit+0x144>)
 800246e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	617b      	str	r3, [r7, #20]
 8002476:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002478:	23c0      	movs	r3, #192	@ 0xc0
 800247a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247e:	2302      	movs	r3, #2
 8002480:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	2300      	movs	r3, #0
 8002486:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800248a:	2303      	movs	r3, #3
 800248c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002490:	2307      	movs	r3, #7
 8002492:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002496:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800249a:	4619      	mov	r1, r3
 800249c:	4829      	ldr	r0, [pc, #164]	@ (8002544 <HAL_UART_MspInit+0x148>)
 800249e:	f000 fde7 	bl	8003070 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 80024a2:	e047      	b.n	8002534 <HAL_UART_MspInit+0x138>
  else if(huart->Instance==USART3)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a27      	ldr	r2, [pc, #156]	@ (8002548 <HAL_UART_MspInit+0x14c>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d142      	bne.n	8002534 <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80024ae:	2304      	movs	r3, #4
 80024b0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80024b2:	2300      	movs	r3, #0
 80024b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024b6:	f107 031c 	add.w	r3, r7, #28
 80024ba:	4618      	mov	r0, r3
 80024bc:	f002 fc22 	bl	8004d04 <HAL_RCCEx_PeriphCLKConfig>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <HAL_UART_MspInit+0xce>
      Error_Handler();
 80024c6:	f7ff fe51 	bl	800216c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80024ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002540 <HAL_UART_MspInit+0x144>)
 80024cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ce:	4a1c      	ldr	r2, [pc, #112]	@ (8002540 <HAL_UART_MspInit+0x144>)
 80024d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80024d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002540 <HAL_UART_MspInit+0x144>)
 80024d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024de:	613b      	str	r3, [r7, #16]
 80024e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024e2:	4b17      	ldr	r3, [pc, #92]	@ (8002540 <HAL_UART_MspInit+0x144>)
 80024e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e6:	4a16      	ldr	r2, [pc, #88]	@ (8002540 <HAL_UART_MspInit+0x144>)
 80024e8:	f043 0304 	orr.w	r3, r3, #4
 80024ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024ee:	4b14      	ldr	r3, [pc, #80]	@ (8002540 <HAL_UART_MspInit+0x144>)
 80024f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80024fa:	2330      	movs	r3, #48	@ 0x30
 80024fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002500:	2302      	movs	r3, #2
 8002502:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002506:	2300      	movs	r3, #0
 8002508:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800250c:	2303      	movs	r3, #3
 800250e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002512:	2307      	movs	r3, #7
 8002514:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002518:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800251c:	4619      	mov	r1, r3
 800251e:	480b      	ldr	r0, [pc, #44]	@ (800254c <HAL_UART_MspInit+0x150>)
 8002520:	f000 fda6 	bl	8003070 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002524:	2200      	movs	r2, #0
 8002526:	2100      	movs	r1, #0
 8002528:	2027      	movs	r0, #39	@ 0x27
 800252a:	f000 fcd2 	bl	8002ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800252e:	2027      	movs	r0, #39	@ 0x27
 8002530:	f000 fceb 	bl	8002f0a <HAL_NVIC_EnableIRQ>
}
 8002534:	bf00      	nop
 8002536:	37b8      	adds	r7, #184	@ 0xb8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40013800 	.word	0x40013800
 8002540:	40021000 	.word	0x40021000
 8002544:	48000400 	.word	0x48000400
 8002548:	40004800 	.word	0x40004800
 800254c:	48000800 	.word	0x48000800

08002550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002554:	bf00      	nop
 8002556:	e7fd      	b.n	8002554 <NMI_Handler+0x4>

08002558 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800255c:	bf00      	nop
 800255e:	e7fd      	b.n	800255c <HardFault_Handler+0x4>

08002560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002564:	bf00      	nop
 8002566:	e7fd      	b.n	8002564 <MemManage_Handler+0x4>

08002568 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800256c:	bf00      	nop
 800256e:	e7fd      	b.n	800256c <BusFault_Handler+0x4>

08002570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002574:	bf00      	nop
 8002576:	e7fd      	b.n	8002574 <UsageFault_Handler+0x4>

08002578 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002586:	b480      	push	{r7}
 8002588:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800258a:	bf00      	nop
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002598:	bf00      	nop
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025a6:	f000 fb51 	bl	8002c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025b4:	4802      	ldr	r0, [pc, #8]	@ (80025c0 <TIM2_IRQHandler+0x10>)
 80025b6:	f003 fc1f 	bl	8005df8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	20000244 	.word	0x20000244

080025c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80025c8:	4802      	ldr	r0, [pc, #8]	@ (80025d4 <TIM3_IRQHandler+0x10>)
 80025ca:	f003 fc15 	bl	8005df8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	20000290 	.word	0x20000290

080025d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80025dc:	4802      	ldr	r0, [pc, #8]	@ (80025e8 <USART3_IRQHandler+0x10>)
 80025de:	f004 fe71 	bl	80072c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000364 	.word	0x20000364

080025ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  return 1;
 80025f0:	2301      	movs	r3, #1
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <_kill>:

int _kill(int pid, int sig)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002606:	f007 fb13 	bl	8009c30 <__errno>
 800260a:	4603      	mov	r3, r0
 800260c:	2216      	movs	r2, #22
 800260e:	601a      	str	r2, [r3, #0]
  return -1;
 8002610:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002614:	4618      	mov	r0, r3
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <_exit>:

void _exit (int status)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002624:	f04f 31ff 	mov.w	r1, #4294967295
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7ff ffe7 	bl	80025fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800262e:	bf00      	nop
 8002630:	e7fd      	b.n	800262e <_exit+0x12>

08002632 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b086      	sub	sp, #24
 8002636:	af00      	add	r7, sp, #0
 8002638:	60f8      	str	r0, [r7, #12]
 800263a:	60b9      	str	r1, [r7, #8]
 800263c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800263e:	2300      	movs	r3, #0
 8002640:	617b      	str	r3, [r7, #20]
 8002642:	e00a      	b.n	800265a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002644:	f3af 8000 	nop.w
 8002648:	4601      	mov	r1, r0
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	1c5a      	adds	r2, r3, #1
 800264e:	60ba      	str	r2, [r7, #8]
 8002650:	b2ca      	uxtb	r2, r1
 8002652:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	3301      	adds	r3, #1
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	429a      	cmp	r2, r3
 8002660:	dbf0      	blt.n	8002644 <_read+0x12>
  }

  return len;
 8002662:	687b      	ldr	r3, [r7, #4]
}
 8002664:	4618      	mov	r0, r3
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]
 800267c:	e009      	b.n	8002692 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	1c5a      	adds	r2, r3, #1
 8002682:	60ba      	str	r2, [r7, #8]
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff fc14 	bl	8001eb4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	3301      	adds	r3, #1
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	429a      	cmp	r2, r3
 8002698:	dbf1      	blt.n	800267e <_write+0x12>
  }
  return len;
 800269a:	687b      	ldr	r3, [r7, #4]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <_close>:

int _close(int file)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026cc:	605a      	str	r2, [r3, #4]
  return 0;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <_isatty>:

int _isatty(int file)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026e4:	2301      	movs	r3, #1
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b085      	sub	sp, #20
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	60f8      	str	r0, [r7, #12]
 80026fa:	60b9      	str	r1, [r7, #8]
 80026fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002714:	4a14      	ldr	r2, [pc, #80]	@ (8002768 <_sbrk+0x5c>)
 8002716:	4b15      	ldr	r3, [pc, #84]	@ (800276c <_sbrk+0x60>)
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002720:	4b13      	ldr	r3, [pc, #76]	@ (8002770 <_sbrk+0x64>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d102      	bne.n	800272e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002728:	4b11      	ldr	r3, [pc, #68]	@ (8002770 <_sbrk+0x64>)
 800272a:	4a12      	ldr	r2, [pc, #72]	@ (8002774 <_sbrk+0x68>)
 800272c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800272e:	4b10      	ldr	r3, [pc, #64]	@ (8002770 <_sbrk+0x64>)
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4413      	add	r3, r2
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	429a      	cmp	r2, r3
 800273a:	d207      	bcs.n	800274c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800273c:	f007 fa78 	bl	8009c30 <__errno>
 8002740:	4603      	mov	r3, r0
 8002742:	220c      	movs	r2, #12
 8002744:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002746:	f04f 33ff 	mov.w	r3, #4294967295
 800274a:	e009      	b.n	8002760 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800274c:	4b08      	ldr	r3, [pc, #32]	@ (8002770 <_sbrk+0x64>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002752:	4b07      	ldr	r3, [pc, #28]	@ (8002770 <_sbrk+0x64>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4413      	add	r3, r2
 800275a:	4a05      	ldr	r2, [pc, #20]	@ (8002770 <_sbrk+0x64>)
 800275c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800275e:	68fb      	ldr	r3, [r7, #12]
}
 8002760:	4618      	mov	r0, r3
 8002762:	3718      	adds	r7, #24
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	20018000 	.word	0x20018000
 800276c:	00000400 	.word	0x00000400
 8002770:	20000578 	.word	0x20000578
 8002774:	200006d0 	.word	0x200006d0

08002778 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800277c:	4b06      	ldr	r3, [pc, #24]	@ (8002798 <SystemInit+0x20>)
 800277e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002782:	4a05      	ldr	r2, [pc, #20]	@ (8002798 <SystemInit+0x20>)
 8002784:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002788:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800278c:	bf00      	nop
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	e000ed00 	.word	0xe000ed00

0800279c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800279c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027a0:	f7ff ffea 	bl	8002778 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027a4:	480c      	ldr	r0, [pc, #48]	@ (80027d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80027a6:	490d      	ldr	r1, [pc, #52]	@ (80027dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80027a8:	4a0d      	ldr	r2, [pc, #52]	@ (80027e0 <LoopForever+0xe>)
  movs r3, #0
 80027aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027ac:	e002      	b.n	80027b4 <LoopCopyDataInit>

080027ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027b2:	3304      	adds	r3, #4

080027b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027b8:	d3f9      	bcc.n	80027ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ba:	4a0a      	ldr	r2, [pc, #40]	@ (80027e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027bc:	4c0a      	ldr	r4, [pc, #40]	@ (80027e8 <LoopForever+0x16>)
  movs r3, #0
 80027be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027c0:	e001      	b.n	80027c6 <LoopFillZerobss>

080027c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027c4:	3204      	adds	r2, #4

080027c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027c8:	d3fb      	bcc.n	80027c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027ca:	f007 fa37 	bl	8009c3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027ce:	f7fe fc27 	bl	8001020 <main>

080027d2 <LoopForever>:

LoopForever:
    b LoopForever
 80027d2:	e7fe      	b.n	80027d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80027d4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80027d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027dc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80027e0:	0800dffc 	.word	0x0800dffc
  ldr r2, =_sbss
 80027e4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80027e8:	200006cc 	.word	0x200006cc

080027ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027ec:	e7fe      	b.n	80027ec <ADC1_2_IRQHandler>

080027ee <lsm6dsl_read_reg>:
  *
  */
int32_t __weak lsm6dsl_read_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80027ee:	b590      	push	{r4, r7, lr}
 80027f0:	b087      	sub	sp, #28
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	60f8      	str	r0, [r7, #12]
 80027f6:	607a      	str	r2, [r7, #4]
 80027f8:	461a      	mov	r2, r3
 80027fa:	460b      	mov	r3, r1
 80027fc:	72fb      	strb	r3, [r7, #11]
 80027fe:	4613      	mov	r3, r2
 8002800:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d102      	bne.n	800280e <lsm6dsl_read_reg+0x20>
  {
    return -1;
 8002808:	f04f 33ff 	mov.w	r3, #4294967295
 800280c:	e009      	b.n	8002822 <lsm6dsl_read_reg+0x34>
  }

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	685c      	ldr	r4, [r3, #4]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	68d8      	ldr	r0, [r3, #12]
 8002816:	893b      	ldrh	r3, [r7, #8]
 8002818:	7af9      	ldrb	r1, [r7, #11]
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	47a0      	blx	r4
 800281e:	6178      	str	r0, [r7, #20]

  return ret;
 8002820:	697b      	ldr	r3, [r7, #20]
}
 8002822:	4618      	mov	r0, r3
 8002824:	371c      	adds	r7, #28
 8002826:	46bd      	mov	sp, r7
 8002828:	bd90      	pop	{r4, r7, pc}

0800282a <lsm6dsl_write_reg>:
  *
  */
int32_t __weak lsm6dsl_write_reg(const stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 800282a:	b590      	push	{r4, r7, lr}
 800282c:	b087      	sub	sp, #28
 800282e:	af00      	add	r7, sp, #0
 8002830:	60f8      	str	r0, [r7, #12]
 8002832:	607a      	str	r2, [r7, #4]
 8002834:	461a      	mov	r2, r3
 8002836:	460b      	mov	r3, r1
 8002838:	72fb      	strb	r3, [r7, #11]
 800283a:	4613      	mov	r3, r2
 800283c:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  if (ctx == NULL)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d102      	bne.n	800284a <lsm6dsl_write_reg+0x20>
  {
    return -1;
 8002844:	f04f 33ff 	mov.w	r3, #4294967295
 8002848:	e009      	b.n	800285e <lsm6dsl_write_reg+0x34>
  }

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681c      	ldr	r4, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	68d8      	ldr	r0, [r3, #12]
 8002852:	893b      	ldrh	r3, [r7, #8]
 8002854:	7af9      	ldrb	r1, [r7, #11]
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	47a0      	blx	r4
 800285a:	6178      	str	r0, [r7, #20]

  return ret;
 800285c:	697b      	ldr	r3, [r7, #20]
}
 800285e:	4618      	mov	r0, r3
 8002860:	371c      	adds	r7, #28
 8002862:	46bd      	mov	sp, r7
 8002864:	bd90      	pop	{r4, r7, pc}

08002866 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(const stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b084      	sub	sp, #16
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	460b      	mov	r3, r1
 8002870:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002872:	f107 0208 	add.w	r2, r7, #8
 8002876:	2301      	movs	r3, #1
 8002878:	2110      	movs	r1, #16
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7ff ffb7 	bl	80027ee <lsm6dsl_read_reg>
 8002880:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10f      	bne.n	80028a8 <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8002888:	78fb      	ldrb	r3, [r7, #3]
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	b2da      	uxtb	r2, r3
 8002890:	7a3b      	ldrb	r3, [r7, #8]
 8002892:	f362 0383 	bfi	r3, r2, #2, #2
 8002896:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8002898:	f107 0208 	add.w	r2, r7, #8
 800289c:	2301      	movs	r3, #1
 800289e:	2110      	movs	r1, #16
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f7ff ffc2 	bl	800282a <lsm6dsl_write_reg>
 80028a6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80028a8:	68fb      	ldr	r3, [r7, #12]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(const stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b084      	sub	sp, #16
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
 80028ba:	460b      	mov	r3, r1
 80028bc:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80028be:	f107 0208 	add.w	r2, r7, #8
 80028c2:	2301      	movs	r3, #1
 80028c4:	2110      	movs	r1, #16
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7ff ff91 	bl	80027ee <lsm6dsl_read_reg>
 80028cc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10f      	bne.n	80028f4 <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 80028d4:	78fb      	ldrb	r3, [r7, #3]
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	7a3b      	ldrb	r3, [r7, #8]
 80028de:	f362 1307 	bfi	r3, r2, #4, #4
 80028e2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 80028e4:	f107 0208 	add.w	r2, r7, #8
 80028e8:	2301      	movs	r3, #1
 80028ea:	2110      	movs	r1, #16
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f7ff ff9c 	bl	800282a <lsm6dsl_write_reg>
 80028f2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80028f4:	68fb      	ldr	r3, [r7, #12]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(const stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b084      	sub	sp, #16
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
 8002906:	460b      	mov	r3, r1
 8002908:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800290a:	f107 0208 	add.w	r2, r7, #8
 800290e:	2301      	movs	r3, #1
 8002910:	2111      	movs	r1, #17
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7ff ff6b 	bl	80027ee <lsm6dsl_read_reg>
 8002918:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10f      	bne.n	8002940 <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 8002920:	78fb      	ldrb	r3, [r7, #3]
 8002922:	f003 0307 	and.w	r3, r3, #7
 8002926:	b2da      	uxtb	r2, r3
 8002928:	7a3b      	ldrb	r3, [r7, #8]
 800292a:	f362 0343 	bfi	r3, r2, #1, #3
 800292e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002930:	f107 0208 	add.w	r2, r7, #8
 8002934:	2301      	movs	r3, #1
 8002936:	2111      	movs	r1, #17
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7ff ff76 	bl	800282a <lsm6dsl_write_reg>
 800293e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002940:	68fb      	ldr	r3, [r7, #12]
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(const stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 800294a:	b580      	push	{r7, lr}
 800294c:	b084      	sub	sp, #16
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	460b      	mov	r3, r1
 8002954:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002956:	f107 0208 	add.w	r2, r7, #8
 800295a:	2301      	movs	r3, #1
 800295c:	2111      	movs	r1, #17
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7ff ff45 	bl	80027ee <lsm6dsl_read_reg>
 8002964:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10f      	bne.n	800298c <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 800296c:	78fb      	ldrb	r3, [r7, #3]
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	b2da      	uxtb	r2, r3
 8002974:	7a3b      	ldrb	r3, [r7, #8]
 8002976:	f362 1307 	bfi	r3, r2, #4, #4
 800297a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800297c:	f107 0208 	add.w	r2, r7, #8
 8002980:	2301      	movs	r3, #1
 8002982:	2111      	movs	r1, #17
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7ff ff50 	bl	800282a <lsm6dsl_write_reg>
 800298a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800298c:	68fb      	ldr	r3, [r7, #12]
}
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8002996:	b580      	push	{r7, lr}
 8002998:	b084      	sub	sp, #16
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	460b      	mov	r3, r1
 80029a0:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80029a2:	f107 0208 	add.w	r2, r7, #8
 80029a6:	2301      	movs	r3, #1
 80029a8:	2112      	movs	r1, #18
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff ff1f 	bl	80027ee <lsm6dsl_read_reg>
 80029b0:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10f      	bne.n	80029d8 <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 80029b8:	78fb      	ldrb	r3, [r7, #3]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	7a3b      	ldrb	r3, [r7, #8]
 80029c2:	f362 1386 	bfi	r3, r2, #6, #1
 80029c6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80029c8:	f107 0208 	add.w	r2, r7, #8
 80029cc:	2301      	movs	r3, #1
 80029ce:	2112      	movs	r1, #18
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f7ff ff2a 	bl	800282a <lsm6dsl_write_reg>
 80029d6:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80029d8:	68fb      	ldr	r3, [r7, #12]
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <lsm6dsl_angular_rate_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_angular_rate_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b086      	sub	sp, #24
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
 80029ea:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
 80029ec:	f107 020c 	add.w	r2, r7, #12
 80029f0:	2306      	movs	r3, #6
 80029f2:	2122      	movs	r1, #34	@ 0x22
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff fefa 	bl	80027ee <lsm6dsl_read_reg>
 80029fa:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80029fc:	7b7b      	ldrb	r3, [r7, #13]
 80029fe:	b21a      	sxth	r2, r3
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	021b      	lsls	r3, r3, #8
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	7b3a      	ldrb	r2, [r7, #12]
 8002a12:	4413      	add	r3, r2
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	b21a      	sxth	r2, r3
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002a1c:	7bfa      	ldrb	r2, [r7, #15]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	3302      	adds	r3, #2
 8002a22:	b212      	sxth	r2, r2
 8002a24:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	3302      	adds	r3, #2
 8002a2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	021b      	lsls	r3, r3, #8
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	7bba      	ldrb	r2, [r7, #14]
 8002a36:	4413      	add	r3, r2
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	3302      	adds	r3, #2
 8002a3e:	b212      	sxth	r2, r2
 8002a40:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002a42:	7c7a      	ldrb	r2, [r7, #17]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	3304      	adds	r3, #4
 8002a48:	b212      	sxth	r2, r2
 8002a4a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	3304      	adds	r3, #4
 8002a50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	021b      	lsls	r3, r3, #8
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	7c3a      	ldrb	r2, [r7, #16]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	3304      	adds	r3, #4
 8002a64:	b212      	sxth	r2, r2
 8002a66:	801a      	strh	r2, [r3, #0]

  return ret;
 8002a68:	697b      	ldr	r3, [r7, #20]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(const stmdev_ctx_t *ctx, int16_t *val)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b086      	sub	sp, #24
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8002a7c:	f107 020c 	add.w	r2, r7, #12
 8002a80:	2306      	movs	r3, #6
 8002a82:	2128      	movs	r1, #40	@ 0x28
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f7ff feb2 	bl	80027ee <lsm6dsl_read_reg>
 8002a8a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002a8c:	7b7b      	ldrb	r3, [r7, #13]
 8002a8e:	b21a      	sxth	r2, r3
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	021b      	lsls	r3, r3, #8
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	7b3a      	ldrb	r2, [r7, #12]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	b21a      	sxth	r2, r3
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002aac:	7bfa      	ldrb	r2, [r7, #15]
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	3302      	adds	r3, #2
 8002ab2:	b212      	sxth	r2, r2
 8002ab4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	3302      	adds	r3, #2
 8002aba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	021b      	lsls	r3, r3, #8
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	7bba      	ldrb	r2, [r7, #14]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	3302      	adds	r3, #2
 8002ace:	b212      	sxth	r2, r2
 8002ad0:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002ad2:	7c7a      	ldrb	r2, [r7, #17]
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	3304      	adds	r3, #4
 8002ad8:	b212      	sxth	r2, r2
 8002ada:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	3304      	adds	r3, #4
 8002ae0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	021b      	lsls	r3, r3, #8
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	7c3a      	ldrb	r2, [r7, #16]
 8002aec:	4413      	add	r3, r2
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	3304      	adds	r3, #4
 8002af4:	b212      	sxth	r2, r2
 8002af6:	801a      	strh	r2, [r3, #0]

  return ret;
 8002af8:	697b      	ldr	r3, [r7, #20]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3718      	adds	r7, #24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(const stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b084      	sub	sp, #16
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
 8002b0a:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	210f      	movs	r1, #15
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7ff fe6b 	bl	80027ee <lsm6dsl_read_reg>
 8002b18:	60f8      	str	r0, [r7, #12]

  return ret;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <lsm6dsl_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_set(const stmdev_ctx_t *ctx, uint8_t val)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002b30:	f107 0208 	add.w	r2, r7, #8
 8002b34:	2301      	movs	r3, #1
 8002b36:	2112      	movs	r1, #18
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f7ff fe58 	bl	80027ee <lsm6dsl_read_reg>
 8002b3e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10f      	bne.n	8002b66 <lsm6dsl_reset_set+0x42>
  {
    ctrl3_c.sw_reset = val;
 8002b46:	78fb      	ldrb	r3, [r7, #3]
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	7a3b      	ldrb	r3, [r7, #8]
 8002b50:	f362 0300 	bfi	r3, r2, #0, #1
 8002b54:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002b56:	f107 0208 	add.w	r2, r7, #8
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	2112      	movs	r1, #18
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7ff fe63 	bl	800282a <lsm6dsl_write_reg>
 8002b64:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002b66:	68fb      	ldr	r3, [r7, #12]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <lsm6dsl_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_reset_get(const stmdev_ctx_t *ctx, uint8_t *val)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002b7a:	f107 0208 	add.w	r2, r7, #8
 8002b7e:	2301      	movs	r3, #1
 8002b80:	2112      	movs	r1, #18
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7ff fe33 	bl	80027ee <lsm6dsl_read_reg>
 8002b88:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8002b8a:	7a3b      	ldrb	r3, [r7, #8]
 8002b8c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	461a      	mov	r2, r3
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	701a      	strb	r2, [r3, #0]

  return ret;
 8002b98:	68fb      	ldr	r3, [r7, #12]
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b082      	sub	sp, #8
 8002ba6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bac:	2003      	movs	r0, #3
 8002bae:	f000 f985 	bl	8002ebc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002bb2:	2000      	movs	r0, #0
 8002bb4:	f000 f80e 	bl	8002bd4 <HAL_InitTick>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d002      	beq.n	8002bc4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	71fb      	strb	r3, [r7, #7]
 8002bc2:	e001      	b.n	8002bc8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002bc4:	f7ff fad8 	bl	8002178 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002bc8:	79fb      	ldrb	r3, [r7, #7]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
	...

08002bd4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002be0:	4b17      	ldr	r3, [pc, #92]	@ (8002c40 <HAL_InitTick+0x6c>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d023      	beq.n	8002c30 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002be8:	4b16      	ldr	r3, [pc, #88]	@ (8002c44 <HAL_InitTick+0x70>)
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	4b14      	ldr	r3, [pc, #80]	@ (8002c40 <HAL_InitTick+0x6c>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 f99f 	bl	8002f42 <HAL_SYSTICK_Config>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10f      	bne.n	8002c2a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2b0f      	cmp	r3, #15
 8002c0e:	d809      	bhi.n	8002c24 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c10:	2200      	movs	r2, #0
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	f04f 30ff 	mov.w	r0, #4294967295
 8002c18:	f000 f95b 	bl	8002ed2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c1c:	4a0a      	ldr	r2, [pc, #40]	@ (8002c48 <HAL_InitTick+0x74>)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6013      	str	r3, [r2, #0]
 8002c22:	e007      	b.n	8002c34 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	73fb      	strb	r3, [r7, #15]
 8002c28:	e004      	b.n	8002c34 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	73fb      	strb	r3, [r7, #15]
 8002c2e:	e001      	b.n	8002c34 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20000008 	.word	0x20000008
 8002c44:	20000000 	.word	0x20000000
 8002c48:	20000004 	.word	0x20000004

08002c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c50:	4b06      	ldr	r3, [pc, #24]	@ (8002c6c <HAL_IncTick+0x20>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	461a      	mov	r2, r3
 8002c56:	4b06      	ldr	r3, [pc, #24]	@ (8002c70 <HAL_IncTick+0x24>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	4a04      	ldr	r2, [pc, #16]	@ (8002c70 <HAL_IncTick+0x24>)
 8002c5e:	6013      	str	r3, [r2, #0]
}
 8002c60:	bf00      	nop
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	20000008 	.word	0x20000008
 8002c70:	2000057c 	.word	0x2000057c

08002c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  return uwTick;
 8002c78:	4b03      	ldr	r3, [pc, #12]	@ (8002c88 <HAL_GetTick+0x14>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	2000057c 	.word	0x2000057c

08002c8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c94:	f7ff ffee 	bl	8002c74 <HAL_GetTick>
 8002c98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca4:	d005      	beq.n	8002cb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8002cd0 <HAL_Delay+0x44>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	461a      	mov	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4413      	add	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cb2:	bf00      	nop
 8002cb4:	f7ff ffde 	bl	8002c74 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d8f7      	bhi.n	8002cb4 <HAL_Delay+0x28>
  {
  }
}
 8002cc4:	bf00      	nop
 8002cc6:	bf00      	nop
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	20000008 	.word	0x20000008

08002cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8002d18 <__NVIC_SetPriorityGrouping+0x44>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d06:	4a04      	ldr	r2, [pc, #16]	@ (8002d18 <__NVIC_SetPriorityGrouping+0x44>)
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	60d3      	str	r3, [r2, #12]
}
 8002d0c:	bf00      	nop
 8002d0e:	3714      	adds	r7, #20
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	e000ed00 	.word	0xe000ed00

08002d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d20:	4b04      	ldr	r3, [pc, #16]	@ (8002d34 <__NVIC_GetPriorityGrouping+0x18>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	0a1b      	lsrs	r3, r3, #8
 8002d26:	f003 0307 	and.w	r3, r3, #7
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr
 8002d34:	e000ed00 	.word	0xe000ed00

08002d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	db0b      	blt.n	8002d62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d4a:	79fb      	ldrb	r3, [r7, #7]
 8002d4c:	f003 021f 	and.w	r2, r3, #31
 8002d50:	4907      	ldr	r1, [pc, #28]	@ (8002d70 <__NVIC_EnableIRQ+0x38>)
 8002d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d56:	095b      	lsrs	r3, r3, #5
 8002d58:	2001      	movs	r0, #1
 8002d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d62:	bf00      	nop
 8002d64:	370c      	adds	r7, #12
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	e000e100 	.word	0xe000e100

08002d74 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	db12      	blt.n	8002dac <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d86:	79fb      	ldrb	r3, [r7, #7]
 8002d88:	f003 021f 	and.w	r2, r3, #31
 8002d8c:	490a      	ldr	r1, [pc, #40]	@ (8002db8 <__NVIC_DisableIRQ+0x44>)
 8002d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d92:	095b      	lsrs	r3, r3, #5
 8002d94:	2001      	movs	r0, #1
 8002d96:	fa00 f202 	lsl.w	r2, r0, r2
 8002d9a:	3320      	adds	r3, #32
 8002d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002da0:	f3bf 8f4f 	dsb	sy
}
 8002da4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002da6:	f3bf 8f6f 	isb	sy
}
 8002daa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	e000e100 	.word	0xe000e100

08002dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	6039      	str	r1, [r7, #0]
 8002dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	db0a      	blt.n	8002de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	b2da      	uxtb	r2, r3
 8002dd4:	490c      	ldr	r1, [pc, #48]	@ (8002e08 <__NVIC_SetPriority+0x4c>)
 8002dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dda:	0112      	lsls	r2, r2, #4
 8002ddc:	b2d2      	uxtb	r2, r2
 8002dde:	440b      	add	r3, r1
 8002de0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002de4:	e00a      	b.n	8002dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	4908      	ldr	r1, [pc, #32]	@ (8002e0c <__NVIC_SetPriority+0x50>)
 8002dec:	79fb      	ldrb	r3, [r7, #7]
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	3b04      	subs	r3, #4
 8002df4:	0112      	lsls	r2, r2, #4
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	440b      	add	r3, r1
 8002dfa:	761a      	strb	r2, [r3, #24]
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	e000e100 	.word	0xe000e100
 8002e0c:	e000ed00 	.word	0xe000ed00

08002e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b089      	sub	sp, #36	@ 0x24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	f1c3 0307 	rsb	r3, r3, #7
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	bf28      	it	cs
 8002e2e:	2304      	movcs	r3, #4
 8002e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	3304      	adds	r3, #4
 8002e36:	2b06      	cmp	r3, #6
 8002e38:	d902      	bls.n	8002e40 <NVIC_EncodePriority+0x30>
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	3b03      	subs	r3, #3
 8002e3e:	e000      	b.n	8002e42 <NVIC_EncodePriority+0x32>
 8002e40:	2300      	movs	r3, #0
 8002e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e44:	f04f 32ff 	mov.w	r2, #4294967295
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	43da      	mvns	r2, r3
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	401a      	ands	r2, r3
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e58:	f04f 31ff 	mov.w	r1, #4294967295
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e62:	43d9      	mvns	r1, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e68:	4313      	orrs	r3, r2
         );
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3724      	adds	r7, #36	@ 0x24
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
	...

08002e78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b082      	sub	sp, #8
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3b01      	subs	r3, #1
 8002e84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e88:	d301      	bcc.n	8002e8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e00f      	b.n	8002eae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002eb8 <SysTick_Config+0x40>)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e96:	210f      	movs	r1, #15
 8002e98:	f04f 30ff 	mov.w	r0, #4294967295
 8002e9c:	f7ff ff8e 	bl	8002dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ea0:	4b05      	ldr	r3, [pc, #20]	@ (8002eb8 <SysTick_Config+0x40>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ea6:	4b04      	ldr	r3, [pc, #16]	@ (8002eb8 <SysTick_Config+0x40>)
 8002ea8:	2207      	movs	r2, #7
 8002eaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	e000e010 	.word	0xe000e010

08002ebc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7ff ff05 	bl	8002cd4 <__NVIC_SetPriorityGrouping>
}
 8002eca:	bf00      	nop
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b086      	sub	sp, #24
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	4603      	mov	r3, r0
 8002eda:	60b9      	str	r1, [r7, #8]
 8002edc:	607a      	str	r2, [r7, #4]
 8002ede:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ee4:	f7ff ff1a 	bl	8002d1c <__NVIC_GetPriorityGrouping>
 8002ee8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	68b9      	ldr	r1, [r7, #8]
 8002eee:	6978      	ldr	r0, [r7, #20]
 8002ef0:	f7ff ff8e 	bl	8002e10 <NVIC_EncodePriority>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002efa:	4611      	mov	r1, r2
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff ff5d 	bl	8002dbc <__NVIC_SetPriority>
}
 8002f02:	bf00      	nop
 8002f04:	3718      	adds	r7, #24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b082      	sub	sp, #8
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	4603      	mov	r3, r0
 8002f12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff ff0d 	bl	8002d38 <__NVIC_EnableIRQ>
}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b082      	sub	sp, #8
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff ff1d 	bl	8002d74 <__NVIC_DisableIRQ>
}
 8002f3a:	bf00      	nop
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b082      	sub	sp, #8
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f7ff ff94 	bl	8002e78 <SysTick_Config>
 8002f50:	4603      	mov	r3, r0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b085      	sub	sp, #20
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f62:	2300      	movs	r3, #0
 8002f64:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d008      	beq.n	8002f84 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2204      	movs	r2, #4
 8002f76:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e022      	b.n	8002fca <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 020e 	bic.w	r2, r2, #14
 8002f92:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0201 	bic.w	r2, r2, #1
 8002fa2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa8:	f003 021c 	and.w	r2, r3, #28
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fd6:	b580      	push	{r7, lr}
 8002fd8:	b084      	sub	sp, #16
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d005      	beq.n	8002ffa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2204      	movs	r2, #4
 8002ff2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	73fb      	strb	r3, [r7, #15]
 8002ff8:	e029      	b.n	800304e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 020e 	bic.w	r2, r2, #14
 8003008:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0201 	bic.w	r2, r2, #1
 8003018:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800301e:	f003 021c 	and.w	r2, r3, #28
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003026:	2101      	movs	r1, #1
 8003028:	fa01 f202 	lsl.w	r2, r1, r2
 800302c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	4798      	blx	r3
    }
  }
  return status;
 800304e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003050:	4618      	mov	r0, r3
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8003064:	4618      	mov	r0, r3
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003070:	b480      	push	{r7}
 8003072:	b087      	sub	sp, #28
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800307a:	2300      	movs	r3, #0
 800307c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800307e:	e17f      	b.n	8003380 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	2101      	movs	r1, #1
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	fa01 f303 	lsl.w	r3, r1, r3
 800308c:	4013      	ands	r3, r2
 800308e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2b00      	cmp	r3, #0
 8003094:	f000 8171 	beq.w	800337a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f003 0303 	and.w	r3, r3, #3
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d005      	beq.n	80030b0 <HAL_GPIO_Init+0x40>
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f003 0303 	and.w	r3, r3, #3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d130      	bne.n	8003112 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	2203      	movs	r2, #3
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	43db      	mvns	r3, r3
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	4013      	ands	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	68da      	ldr	r2, [r3, #12]
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030e6:	2201      	movs	r2, #1
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	43db      	mvns	r3, r3
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	4013      	ands	r3, r2
 80030f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	091b      	lsrs	r3, r3, #4
 80030fc:	f003 0201 	and.w	r2, r3, #1
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	4313      	orrs	r3, r2
 800310a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	693a      	ldr	r2, [r7, #16]
 8003110:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f003 0303 	and.w	r3, r3, #3
 800311a:	2b03      	cmp	r3, #3
 800311c:	d118      	bne.n	8003150 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003122:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003124:	2201      	movs	r2, #1
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	43db      	mvns	r3, r3
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	4013      	ands	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	08db      	lsrs	r3, r3, #3
 800313a:	f003 0201 	and.w	r2, r3, #1
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	4313      	orrs	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f003 0303 	and.w	r3, r3, #3
 8003158:	2b03      	cmp	r3, #3
 800315a:	d017      	beq.n	800318c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	2203      	movs	r2, #3
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	43db      	mvns	r3, r3
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	4013      	ands	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	4313      	orrs	r3, r2
 8003184:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f003 0303 	and.w	r3, r3, #3
 8003194:	2b02      	cmp	r3, #2
 8003196:	d123      	bne.n	80031e0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	08da      	lsrs	r2, r3, #3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3208      	adds	r2, #8
 80031a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	220f      	movs	r2, #15
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	43db      	mvns	r3, r3
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	4013      	ands	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	691a      	ldr	r2, [r3, #16]
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	08da      	lsrs	r2, r3, #3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	3208      	adds	r2, #8
 80031da:	6939      	ldr	r1, [r7, #16]
 80031dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	2203      	movs	r2, #3
 80031ec:	fa02 f303 	lsl.w	r3, r2, r3
 80031f0:	43db      	mvns	r3, r3
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	4013      	ands	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f003 0203 	and.w	r2, r3, #3
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	4313      	orrs	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 80ac 	beq.w	800337a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003222:	4b5f      	ldr	r3, [pc, #380]	@ (80033a0 <HAL_GPIO_Init+0x330>)
 8003224:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003226:	4a5e      	ldr	r2, [pc, #376]	@ (80033a0 <HAL_GPIO_Init+0x330>)
 8003228:	f043 0301 	orr.w	r3, r3, #1
 800322c:	6613      	str	r3, [r2, #96]	@ 0x60
 800322e:	4b5c      	ldr	r3, [pc, #368]	@ (80033a0 <HAL_GPIO_Init+0x330>)
 8003230:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003232:	f003 0301 	and.w	r3, r3, #1
 8003236:	60bb      	str	r3, [r7, #8]
 8003238:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800323a:	4a5a      	ldr	r2, [pc, #360]	@ (80033a4 <HAL_GPIO_Init+0x334>)
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	089b      	lsrs	r3, r3, #2
 8003240:	3302      	adds	r3, #2
 8003242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003246:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	f003 0303 	and.w	r3, r3, #3
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	220f      	movs	r2, #15
 8003252:	fa02 f303 	lsl.w	r3, r2, r3
 8003256:	43db      	mvns	r3, r3
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	4013      	ands	r3, r2
 800325c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003264:	d025      	beq.n	80032b2 <HAL_GPIO_Init+0x242>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a4f      	ldr	r2, [pc, #316]	@ (80033a8 <HAL_GPIO_Init+0x338>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d01f      	beq.n	80032ae <HAL_GPIO_Init+0x23e>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a4e      	ldr	r2, [pc, #312]	@ (80033ac <HAL_GPIO_Init+0x33c>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d019      	beq.n	80032aa <HAL_GPIO_Init+0x23a>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a4d      	ldr	r2, [pc, #308]	@ (80033b0 <HAL_GPIO_Init+0x340>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d013      	beq.n	80032a6 <HAL_GPIO_Init+0x236>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a4c      	ldr	r2, [pc, #304]	@ (80033b4 <HAL_GPIO_Init+0x344>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d00d      	beq.n	80032a2 <HAL_GPIO_Init+0x232>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a4b      	ldr	r2, [pc, #300]	@ (80033b8 <HAL_GPIO_Init+0x348>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d007      	beq.n	800329e <HAL_GPIO_Init+0x22e>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a4a      	ldr	r2, [pc, #296]	@ (80033bc <HAL_GPIO_Init+0x34c>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d101      	bne.n	800329a <HAL_GPIO_Init+0x22a>
 8003296:	2306      	movs	r3, #6
 8003298:	e00c      	b.n	80032b4 <HAL_GPIO_Init+0x244>
 800329a:	2307      	movs	r3, #7
 800329c:	e00a      	b.n	80032b4 <HAL_GPIO_Init+0x244>
 800329e:	2305      	movs	r3, #5
 80032a0:	e008      	b.n	80032b4 <HAL_GPIO_Init+0x244>
 80032a2:	2304      	movs	r3, #4
 80032a4:	e006      	b.n	80032b4 <HAL_GPIO_Init+0x244>
 80032a6:	2303      	movs	r3, #3
 80032a8:	e004      	b.n	80032b4 <HAL_GPIO_Init+0x244>
 80032aa:	2302      	movs	r3, #2
 80032ac:	e002      	b.n	80032b4 <HAL_GPIO_Init+0x244>
 80032ae:	2301      	movs	r3, #1
 80032b0:	e000      	b.n	80032b4 <HAL_GPIO_Init+0x244>
 80032b2:	2300      	movs	r3, #0
 80032b4:	697a      	ldr	r2, [r7, #20]
 80032b6:	f002 0203 	and.w	r2, r2, #3
 80032ba:	0092      	lsls	r2, r2, #2
 80032bc:	4093      	lsls	r3, r2
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032c4:	4937      	ldr	r1, [pc, #220]	@ (80033a4 <HAL_GPIO_Init+0x334>)
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	089b      	lsrs	r3, r3, #2
 80032ca:	3302      	adds	r3, #2
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032d2:	4b3b      	ldr	r3, [pc, #236]	@ (80033c0 <HAL_GPIO_Init+0x350>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	43db      	mvns	r3, r3
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	4013      	ands	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80032f6:	4a32      	ldr	r2, [pc, #200]	@ (80033c0 <HAL_GPIO_Init+0x350>)
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80032fc:	4b30      	ldr	r3, [pc, #192]	@ (80033c0 <HAL_GPIO_Init+0x350>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	43db      	mvns	r3, r3
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	4013      	ands	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d003      	beq.n	8003320 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	4313      	orrs	r3, r2
 800331e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003320:	4a27      	ldr	r2, [pc, #156]	@ (80033c0 <HAL_GPIO_Init+0x350>)
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003326:	4b26      	ldr	r3, [pc, #152]	@ (80033c0 <HAL_GPIO_Init+0x350>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	43db      	mvns	r3, r3
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	4013      	ands	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	4313      	orrs	r3, r2
 8003348:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800334a:	4a1d      	ldr	r2, [pc, #116]	@ (80033c0 <HAL_GPIO_Init+0x350>)
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003350:	4b1b      	ldr	r3, [pc, #108]	@ (80033c0 <HAL_GPIO_Init+0x350>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	43db      	mvns	r3, r3
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	4013      	ands	r3, r2
 800335e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	4313      	orrs	r3, r2
 8003372:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003374:	4a12      	ldr	r2, [pc, #72]	@ (80033c0 <HAL_GPIO_Init+0x350>)
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	3301      	adds	r3, #1
 800337e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	fa22 f303 	lsr.w	r3, r2, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	f47f ae78 	bne.w	8003080 <HAL_GPIO_Init+0x10>
  }
}
 8003390:	bf00      	nop
 8003392:	bf00      	nop
 8003394:	371c      	adds	r7, #28
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	40021000 	.word	0x40021000
 80033a4:	40010000 	.word	0x40010000
 80033a8:	48000400 	.word	0x48000400
 80033ac:	48000800 	.word	0x48000800
 80033b0:	48000c00 	.word	0x48000c00
 80033b4:	48001000 	.word	0x48001000
 80033b8:	48001400 	.word	0x48001400
 80033bc:	48001800 	.word	0x48001800
 80033c0:	40010400 	.word	0x40010400

080033c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	460b      	mov	r3, r1
 80033ce:	807b      	strh	r3, [r7, #2]
 80033d0:	4613      	mov	r3, r2
 80033d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033d4:	787b      	ldrb	r3, [r7, #1]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033da:	887a      	ldrh	r2, [r7, #2]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033e0:	e002      	b.n	80033e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033e2:	887a      	ldrh	r2, [r7, #2]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d101      	bne.n	8003406 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e08d      	b.n	8003522 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d106      	bne.n	8003420 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7fe fed0 	bl	80021c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2224      	movs	r2, #36	@ 0x24
 8003424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0201 	bic.w	r2, r2, #1
 8003436:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003444:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003454:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d107      	bne.n	800346e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800346a:	609a      	str	r2, [r3, #8]
 800346c:	e006      	b.n	800347c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800347a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	2b02      	cmp	r3, #2
 8003482:	d108      	bne.n	8003496 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003492:	605a      	str	r2, [r3, #4]
 8003494:	e007      	b.n	80034a6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6812      	ldr	r2, [r2, #0]
 80034b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80034b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	691a      	ldr	r2, [r3, #16]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	69d9      	ldr	r1, [r3, #28]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a1a      	ldr	r2, [r3, #32]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0201 	orr.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2220      	movs	r2, #32
 800350e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
	...

0800352c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b088      	sub	sp, #32
 8003530:	af02      	add	r7, sp, #8
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	4608      	mov	r0, r1
 8003536:	4611      	mov	r1, r2
 8003538:	461a      	mov	r2, r3
 800353a:	4603      	mov	r3, r0
 800353c:	817b      	strh	r3, [r7, #10]
 800353e:	460b      	mov	r3, r1
 8003540:	813b      	strh	r3, [r7, #8]
 8003542:	4613      	mov	r3, r2
 8003544:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b20      	cmp	r3, #32
 8003550:	f040 80f9 	bne.w	8003746 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d002      	beq.n	8003560 <HAL_I2C_Mem_Write+0x34>
 800355a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800355c:	2b00      	cmp	r3, #0
 800355e:	d105      	bne.n	800356c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003566:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e0ed      	b.n	8003748 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <HAL_I2C_Mem_Write+0x4e>
 8003576:	2302      	movs	r3, #2
 8003578:	e0e6      	b.n	8003748 <HAL_I2C_Mem_Write+0x21c>
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003582:	f7ff fb77 	bl	8002c74 <HAL_GetTick>
 8003586:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	2319      	movs	r3, #25
 800358e:	2201      	movs	r2, #1
 8003590:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	f000 fac3 	bl	8003b20 <I2C_WaitOnFlagUntilTimeout>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e0d1      	b.n	8003748 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2221      	movs	r2, #33	@ 0x21
 80035a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2240      	movs	r2, #64	@ 0x40
 80035b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6a3a      	ldr	r2, [r7, #32]
 80035be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80035c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035cc:	88f8      	ldrh	r0, [r7, #6]
 80035ce:	893a      	ldrh	r2, [r7, #8]
 80035d0:	8979      	ldrh	r1, [r7, #10]
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	9301      	str	r3, [sp, #4]
 80035d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	4603      	mov	r3, r0
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f000 f9d3 	bl	8003988 <I2C_RequestMemoryWrite>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d005      	beq.n	80035f4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e0a9      	b.n	8003748 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	2bff      	cmp	r3, #255	@ 0xff
 80035fc:	d90e      	bls.n	800361c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	22ff      	movs	r2, #255	@ 0xff
 8003602:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003608:	b2da      	uxtb	r2, r3
 800360a:	8979      	ldrh	r1, [r7, #10]
 800360c:	2300      	movs	r3, #0
 800360e:	9300      	str	r3, [sp, #0]
 8003610:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 fc47 	bl	8003ea8 <I2C_TransferConfig>
 800361a:	e00f      	b.n	800363c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003620:	b29a      	uxth	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800362a:	b2da      	uxtb	r2, r3
 800362c:	8979      	ldrh	r1, [r7, #10]
 800362e:	2300      	movs	r3, #0
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 fc36 	bl	8003ea8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 fac6 	bl	8003bd2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e07b      	b.n	8003748 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003654:	781a      	ldrb	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003660:	1c5a      	adds	r2, r3, #1
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800366a:	b29b      	uxth	r3, r3
 800366c:	3b01      	subs	r3, #1
 800366e:	b29a      	uxth	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003678:	3b01      	subs	r3, #1
 800367a:	b29a      	uxth	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003684:	b29b      	uxth	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d034      	beq.n	80036f4 <HAL_I2C_Mem_Write+0x1c8>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800368e:	2b00      	cmp	r3, #0
 8003690:	d130      	bne.n	80036f4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003698:	2200      	movs	r2, #0
 800369a:	2180      	movs	r1, #128	@ 0x80
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 fa3f 	bl	8003b20 <I2C_WaitOnFlagUntilTimeout>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e04d      	b.n	8003748 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	2bff      	cmp	r3, #255	@ 0xff
 80036b4:	d90e      	bls.n	80036d4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	22ff      	movs	r2, #255	@ 0xff
 80036ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036c0:	b2da      	uxtb	r2, r3
 80036c2:	8979      	ldrh	r1, [r7, #10]
 80036c4:	2300      	movs	r3, #0
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 fbeb 	bl	8003ea8 <I2C_TransferConfig>
 80036d2:	e00f      	b.n	80036f4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d8:	b29a      	uxth	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e2:	b2da      	uxtb	r2, r3
 80036e4:	8979      	ldrh	r1, [r7, #10]
 80036e6:	2300      	movs	r3, #0
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 fbda 	bl	8003ea8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d19e      	bne.n	800363c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 faac 	bl	8003c60 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e01a      	b.n	8003748 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2220      	movs	r2, #32
 8003718:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6859      	ldr	r1, [r3, #4]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	4b0a      	ldr	r3, [pc, #40]	@ (8003750 <HAL_I2C_Mem_Write+0x224>)
 8003726:	400b      	ands	r3, r1
 8003728:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2220      	movs	r2, #32
 800372e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003742:	2300      	movs	r3, #0
 8003744:	e000      	b.n	8003748 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003746:	2302      	movs	r3, #2
  }
}
 8003748:	4618      	mov	r0, r3
 800374a:	3718      	adds	r7, #24
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	fe00e800 	.word	0xfe00e800

08003754 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b088      	sub	sp, #32
 8003758:	af02      	add	r7, sp, #8
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	4608      	mov	r0, r1
 800375e:	4611      	mov	r1, r2
 8003760:	461a      	mov	r2, r3
 8003762:	4603      	mov	r3, r0
 8003764:	817b      	strh	r3, [r7, #10]
 8003766:	460b      	mov	r3, r1
 8003768:	813b      	strh	r3, [r7, #8]
 800376a:	4613      	mov	r3, r2
 800376c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b20      	cmp	r3, #32
 8003778:	f040 80fd 	bne.w	8003976 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <HAL_I2C_Mem_Read+0x34>
 8003782:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003784:	2b00      	cmp	r3, #0
 8003786:	d105      	bne.n	8003794 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800378e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e0f1      	b.n	8003978 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800379a:	2b01      	cmp	r3, #1
 800379c:	d101      	bne.n	80037a2 <HAL_I2C_Mem_Read+0x4e>
 800379e:	2302      	movs	r3, #2
 80037a0:	e0ea      	b.n	8003978 <HAL_I2C_Mem_Read+0x224>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037aa:	f7ff fa63 	bl	8002c74 <HAL_GetTick>
 80037ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	2319      	movs	r3, #25
 80037b6:	2201      	movs	r2, #1
 80037b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 f9af 	bl	8003b20 <I2C_WaitOnFlagUntilTimeout>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e0d5      	b.n	8003978 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2222      	movs	r2, #34	@ 0x22
 80037d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2240      	movs	r2, #64	@ 0x40
 80037d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6a3a      	ldr	r2, [r7, #32]
 80037e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80037ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037f4:	88f8      	ldrh	r0, [r7, #6]
 80037f6:	893a      	ldrh	r2, [r7, #8]
 80037f8:	8979      	ldrh	r1, [r7, #10]
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	9301      	str	r3, [sp, #4]
 80037fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	4603      	mov	r3, r0
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 f913 	bl	8003a30 <I2C_RequestMemoryRead>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d005      	beq.n	800381c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e0ad      	b.n	8003978 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003820:	b29b      	uxth	r3, r3
 8003822:	2bff      	cmp	r3, #255	@ 0xff
 8003824:	d90e      	bls.n	8003844 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2201      	movs	r2, #1
 800382a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003830:	b2da      	uxtb	r2, r3
 8003832:	8979      	ldrh	r1, [r7, #10]
 8003834:	4b52      	ldr	r3, [pc, #328]	@ (8003980 <HAL_I2C_Mem_Read+0x22c>)
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 fb33 	bl	8003ea8 <I2C_TransferConfig>
 8003842:	e00f      	b.n	8003864 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003848:	b29a      	uxth	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003852:	b2da      	uxtb	r2, r3
 8003854:	8979      	ldrh	r1, [r7, #10]
 8003856:	4b4a      	ldr	r3, [pc, #296]	@ (8003980 <HAL_I2C_Mem_Read+0x22c>)
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800385e:	68f8      	ldr	r0, [r7, #12]
 8003860:	f000 fb22 	bl	8003ea8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	9300      	str	r3, [sp, #0]
 8003868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800386a:	2200      	movs	r2, #0
 800386c:	2104      	movs	r1, #4
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 f956 	bl	8003b20 <I2C_WaitOnFlagUntilTimeout>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e07c      	b.n	8003978 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003890:	1c5a      	adds	r2, r3, #1
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800389a:	3b01      	subs	r3, #1
 800389c:	b29a      	uxth	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d034      	beq.n	8003924 <HAL_I2C_Mem_Read+0x1d0>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d130      	bne.n	8003924 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c8:	2200      	movs	r2, #0
 80038ca:	2180      	movs	r1, #128	@ 0x80
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 f927 	bl	8003b20 <I2C_WaitOnFlagUntilTimeout>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e04d      	b.n	8003978 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	2bff      	cmp	r3, #255	@ 0xff
 80038e4:	d90e      	bls.n	8003904 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2201      	movs	r2, #1
 80038ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	8979      	ldrh	r1, [r7, #10]
 80038f4:	2300      	movs	r3, #0
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 fad3 	bl	8003ea8 <I2C_TransferConfig>
 8003902:	e00f      	b.n	8003924 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003908:	b29a      	uxth	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003912:	b2da      	uxtb	r2, r3
 8003914:	8979      	ldrh	r1, [r7, #10]
 8003916:	2300      	movs	r3, #0
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 fac2 	bl	8003ea8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003928:	b29b      	uxth	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d19a      	bne.n	8003864 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 f994 	bl	8003c60 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e01a      	b.n	8003978 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2220      	movs	r2, #32
 8003948:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6859      	ldr	r1, [r3, #4]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	4b0b      	ldr	r3, [pc, #44]	@ (8003984 <HAL_I2C_Mem_Read+0x230>)
 8003956:	400b      	ands	r3, r1
 8003958:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2220      	movs	r2, #32
 800395e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003972:	2300      	movs	r3, #0
 8003974:	e000      	b.n	8003978 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003976:	2302      	movs	r3, #2
  }
}
 8003978:	4618      	mov	r0, r3
 800397a:	3718      	adds	r7, #24
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	80002400 	.word	0x80002400
 8003984:	fe00e800 	.word	0xfe00e800

08003988 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af02      	add	r7, sp, #8
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	4608      	mov	r0, r1
 8003992:	4611      	mov	r1, r2
 8003994:	461a      	mov	r2, r3
 8003996:	4603      	mov	r3, r0
 8003998:	817b      	strh	r3, [r7, #10]
 800399a:	460b      	mov	r3, r1
 800399c:	813b      	strh	r3, [r7, #8]
 800399e:	4613      	mov	r3, r2
 80039a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80039a2:	88fb      	ldrh	r3, [r7, #6]
 80039a4:	b2da      	uxtb	r2, r3
 80039a6:	8979      	ldrh	r1, [r7, #10]
 80039a8:	4b20      	ldr	r3, [pc, #128]	@ (8003a2c <I2C_RequestMemoryWrite+0xa4>)
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80039b0:	68f8      	ldr	r0, [r7, #12]
 80039b2:	f000 fa79 	bl	8003ea8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039b6:	69fa      	ldr	r2, [r7, #28]
 80039b8:	69b9      	ldr	r1, [r7, #24]
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 f909 	bl	8003bd2 <I2C_WaitOnTXISFlagUntilTimeout>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e02c      	b.n	8003a24 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039ca:	88fb      	ldrh	r3, [r7, #6]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d105      	bne.n	80039dc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039d0:	893b      	ldrh	r3, [r7, #8]
 80039d2:	b2da      	uxtb	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80039da:	e015      	b.n	8003a08 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80039dc:	893b      	ldrh	r3, [r7, #8]
 80039de:	0a1b      	lsrs	r3, r3, #8
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ea:	69fa      	ldr	r2, [r7, #28]
 80039ec:	69b9      	ldr	r1, [r7, #24]
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f000 f8ef 	bl	8003bd2 <I2C_WaitOnTXISFlagUntilTimeout>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e012      	b.n	8003a24 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039fe:	893b      	ldrh	r3, [r7, #8]
 8003a00:	b2da      	uxtb	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	2180      	movs	r1, #128	@ 0x80
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f000 f884 	bl	8003b20 <I2C_WaitOnFlagUntilTimeout>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e000      	b.n	8003a24 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	80002000 	.word	0x80002000

08003a30 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af02      	add	r7, sp, #8
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	4608      	mov	r0, r1
 8003a3a:	4611      	mov	r1, r2
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	4603      	mov	r3, r0
 8003a40:	817b      	strh	r3, [r7, #10]
 8003a42:	460b      	mov	r3, r1
 8003a44:	813b      	strh	r3, [r7, #8]
 8003a46:	4613      	mov	r3, r2
 8003a48:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003a4a:	88fb      	ldrh	r3, [r7, #6]
 8003a4c:	b2da      	uxtb	r2, r3
 8003a4e:	8979      	ldrh	r1, [r7, #10]
 8003a50:	4b20      	ldr	r3, [pc, #128]	@ (8003ad4 <I2C_RequestMemoryRead+0xa4>)
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	2300      	movs	r3, #0
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f000 fa26 	bl	8003ea8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a5c:	69fa      	ldr	r2, [r7, #28]
 8003a5e:	69b9      	ldr	r1, [r7, #24]
 8003a60:	68f8      	ldr	r0, [r7, #12]
 8003a62:	f000 f8b6 	bl	8003bd2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e02c      	b.n	8003aca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a70:	88fb      	ldrh	r3, [r7, #6]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d105      	bne.n	8003a82 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a76:	893b      	ldrh	r3, [r7, #8]
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a80:	e015      	b.n	8003aae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a82:	893b      	ldrh	r3, [r7, #8]
 8003a84:	0a1b      	lsrs	r3, r3, #8
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	b2da      	uxtb	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a90:	69fa      	ldr	r2, [r7, #28]
 8003a92:	69b9      	ldr	r1, [r7, #24]
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f000 f89c 	bl	8003bd2 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e012      	b.n	8003aca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003aa4:	893b      	ldrh	r3, [r7, #8]
 8003aa6:	b2da      	uxtb	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	2140      	movs	r1, #64	@ 0x40
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f000 f831 	bl	8003b20 <I2C_WaitOnFlagUntilTimeout>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e000      	b.n	8003aca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	80002000 	.word	0x80002000

08003ad8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	f003 0302 	and.w	r3, r3, #2
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d103      	bne.n	8003af6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2200      	movs	r2, #0
 8003af4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d007      	beq.n	8003b14 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	699a      	ldr	r2, [r3, #24]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f042 0201 	orr.w	r2, r2, #1
 8003b12:	619a      	str	r2, [r3, #24]
  }
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	603b      	str	r3, [r7, #0]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b30:	e03b      	b.n	8003baa <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	6839      	ldr	r1, [r7, #0]
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f000 f8d6 	bl	8003ce8 <I2C_IsErrorOccurred>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e041      	b.n	8003bca <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4c:	d02d      	beq.n	8003baa <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b4e:	f7ff f891 	bl	8002c74 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d302      	bcc.n	8003b64 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d122      	bne.n	8003baa <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699a      	ldr	r2, [r3, #24]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	bf0c      	ite	eq
 8003b74:	2301      	moveq	r3, #1
 8003b76:	2300      	movne	r3, #0
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	79fb      	ldrb	r3, [r7, #7]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d113      	bne.n	8003baa <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b86:	f043 0220 	orr.w	r2, r3, #32
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2220      	movs	r2, #32
 8003b92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e00f      	b.n	8003bca <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	699a      	ldr	r2, [r3, #24]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	bf0c      	ite	eq
 8003bba:	2301      	moveq	r3, #1
 8003bbc:	2300      	movne	r3, #0
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	79fb      	ldrb	r3, [r7, #7]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d0b4      	beq.n	8003b32 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b084      	sub	sp, #16
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	60f8      	str	r0, [r7, #12]
 8003bda:	60b9      	str	r1, [r7, #8]
 8003bdc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003bde:	e033      	b.n	8003c48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	68b9      	ldr	r1, [r7, #8]
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f000 f87f 	bl	8003ce8 <I2C_IsErrorOccurred>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e031      	b.n	8003c58 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bfa:	d025      	beq.n	8003c48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bfc:	f7ff f83a 	bl	8002c74 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	68ba      	ldr	r2, [r7, #8]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d302      	bcc.n	8003c12 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d11a      	bne.n	8003c48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d013      	beq.n	8003c48 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c24:	f043 0220 	orr.w	r2, r3, #32
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e007      	b.n	8003c58 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d1c4      	bne.n	8003be0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c6c:	e02f      	b.n	8003cce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	68b9      	ldr	r1, [r7, #8]
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f000 f838 	bl	8003ce8 <I2C_IsErrorOccurred>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e02d      	b.n	8003cde <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c82:	f7fe fff7 	bl	8002c74 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d302      	bcc.n	8003c98 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d11a      	bne.n	8003cce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	f003 0320 	and.w	r3, r3, #32
 8003ca2:	2b20      	cmp	r3, #32
 8003ca4:	d013      	beq.n	8003cce <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003caa:	f043 0220 	orr.w	r2, r3, #32
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e007      	b.n	8003cde <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	f003 0320 	and.w	r3, r3, #32
 8003cd8:	2b20      	cmp	r3, #32
 8003cda:	d1c8      	bne.n	8003c6e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
	...

08003ce8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08a      	sub	sp, #40	@ 0x28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003d02:	2300      	movs	r3, #0
 8003d04:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	f003 0310 	and.w	r3, r3, #16
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d068      	beq.n	8003de6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2210      	movs	r2, #16
 8003d1a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d1c:	e049      	b.n	8003db2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d24:	d045      	beq.n	8003db2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d26:	f7fe ffa5 	bl	8002c74 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	69fb      	ldr	r3, [r7, #28]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	68ba      	ldr	r2, [r7, #8]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d302      	bcc.n	8003d3c <I2C_IsErrorOccurred+0x54>
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d13a      	bne.n	8003db2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d46:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d4e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d5a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d5e:	d121      	bne.n	8003da4 <I2C_IsErrorOccurred+0xbc>
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d66:	d01d      	beq.n	8003da4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003d68:	7cfb      	ldrb	r3, [r7, #19]
 8003d6a:	2b20      	cmp	r3, #32
 8003d6c:	d01a      	beq.n	8003da4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d7c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003d7e:	f7fe ff79 	bl	8002c74 <HAL_GetTick>
 8003d82:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d84:	e00e      	b.n	8003da4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003d86:	f7fe ff75 	bl	8002c74 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b19      	cmp	r3, #25
 8003d92:	d907      	bls.n	8003da4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003d94:	6a3b      	ldr	r3, [r7, #32]
 8003d96:	f043 0320 	orr.w	r3, r3, #32
 8003d9a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003da2:	e006      	b.n	8003db2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	f003 0320 	and.w	r3, r3, #32
 8003dae:	2b20      	cmp	r3, #32
 8003db0:	d1e9      	bne.n	8003d86 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	f003 0320 	and.w	r3, r3, #32
 8003dbc:	2b20      	cmp	r3, #32
 8003dbe:	d003      	beq.n	8003dc8 <I2C_IsErrorOccurred+0xe0>
 8003dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0aa      	beq.n	8003d1e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003dc8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d103      	bne.n	8003dd8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003dd8:	6a3b      	ldr	r3, [r7, #32]
 8003dda:	f043 0304 	orr.w	r3, r3, #4
 8003dde:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00b      	beq.n	8003e10 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003df8:	6a3b      	ldr	r3, [r7, #32]
 8003dfa:	f043 0301 	orr.w	r3, r3, #1
 8003dfe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e08:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00b      	beq.n	8003e32 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	f043 0308 	orr.w	r3, r3, #8
 8003e20:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e2a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00b      	beq.n	8003e54 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003e3c:	6a3b      	ldr	r3, [r7, #32]
 8003e3e:	f043 0302 	orr.w	r3, r3, #2
 8003e42:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e4c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003e54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d01c      	beq.n	8003e96 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f7ff fe3b 	bl	8003ad8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6859      	ldr	r1, [r3, #4]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8003ea4 <I2C_IsErrorOccurred+0x1bc>)
 8003e6e:	400b      	ands	r3, r1
 8003e70:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e76:	6a3b      	ldr	r3, [r7, #32]
 8003e78:	431a      	orrs	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2220      	movs	r2, #32
 8003e82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003e96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3728      	adds	r7, #40	@ 0x28
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	fe00e800 	.word	0xfe00e800

08003ea8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b087      	sub	sp, #28
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	607b      	str	r3, [r7, #4]
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	817b      	strh	r3, [r7, #10]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003eba:	897b      	ldrh	r3, [r7, #10]
 8003ebc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ec0:	7a7b      	ldrb	r3, [r7, #9]
 8003ec2:	041b      	lsls	r3, r3, #16
 8003ec4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ec8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ece:	6a3b      	ldr	r3, [r7, #32]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003ed6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	0d5b      	lsrs	r3, r3, #21
 8003ee2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003ee6:	4b08      	ldr	r3, [pc, #32]	@ (8003f08 <I2C_TransferConfig+0x60>)
 8003ee8:	430b      	orrs	r3, r1
 8003eea:	43db      	mvns	r3, r3
 8003eec:	ea02 0103 	and.w	r1, r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003efa:	bf00      	nop
 8003efc:	371c      	adds	r7, #28
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	03ff63ff 	.word	0x03ff63ff

08003f0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b20      	cmp	r3, #32
 8003f20:	d138      	bne.n	8003f94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d101      	bne.n	8003f30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	e032      	b.n	8003f96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2224      	movs	r2, #36	@ 0x24
 8003f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 0201 	bic.w	r2, r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003f5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6819      	ldr	r1, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f042 0201 	orr.w	r2, r2, #1
 8003f7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2220      	movs	r2, #32
 8003f84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f90:	2300      	movs	r3, #0
 8003f92:	e000      	b.n	8003f96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f94:	2302      	movs	r3, #2
  }
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b085      	sub	sp, #20
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
 8003faa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b20      	cmp	r3, #32
 8003fb6:	d139      	bne.n	800402c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d101      	bne.n	8003fc6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	e033      	b.n	800402e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2224      	movs	r2, #36	@ 0x24
 8003fd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 0201 	bic.w	r2, r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003ff4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	021b      	lsls	r3, r3, #8
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0201 	orr.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2220      	movs	r2, #32
 800401c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004028:	2300      	movs	r3, #0
 800402a:	e000      	b.n	800402e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800402c:	2302      	movs	r3, #2
  }
}
 800402e:	4618      	mov	r0, r3
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
	...

0800403c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004040:	4b04      	ldr	r3, [pc, #16]	@ (8004054 <HAL_PWREx_GetVoltageRange+0x18>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8004048:	4618      	mov	r0, r3
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	40007000 	.word	0x40007000

08004058 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004066:	d130      	bne.n	80040ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004068:	4b23      	ldr	r3, [pc, #140]	@ (80040f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004070:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004074:	d038      	beq.n	80040e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004076:	4b20      	ldr	r3, [pc, #128]	@ (80040f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800407e:	4a1e      	ldr	r2, [pc, #120]	@ (80040f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004080:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004084:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004086:	4b1d      	ldr	r3, [pc, #116]	@ (80040fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2232      	movs	r2, #50	@ 0x32
 800408c:	fb02 f303 	mul.w	r3, r2, r3
 8004090:	4a1b      	ldr	r2, [pc, #108]	@ (8004100 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004092:	fba2 2303 	umull	r2, r3, r2, r3
 8004096:	0c9b      	lsrs	r3, r3, #18
 8004098:	3301      	adds	r3, #1
 800409a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800409c:	e002      	b.n	80040a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	3b01      	subs	r3, #1
 80040a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040a4:	4b14      	ldr	r3, [pc, #80]	@ (80040f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040b0:	d102      	bne.n	80040b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1f2      	bne.n	800409e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040b8:	4b0f      	ldr	r3, [pc, #60]	@ (80040f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040c4:	d110      	bne.n	80040e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e00f      	b.n	80040ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80040ca:	4b0b      	ldr	r3, [pc, #44]	@ (80040f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80040d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040d6:	d007      	beq.n	80040e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80040d8:	4b07      	ldr	r3, [pc, #28]	@ (80040f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80040e0:	4a05      	ldr	r2, [pc, #20]	@ (80040f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3714      	adds	r7, #20
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	40007000 	.word	0x40007000
 80040fc:	20000000 	.word	0x20000000
 8004100:	431bde83 	.word	0x431bde83

08004104 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b088      	sub	sp, #32
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e3ca      	b.n	80048ac <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004116:	4b97      	ldr	r3, [pc, #604]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f003 030c 	and.w	r3, r3, #12
 800411e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004120:	4b94      	ldr	r3, [pc, #592]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	f003 0303 	and.w	r3, r3, #3
 8004128:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0310 	and.w	r3, r3, #16
 8004132:	2b00      	cmp	r3, #0
 8004134:	f000 80e4 	beq.w	8004300 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d007      	beq.n	800414e <HAL_RCC_OscConfig+0x4a>
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	2b0c      	cmp	r3, #12
 8004142:	f040 808b 	bne.w	800425c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	2b01      	cmp	r3, #1
 800414a:	f040 8087 	bne.w	800425c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800414e:	4b89      	ldr	r3, [pc, #548]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d005      	beq.n	8004166 <HAL_RCC_OscConfig+0x62>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d101      	bne.n	8004166 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e3a2      	b.n	80048ac <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1a      	ldr	r2, [r3, #32]
 800416a:	4b82      	ldr	r3, [pc, #520]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0308 	and.w	r3, r3, #8
 8004172:	2b00      	cmp	r3, #0
 8004174:	d004      	beq.n	8004180 <HAL_RCC_OscConfig+0x7c>
 8004176:	4b7f      	ldr	r3, [pc, #508]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800417e:	e005      	b.n	800418c <HAL_RCC_OscConfig+0x88>
 8004180:	4b7c      	ldr	r3, [pc, #496]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 8004182:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004186:	091b      	lsrs	r3, r3, #4
 8004188:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800418c:	4293      	cmp	r3, r2
 800418e:	d223      	bcs.n	80041d8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	4618      	mov	r0, r3
 8004196:	f000 fd55 	bl	8004c44 <RCC_SetFlashLatencyFromMSIRange>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e383      	b.n	80048ac <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041a4:	4b73      	ldr	r3, [pc, #460]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a72      	ldr	r2, [pc, #456]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 80041aa:	f043 0308 	orr.w	r3, r3, #8
 80041ae:	6013      	str	r3, [r2, #0]
 80041b0:	4b70      	ldr	r3, [pc, #448]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	496d      	ldr	r1, [pc, #436]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041c2:	4b6c      	ldr	r3, [pc, #432]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	021b      	lsls	r3, r3, #8
 80041d0:	4968      	ldr	r1, [pc, #416]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	604b      	str	r3, [r1, #4]
 80041d6:	e025      	b.n	8004224 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041d8:	4b66      	ldr	r3, [pc, #408]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a65      	ldr	r2, [pc, #404]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 80041de:	f043 0308 	orr.w	r3, r3, #8
 80041e2:	6013      	str	r3, [r2, #0]
 80041e4:	4b63      	ldr	r3, [pc, #396]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	4960      	ldr	r1, [pc, #384]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041f6:	4b5f      	ldr	r3, [pc, #380]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	021b      	lsls	r3, r3, #8
 8004204:	495b      	ldr	r1, [pc, #364]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 8004206:	4313      	orrs	r3, r2
 8004208:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d109      	bne.n	8004224 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a1b      	ldr	r3, [r3, #32]
 8004214:	4618      	mov	r0, r3
 8004216:	f000 fd15 	bl	8004c44 <RCC_SetFlashLatencyFromMSIRange>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d001      	beq.n	8004224 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e343      	b.n	80048ac <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004224:	f000 fc4a 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8004228:	4602      	mov	r2, r0
 800422a:	4b52      	ldr	r3, [pc, #328]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	091b      	lsrs	r3, r3, #4
 8004230:	f003 030f 	and.w	r3, r3, #15
 8004234:	4950      	ldr	r1, [pc, #320]	@ (8004378 <HAL_RCC_OscConfig+0x274>)
 8004236:	5ccb      	ldrb	r3, [r1, r3]
 8004238:	f003 031f 	and.w	r3, r3, #31
 800423c:	fa22 f303 	lsr.w	r3, r2, r3
 8004240:	4a4e      	ldr	r2, [pc, #312]	@ (800437c <HAL_RCC_OscConfig+0x278>)
 8004242:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004244:	4b4e      	ldr	r3, [pc, #312]	@ (8004380 <HAL_RCC_OscConfig+0x27c>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4618      	mov	r0, r3
 800424a:	f7fe fcc3 	bl	8002bd4 <HAL_InitTick>
 800424e:	4603      	mov	r3, r0
 8004250:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004252:	7bfb      	ldrb	r3, [r7, #15]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d052      	beq.n	80042fe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004258:	7bfb      	ldrb	r3, [r7, #15]
 800425a:	e327      	b.n	80048ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d032      	beq.n	80042ca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004264:	4b43      	ldr	r3, [pc, #268]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a42      	ldr	r2, [pc, #264]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 800426a:	f043 0301 	orr.w	r3, r3, #1
 800426e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004270:	f7fe fd00 	bl	8002c74 <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004278:	f7fe fcfc 	bl	8002c74 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e310      	b.n	80048ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800428a:	4b3a      	ldr	r3, [pc, #232]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d0f0      	beq.n	8004278 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004296:	4b37      	ldr	r3, [pc, #220]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a36      	ldr	r2, [pc, #216]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 800429c:	f043 0308 	orr.w	r3, r3, #8
 80042a0:	6013      	str	r3, [r2, #0]
 80042a2:	4b34      	ldr	r3, [pc, #208]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	4931      	ldr	r1, [pc, #196]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042b4:	4b2f      	ldr	r3, [pc, #188]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	021b      	lsls	r3, r3, #8
 80042c2:	492c      	ldr	r1, [pc, #176]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	604b      	str	r3, [r1, #4]
 80042c8:	e01a      	b.n	8004300 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80042ca:	4b2a      	ldr	r3, [pc, #168]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a29      	ldr	r2, [pc, #164]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 80042d0:	f023 0301 	bic.w	r3, r3, #1
 80042d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042d6:	f7fe fccd 	bl	8002c74 <HAL_GetTick>
 80042da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042dc:	e008      	b.n	80042f0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042de:	f7fe fcc9 	bl	8002c74 <HAL_GetTick>
 80042e2:	4602      	mov	r2, r0
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	1ad3      	subs	r3, r2, r3
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d901      	bls.n	80042f0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80042ec:	2303      	movs	r3, #3
 80042ee:	e2dd      	b.n	80048ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042f0:	4b20      	ldr	r3, [pc, #128]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1f0      	bne.n	80042de <HAL_RCC_OscConfig+0x1da>
 80042fc:	e000      	b.n	8004300 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042fe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	2b00      	cmp	r3, #0
 800430a:	d074      	beq.n	80043f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800430c:	69bb      	ldr	r3, [r7, #24]
 800430e:	2b08      	cmp	r3, #8
 8004310:	d005      	beq.n	800431e <HAL_RCC_OscConfig+0x21a>
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	2b0c      	cmp	r3, #12
 8004316:	d10e      	bne.n	8004336 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	2b03      	cmp	r3, #3
 800431c:	d10b      	bne.n	8004336 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800431e:	4b15      	ldr	r3, [pc, #84]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d064      	beq.n	80043f4 <HAL_RCC_OscConfig+0x2f0>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d160      	bne.n	80043f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e2ba      	b.n	80048ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800433e:	d106      	bne.n	800434e <HAL_RCC_OscConfig+0x24a>
 8004340:	4b0c      	ldr	r3, [pc, #48]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a0b      	ldr	r2, [pc, #44]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 8004346:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800434a:	6013      	str	r3, [r2, #0]
 800434c:	e026      	b.n	800439c <HAL_RCC_OscConfig+0x298>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004356:	d115      	bne.n	8004384 <HAL_RCC_OscConfig+0x280>
 8004358:	4b06      	ldr	r3, [pc, #24]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a05      	ldr	r2, [pc, #20]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 800435e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004362:	6013      	str	r3, [r2, #0]
 8004364:	4b03      	ldr	r3, [pc, #12]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a02      	ldr	r2, [pc, #8]	@ (8004374 <HAL_RCC_OscConfig+0x270>)
 800436a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800436e:	6013      	str	r3, [r2, #0]
 8004370:	e014      	b.n	800439c <HAL_RCC_OscConfig+0x298>
 8004372:	bf00      	nop
 8004374:	40021000 	.word	0x40021000
 8004378:	0800db64 	.word	0x0800db64
 800437c:	20000000 	.word	0x20000000
 8004380:	20000004 	.word	0x20000004
 8004384:	4ba0      	ldr	r3, [pc, #640]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a9f      	ldr	r2, [pc, #636]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 800438a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800438e:	6013      	str	r3, [r2, #0]
 8004390:	4b9d      	ldr	r3, [pc, #628]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a9c      	ldr	r2, [pc, #624]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 8004396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800439a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d013      	beq.n	80043cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a4:	f7fe fc66 	bl	8002c74 <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043ac:	f7fe fc62 	bl	8002c74 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b64      	cmp	r3, #100	@ 0x64
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e276      	b.n	80048ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043be:	4b92      	ldr	r3, [pc, #584]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d0f0      	beq.n	80043ac <HAL_RCC_OscConfig+0x2a8>
 80043ca:	e014      	b.n	80043f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043cc:	f7fe fc52 	bl	8002c74 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043d4:	f7fe fc4e 	bl	8002c74 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b64      	cmp	r3, #100	@ 0x64
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e262      	b.n	80048ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043e6:	4b88      	ldr	r3, [pc, #544]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1f0      	bne.n	80043d4 <HAL_RCC_OscConfig+0x2d0>
 80043f2:	e000      	b.n	80043f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d060      	beq.n	80044c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	2b04      	cmp	r3, #4
 8004406:	d005      	beq.n	8004414 <HAL_RCC_OscConfig+0x310>
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	2b0c      	cmp	r3, #12
 800440c:	d119      	bne.n	8004442 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	2b02      	cmp	r3, #2
 8004412:	d116      	bne.n	8004442 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004414:	4b7c      	ldr	r3, [pc, #496]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800441c:	2b00      	cmp	r3, #0
 800441e:	d005      	beq.n	800442c <HAL_RCC_OscConfig+0x328>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e23f      	b.n	80048ac <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800442c:	4b76      	ldr	r3, [pc, #472]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	061b      	lsls	r3, r3, #24
 800443a:	4973      	ldr	r1, [pc, #460]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 800443c:	4313      	orrs	r3, r2
 800443e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004440:	e040      	b.n	80044c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d023      	beq.n	8004492 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800444a:	4b6f      	ldr	r3, [pc, #444]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a6e      	ldr	r2, [pc, #440]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 8004450:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004454:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004456:	f7fe fc0d 	bl	8002c74 <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800445c:	e008      	b.n	8004470 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800445e:	f7fe fc09 	bl	8002c74 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e21d      	b.n	80048ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004470:	4b65      	ldr	r3, [pc, #404]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0f0      	beq.n	800445e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800447c:	4b62      	ldr	r3, [pc, #392]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	061b      	lsls	r3, r3, #24
 800448a:	495f      	ldr	r1, [pc, #380]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 800448c:	4313      	orrs	r3, r2
 800448e:	604b      	str	r3, [r1, #4]
 8004490:	e018      	b.n	80044c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004492:	4b5d      	ldr	r3, [pc, #372]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a5c      	ldr	r2, [pc, #368]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 8004498:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800449c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449e:	f7fe fbe9 	bl	8002c74 <HAL_GetTick>
 80044a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044a4:	e008      	b.n	80044b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044a6:	f7fe fbe5 	bl	8002c74 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d901      	bls.n	80044b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e1f9      	b.n	80048ac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044b8:	4b53      	ldr	r3, [pc, #332]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1f0      	bne.n	80044a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0308 	and.w	r3, r3, #8
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d03c      	beq.n	800454a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d01c      	beq.n	8004512 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044d8:	4b4b      	ldr	r3, [pc, #300]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 80044da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044de:	4a4a      	ldr	r2, [pc, #296]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 80044e0:	f043 0301 	orr.w	r3, r3, #1
 80044e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e8:	f7fe fbc4 	bl	8002c74 <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044ee:	e008      	b.n	8004502 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044f0:	f7fe fbc0 	bl	8002c74 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b02      	cmp	r3, #2
 80044fc:	d901      	bls.n	8004502 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e1d4      	b.n	80048ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004502:	4b41      	ldr	r3, [pc, #260]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 8004504:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d0ef      	beq.n	80044f0 <HAL_RCC_OscConfig+0x3ec>
 8004510:	e01b      	b.n	800454a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004512:	4b3d      	ldr	r3, [pc, #244]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 8004514:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004518:	4a3b      	ldr	r2, [pc, #236]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 800451a:	f023 0301 	bic.w	r3, r3, #1
 800451e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004522:	f7fe fba7 	bl	8002c74 <HAL_GetTick>
 8004526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004528:	e008      	b.n	800453c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800452a:	f7fe fba3 	bl	8002c74 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d901      	bls.n	800453c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e1b7      	b.n	80048ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800453c:	4b32      	ldr	r3, [pc, #200]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 800453e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1ef      	bne.n	800452a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0304 	and.w	r3, r3, #4
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 80a6 	beq.w	80046a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004558:	2300      	movs	r3, #0
 800455a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800455c:	4b2a      	ldr	r3, [pc, #168]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 800455e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004560:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10d      	bne.n	8004584 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004568:	4b27      	ldr	r3, [pc, #156]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 800456a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800456c:	4a26      	ldr	r2, [pc, #152]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 800456e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004572:	6593      	str	r3, [r2, #88]	@ 0x58
 8004574:	4b24      	ldr	r3, [pc, #144]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 8004576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004578:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800457c:	60bb      	str	r3, [r7, #8]
 800457e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004580:	2301      	movs	r3, #1
 8004582:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004584:	4b21      	ldr	r3, [pc, #132]	@ (800460c <HAL_RCC_OscConfig+0x508>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800458c:	2b00      	cmp	r3, #0
 800458e:	d118      	bne.n	80045c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004590:	4b1e      	ldr	r3, [pc, #120]	@ (800460c <HAL_RCC_OscConfig+0x508>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a1d      	ldr	r2, [pc, #116]	@ (800460c <HAL_RCC_OscConfig+0x508>)
 8004596:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800459a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800459c:	f7fe fb6a 	bl	8002c74 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045a4:	f7fe fb66 	bl	8002c74 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e17a      	b.n	80048ac <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045b6:	4b15      	ldr	r3, [pc, #84]	@ (800460c <HAL_RCC_OscConfig+0x508>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0f0      	beq.n	80045a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d108      	bne.n	80045dc <HAL_RCC_OscConfig+0x4d8>
 80045ca:	4b0f      	ldr	r3, [pc, #60]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 80045cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045d0:	4a0d      	ldr	r2, [pc, #52]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 80045d2:	f043 0301 	orr.w	r3, r3, #1
 80045d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045da:	e029      	b.n	8004630 <HAL_RCC_OscConfig+0x52c>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	2b05      	cmp	r3, #5
 80045e2:	d115      	bne.n	8004610 <HAL_RCC_OscConfig+0x50c>
 80045e4:	4b08      	ldr	r3, [pc, #32]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 80045e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ea:	4a07      	ldr	r2, [pc, #28]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 80045ec:	f043 0304 	orr.w	r3, r3, #4
 80045f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80045f4:	4b04      	ldr	r3, [pc, #16]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 80045f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045fa:	4a03      	ldr	r2, [pc, #12]	@ (8004608 <HAL_RCC_OscConfig+0x504>)
 80045fc:	f043 0301 	orr.w	r3, r3, #1
 8004600:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004604:	e014      	b.n	8004630 <HAL_RCC_OscConfig+0x52c>
 8004606:	bf00      	nop
 8004608:	40021000 	.word	0x40021000
 800460c:	40007000 	.word	0x40007000
 8004610:	4b9c      	ldr	r3, [pc, #624]	@ (8004884 <HAL_RCC_OscConfig+0x780>)
 8004612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004616:	4a9b      	ldr	r2, [pc, #620]	@ (8004884 <HAL_RCC_OscConfig+0x780>)
 8004618:	f023 0301 	bic.w	r3, r3, #1
 800461c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004620:	4b98      	ldr	r3, [pc, #608]	@ (8004884 <HAL_RCC_OscConfig+0x780>)
 8004622:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004626:	4a97      	ldr	r2, [pc, #604]	@ (8004884 <HAL_RCC_OscConfig+0x780>)
 8004628:	f023 0304 	bic.w	r3, r3, #4
 800462c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d016      	beq.n	8004666 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004638:	f7fe fb1c 	bl	8002c74 <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800463e:	e00a      	b.n	8004656 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004640:	f7fe fb18 	bl	8002c74 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800464e:	4293      	cmp	r3, r2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e12a      	b.n	80048ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004656:	4b8b      	ldr	r3, [pc, #556]	@ (8004884 <HAL_RCC_OscConfig+0x780>)
 8004658:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800465c:	f003 0302 	and.w	r3, r3, #2
 8004660:	2b00      	cmp	r3, #0
 8004662:	d0ed      	beq.n	8004640 <HAL_RCC_OscConfig+0x53c>
 8004664:	e015      	b.n	8004692 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004666:	f7fe fb05 	bl	8002c74 <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800466c:	e00a      	b.n	8004684 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800466e:	f7fe fb01 	bl	8002c74 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	f241 3288 	movw	r2, #5000	@ 0x1388
 800467c:	4293      	cmp	r3, r2
 800467e:	d901      	bls.n	8004684 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e113      	b.n	80048ac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004684:	4b7f      	ldr	r3, [pc, #508]	@ (8004884 <HAL_RCC_OscConfig+0x780>)
 8004686:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1ed      	bne.n	800466e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004692:	7ffb      	ldrb	r3, [r7, #31]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d105      	bne.n	80046a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004698:	4b7a      	ldr	r3, [pc, #488]	@ (8004884 <HAL_RCC_OscConfig+0x780>)
 800469a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800469c:	4a79      	ldr	r2, [pc, #484]	@ (8004884 <HAL_RCC_OscConfig+0x780>)
 800469e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046a2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 80fe 	beq.w	80048aa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	f040 80d0 	bne.w	8004858 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80046b8:	4b72      	ldr	r3, [pc, #456]	@ (8004884 <HAL_RCC_OscConfig+0x780>)
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f003 0203 	and.w	r2, r3, #3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d130      	bne.n	800472e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d6:	3b01      	subs	r3, #1
 80046d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046da:	429a      	cmp	r2, r3
 80046dc:	d127      	bne.n	800472e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d11f      	bne.n	800472e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80046f8:	2a07      	cmp	r2, #7
 80046fa:	bf14      	ite	ne
 80046fc:	2201      	movne	r2, #1
 80046fe:	2200      	moveq	r2, #0
 8004700:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004702:	4293      	cmp	r3, r2
 8004704:	d113      	bne.n	800472e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004710:	085b      	lsrs	r3, r3, #1
 8004712:	3b01      	subs	r3, #1
 8004714:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004716:	429a      	cmp	r2, r3
 8004718:	d109      	bne.n	800472e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004724:	085b      	lsrs	r3, r3, #1
 8004726:	3b01      	subs	r3, #1
 8004728:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800472a:	429a      	cmp	r2, r3
 800472c:	d06e      	beq.n	800480c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	2b0c      	cmp	r3, #12
 8004732:	d069      	beq.n	8004808 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004734:	4b53      	ldr	r3, [pc, #332]	@ (8004884 <HAL_RCC_OscConfig+0x780>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d105      	bne.n	800474c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004740:	4b50      	ldr	r3, [pc, #320]	@ (8004884 <HAL_RCC_OscConfig+0x780>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d001      	beq.n	8004750 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e0ad      	b.n	80048ac <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004750:	4b4c      	ldr	r3, [pc, #304]	@ (8004884 <HAL_RCC_OscConfig+0x780>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a4b      	ldr	r2, [pc, #300]	@ (8004884 <HAL_RCC_OscConfig+0x780>)
 8004756:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800475a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800475c:	f7fe fa8a 	bl	8002c74 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004764:	f7fe fa86 	bl	8002c74 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e09a      	b.n	80048ac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004776:	4b43      	ldr	r3, [pc, #268]	@ (8004884 <HAL_RCC_OscConfig+0x780>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1f0      	bne.n	8004764 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004782:	4b40      	ldr	r3, [pc, #256]	@ (8004884 <HAL_RCC_OscConfig+0x780>)
 8004784:	68da      	ldr	r2, [r3, #12]
 8004786:	4b40      	ldr	r3, [pc, #256]	@ (8004888 <HAL_RCC_OscConfig+0x784>)
 8004788:	4013      	ands	r3, r2
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004792:	3a01      	subs	r2, #1
 8004794:	0112      	lsls	r2, r2, #4
 8004796:	4311      	orrs	r1, r2
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800479c:	0212      	lsls	r2, r2, #8
 800479e:	4311      	orrs	r1, r2
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80047a4:	0852      	lsrs	r2, r2, #1
 80047a6:	3a01      	subs	r2, #1
 80047a8:	0552      	lsls	r2, r2, #21
 80047aa:	4311      	orrs	r1, r2
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80047b0:	0852      	lsrs	r2, r2, #1
 80047b2:	3a01      	subs	r2, #1
 80047b4:	0652      	lsls	r2, r2, #25
 80047b6:	4311      	orrs	r1, r2
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80047bc:	0912      	lsrs	r2, r2, #4
 80047be:	0452      	lsls	r2, r2, #17
 80047c0:	430a      	orrs	r2, r1
 80047c2:	4930      	ldr	r1, [pc, #192]	@ (8004884 <HAL_RCC_OscConfig+0x780>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80047c8:	4b2e      	ldr	r3, [pc, #184]	@ (8004884 <HAL_RCC_OscConfig+0x780>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a2d      	ldr	r2, [pc, #180]	@ (8004884 <HAL_RCC_OscConfig+0x780>)
 80047ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047d4:	4b2b      	ldr	r3, [pc, #172]	@ (8004884 <HAL_RCC_OscConfig+0x780>)
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	4a2a      	ldr	r2, [pc, #168]	@ (8004884 <HAL_RCC_OscConfig+0x780>)
 80047da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80047e0:	f7fe fa48 	bl	8002c74 <HAL_GetTick>
 80047e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047e6:	e008      	b.n	80047fa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047e8:	f7fe fa44 	bl	8002c74 <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e058      	b.n	80048ac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047fa:	4b22      	ldr	r3, [pc, #136]	@ (8004884 <HAL_RCC_OscConfig+0x780>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0f0      	beq.n	80047e8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004806:	e050      	b.n	80048aa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e04f      	b.n	80048ac <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800480c:	4b1d      	ldr	r3, [pc, #116]	@ (8004884 <HAL_RCC_OscConfig+0x780>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d148      	bne.n	80048aa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004818:	4b1a      	ldr	r3, [pc, #104]	@ (8004884 <HAL_RCC_OscConfig+0x780>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a19      	ldr	r2, [pc, #100]	@ (8004884 <HAL_RCC_OscConfig+0x780>)
 800481e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004822:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004824:	4b17      	ldr	r3, [pc, #92]	@ (8004884 <HAL_RCC_OscConfig+0x780>)
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	4a16      	ldr	r2, [pc, #88]	@ (8004884 <HAL_RCC_OscConfig+0x780>)
 800482a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800482e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004830:	f7fe fa20 	bl	8002c74 <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004838:	f7fe fa1c 	bl	8002c74 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b02      	cmp	r3, #2
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e030      	b.n	80048ac <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800484a:	4b0e      	ldr	r3, [pc, #56]	@ (8004884 <HAL_RCC_OscConfig+0x780>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d0f0      	beq.n	8004838 <HAL_RCC_OscConfig+0x734>
 8004856:	e028      	b.n	80048aa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	2b0c      	cmp	r3, #12
 800485c:	d023      	beq.n	80048a6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800485e:	4b09      	ldr	r3, [pc, #36]	@ (8004884 <HAL_RCC_OscConfig+0x780>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a08      	ldr	r2, [pc, #32]	@ (8004884 <HAL_RCC_OscConfig+0x780>)
 8004864:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004868:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486a:	f7fe fa03 	bl	8002c74 <HAL_GetTick>
 800486e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004870:	e00c      	b.n	800488c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004872:	f7fe f9ff 	bl	8002c74 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d905      	bls.n	800488c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e013      	b.n	80048ac <HAL_RCC_OscConfig+0x7a8>
 8004884:	40021000 	.word	0x40021000
 8004888:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800488c:	4b09      	ldr	r3, [pc, #36]	@ (80048b4 <HAL_RCC_OscConfig+0x7b0>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1ec      	bne.n	8004872 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004898:	4b06      	ldr	r3, [pc, #24]	@ (80048b4 <HAL_RCC_OscConfig+0x7b0>)
 800489a:	68da      	ldr	r2, [r3, #12]
 800489c:	4905      	ldr	r1, [pc, #20]	@ (80048b4 <HAL_RCC_OscConfig+0x7b0>)
 800489e:	4b06      	ldr	r3, [pc, #24]	@ (80048b8 <HAL_RCC_OscConfig+0x7b4>)
 80048a0:	4013      	ands	r3, r2
 80048a2:	60cb      	str	r3, [r1, #12]
 80048a4:	e001      	b.n	80048aa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e000      	b.n	80048ac <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3720      	adds	r7, #32
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	40021000 	.word	0x40021000
 80048b8:	feeefffc 	.word	0xfeeefffc

080048bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d101      	bne.n	80048d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e0e7      	b.n	8004aa0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048d0:	4b75      	ldr	r3, [pc, #468]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1ec>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d910      	bls.n	8004900 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048de:	4b72      	ldr	r3, [pc, #456]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1ec>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f023 0207 	bic.w	r2, r3, #7
 80048e6:	4970      	ldr	r1, [pc, #448]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1ec>)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ee:	4b6e      	ldr	r3, [pc, #440]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1ec>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0307 	and.w	r3, r3, #7
 80048f6:	683a      	ldr	r2, [r7, #0]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d001      	beq.n	8004900 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e0cf      	b.n	8004aa0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0302 	and.w	r3, r3, #2
 8004908:	2b00      	cmp	r3, #0
 800490a:	d010      	beq.n	800492e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	4b66      	ldr	r3, [pc, #408]	@ (8004aac <HAL_RCC_ClockConfig+0x1f0>)
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004918:	429a      	cmp	r2, r3
 800491a:	d908      	bls.n	800492e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800491c:	4b63      	ldr	r3, [pc, #396]	@ (8004aac <HAL_RCC_ClockConfig+0x1f0>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	4960      	ldr	r1, [pc, #384]	@ (8004aac <HAL_RCC_ClockConfig+0x1f0>)
 800492a:	4313      	orrs	r3, r2
 800492c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d04c      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	2b03      	cmp	r3, #3
 8004940:	d107      	bne.n	8004952 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004942:	4b5a      	ldr	r3, [pc, #360]	@ (8004aac <HAL_RCC_ClockConfig+0x1f0>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d121      	bne.n	8004992 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e0a6      	b.n	8004aa0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	2b02      	cmp	r3, #2
 8004958:	d107      	bne.n	800496a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800495a:	4b54      	ldr	r3, [pc, #336]	@ (8004aac <HAL_RCC_ClockConfig+0x1f0>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d115      	bne.n	8004992 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e09a      	b.n	8004aa0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d107      	bne.n	8004982 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004972:	4b4e      	ldr	r3, [pc, #312]	@ (8004aac <HAL_RCC_ClockConfig+0x1f0>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d109      	bne.n	8004992 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e08e      	b.n	8004aa0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004982:	4b4a      	ldr	r3, [pc, #296]	@ (8004aac <HAL_RCC_ClockConfig+0x1f0>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e086      	b.n	8004aa0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004992:	4b46      	ldr	r3, [pc, #280]	@ (8004aac <HAL_RCC_ClockConfig+0x1f0>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f023 0203 	bic.w	r2, r3, #3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	4943      	ldr	r1, [pc, #268]	@ (8004aac <HAL_RCC_ClockConfig+0x1f0>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049a4:	f7fe f966 	bl	8002c74 <HAL_GetTick>
 80049a8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049aa:	e00a      	b.n	80049c2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049ac:	f7fe f962 	bl	8002c74 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e06e      	b.n	8004aa0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049c2:	4b3a      	ldr	r3, [pc, #232]	@ (8004aac <HAL_RCC_ClockConfig+0x1f0>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 020c 	and.w	r2, r3, #12
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d1eb      	bne.n	80049ac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d010      	beq.n	8004a02 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689a      	ldr	r2, [r3, #8]
 80049e4:	4b31      	ldr	r3, [pc, #196]	@ (8004aac <HAL_RCC_ClockConfig+0x1f0>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d208      	bcs.n	8004a02 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049f0:	4b2e      	ldr	r3, [pc, #184]	@ (8004aac <HAL_RCC_ClockConfig+0x1f0>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	492b      	ldr	r1, [pc, #172]	@ (8004aac <HAL_RCC_ClockConfig+0x1f0>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a02:	4b29      	ldr	r3, [pc, #164]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1ec>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0307 	and.w	r3, r3, #7
 8004a0a:	683a      	ldr	r2, [r7, #0]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d210      	bcs.n	8004a32 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a10:	4b25      	ldr	r3, [pc, #148]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1ec>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f023 0207 	bic.w	r2, r3, #7
 8004a18:	4923      	ldr	r1, [pc, #140]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1ec>)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a20:	4b21      	ldr	r3, [pc, #132]	@ (8004aa8 <HAL_RCC_ClockConfig+0x1ec>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 0307 	and.w	r3, r3, #7
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d001      	beq.n	8004a32 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e036      	b.n	8004aa0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0304 	and.w	r3, r3, #4
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d008      	beq.n	8004a50 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8004aac <HAL_RCC_ClockConfig+0x1f0>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	4918      	ldr	r1, [pc, #96]	@ (8004aac <HAL_RCC_ClockConfig+0x1f0>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0308 	and.w	r3, r3, #8
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d009      	beq.n	8004a70 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a5c:	4b13      	ldr	r3, [pc, #76]	@ (8004aac <HAL_RCC_ClockConfig+0x1f0>)
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	4910      	ldr	r1, [pc, #64]	@ (8004aac <HAL_RCC_ClockConfig+0x1f0>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a70:	f000 f824 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8004a74:	4602      	mov	r2, r0
 8004a76:	4b0d      	ldr	r3, [pc, #52]	@ (8004aac <HAL_RCC_ClockConfig+0x1f0>)
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	091b      	lsrs	r3, r3, #4
 8004a7c:	f003 030f 	and.w	r3, r3, #15
 8004a80:	490b      	ldr	r1, [pc, #44]	@ (8004ab0 <HAL_RCC_ClockConfig+0x1f4>)
 8004a82:	5ccb      	ldrb	r3, [r1, r3]
 8004a84:	f003 031f 	and.w	r3, r3, #31
 8004a88:	fa22 f303 	lsr.w	r3, r2, r3
 8004a8c:	4a09      	ldr	r2, [pc, #36]	@ (8004ab4 <HAL_RCC_ClockConfig+0x1f8>)
 8004a8e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004a90:	4b09      	ldr	r3, [pc, #36]	@ (8004ab8 <HAL_RCC_ClockConfig+0x1fc>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7fe f89d 	bl	8002bd4 <HAL_InitTick>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	72fb      	strb	r3, [r7, #11]

  return status;
 8004a9e:	7afb      	ldrb	r3, [r7, #11]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	40022000 	.word	0x40022000
 8004aac:	40021000 	.word	0x40021000
 8004ab0:	0800db64 	.word	0x0800db64
 8004ab4:	20000000 	.word	0x20000000
 8004ab8:	20000004 	.word	0x20000004

08004abc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b089      	sub	sp, #36	@ 0x24
 8004ac0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	61fb      	str	r3, [r7, #28]
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aca:	4b3e      	ldr	r3, [pc, #248]	@ (8004bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f003 030c 	and.w	r3, r3, #12
 8004ad2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ad4:	4b3b      	ldr	r3, [pc, #236]	@ (8004bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	f003 0303 	and.w	r3, r3, #3
 8004adc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d005      	beq.n	8004af0 <HAL_RCC_GetSysClockFreq+0x34>
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	2b0c      	cmp	r3, #12
 8004ae8:	d121      	bne.n	8004b2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d11e      	bne.n	8004b2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004af0:	4b34      	ldr	r3, [pc, #208]	@ (8004bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0308 	and.w	r3, r3, #8
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d107      	bne.n	8004b0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004afc:	4b31      	ldr	r3, [pc, #196]	@ (8004bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004b02:	0a1b      	lsrs	r3, r3, #8
 8004b04:	f003 030f 	and.w	r3, r3, #15
 8004b08:	61fb      	str	r3, [r7, #28]
 8004b0a:	e005      	b.n	8004b18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b0c:	4b2d      	ldr	r3, [pc, #180]	@ (8004bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	091b      	lsrs	r3, r3, #4
 8004b12:	f003 030f 	and.w	r3, r3, #15
 8004b16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004b18:	4a2b      	ldr	r2, [pc, #172]	@ (8004bc8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10d      	bne.n	8004b44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b2c:	e00a      	b.n	8004b44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	2b04      	cmp	r3, #4
 8004b32:	d102      	bne.n	8004b3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b34:	4b25      	ldr	r3, [pc, #148]	@ (8004bcc <HAL_RCC_GetSysClockFreq+0x110>)
 8004b36:	61bb      	str	r3, [r7, #24]
 8004b38:	e004      	b.n	8004b44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	2b08      	cmp	r3, #8
 8004b3e:	d101      	bne.n	8004b44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b40:	4b23      	ldr	r3, [pc, #140]	@ (8004bd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	2b0c      	cmp	r3, #12
 8004b48:	d134      	bne.n	8004bb4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8004bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	f003 0303 	and.w	r3, r3, #3
 8004b52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d003      	beq.n	8004b62 <HAL_RCC_GetSysClockFreq+0xa6>
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	2b03      	cmp	r3, #3
 8004b5e:	d003      	beq.n	8004b68 <HAL_RCC_GetSysClockFreq+0xac>
 8004b60:	e005      	b.n	8004b6e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004b62:	4b1a      	ldr	r3, [pc, #104]	@ (8004bcc <HAL_RCC_GetSysClockFreq+0x110>)
 8004b64:	617b      	str	r3, [r7, #20]
      break;
 8004b66:	e005      	b.n	8004b74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004b68:	4b19      	ldr	r3, [pc, #100]	@ (8004bd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b6a:	617b      	str	r3, [r7, #20]
      break;
 8004b6c:	e002      	b.n	8004b74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	617b      	str	r3, [r7, #20]
      break;
 8004b72:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b74:	4b13      	ldr	r3, [pc, #76]	@ (8004bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	091b      	lsrs	r3, r3, #4
 8004b7a:	f003 0307 	and.w	r3, r3, #7
 8004b7e:	3301      	adds	r3, #1
 8004b80:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004b82:	4b10      	ldr	r3, [pc, #64]	@ (8004bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	0a1b      	lsrs	r3, r3, #8
 8004b88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	fb03 f202 	mul.w	r2, r3, r2
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b98:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8004bc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	0e5b      	lsrs	r3, r3, #25
 8004ba0:	f003 0303 	and.w	r3, r3, #3
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004bb4:	69bb      	ldr	r3, [r7, #24]
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3724      	adds	r7, #36	@ 0x24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	0800db7c 	.word	0x0800db7c
 8004bcc:	00f42400 	.word	0x00f42400
 8004bd0:	007a1200 	.word	0x007a1200

08004bd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bd8:	4b03      	ldr	r3, [pc, #12]	@ (8004be8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bda:	681b      	ldr	r3, [r3, #0]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
 8004be6:	bf00      	nop
 8004be8:	20000000 	.word	0x20000000

08004bec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004bf0:	f7ff fff0 	bl	8004bd4 <HAL_RCC_GetHCLKFreq>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	4b06      	ldr	r3, [pc, #24]	@ (8004c10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	0a1b      	lsrs	r3, r3, #8
 8004bfc:	f003 0307 	and.w	r3, r3, #7
 8004c00:	4904      	ldr	r1, [pc, #16]	@ (8004c14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c02:	5ccb      	ldrb	r3, [r1, r3]
 8004c04:	f003 031f 	and.w	r3, r3, #31
 8004c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	40021000 	.word	0x40021000
 8004c14:	0800db74 	.word	0x0800db74

08004c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c1c:	f7ff ffda 	bl	8004bd4 <HAL_RCC_GetHCLKFreq>
 8004c20:	4602      	mov	r2, r0
 8004c22:	4b06      	ldr	r3, [pc, #24]	@ (8004c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	0adb      	lsrs	r3, r3, #11
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	4904      	ldr	r1, [pc, #16]	@ (8004c40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c2e:	5ccb      	ldrb	r3, [r1, r3]
 8004c30:	f003 031f 	and.w	r3, r3, #31
 8004c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	0800db74 	.word	0x0800db74

08004c44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004c50:	4b2a      	ldr	r3, [pc, #168]	@ (8004cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d003      	beq.n	8004c64 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004c5c:	f7ff f9ee 	bl	800403c <HAL_PWREx_GetVoltageRange>
 8004c60:	6178      	str	r0, [r7, #20]
 8004c62:	e014      	b.n	8004c8e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c64:	4b25      	ldr	r3, [pc, #148]	@ (8004cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c68:	4a24      	ldr	r2, [pc, #144]	@ (8004cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c70:	4b22      	ldr	r3, [pc, #136]	@ (8004cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c78:	60fb      	str	r3, [r7, #12]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004c7c:	f7ff f9de 	bl	800403c <HAL_PWREx_GetVoltageRange>
 8004c80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004c82:	4b1e      	ldr	r3, [pc, #120]	@ (8004cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c86:	4a1d      	ldr	r2, [pc, #116]	@ (8004cfc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004c88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c8c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c94:	d10b      	bne.n	8004cae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b80      	cmp	r3, #128	@ 0x80
 8004c9a:	d919      	bls.n	8004cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004ca0:	d902      	bls.n	8004ca8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	613b      	str	r3, [r7, #16]
 8004ca6:	e013      	b.n	8004cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ca8:	2301      	movs	r3, #1
 8004caa:	613b      	str	r3, [r7, #16]
 8004cac:	e010      	b.n	8004cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2b80      	cmp	r3, #128	@ 0x80
 8004cb2:	d902      	bls.n	8004cba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	613b      	str	r3, [r7, #16]
 8004cb8:	e00a      	b.n	8004cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2b80      	cmp	r3, #128	@ 0x80
 8004cbe:	d102      	bne.n	8004cc6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	613b      	str	r3, [r7, #16]
 8004cc4:	e004      	b.n	8004cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2b70      	cmp	r3, #112	@ 0x70
 8004cca:	d101      	bne.n	8004cd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ccc:	2301      	movs	r3, #1
 8004cce:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8004d00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f023 0207 	bic.w	r2, r3, #7
 8004cd8:	4909      	ldr	r1, [pc, #36]	@ (8004d00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004ce0:	4b07      	ldr	r3, [pc, #28]	@ (8004d00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d001      	beq.n	8004cf2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e000      	b.n	8004cf4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3718      	adds	r7, #24
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	40021000 	.word	0x40021000
 8004d00:	40022000 	.word	0x40022000

08004d04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b086      	sub	sp, #24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d10:	2300      	movs	r3, #0
 8004d12:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d041      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d24:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004d28:	d02a      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004d2a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004d2e:	d824      	bhi.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d30:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d34:	d008      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004d36:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d3a:	d81e      	bhi.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00a      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004d40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d44:	d010      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004d46:	e018      	b.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004d48:	4b86      	ldr	r3, [pc, #536]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	4a85      	ldr	r2, [pc, #532]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d52:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d54:	e015      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	3304      	adds	r3, #4
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f000 fabb 	bl	80052d8 <RCCEx_PLLSAI1_Config>
 8004d62:	4603      	mov	r3, r0
 8004d64:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d66:	e00c      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	3320      	adds	r3, #32
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 fba6 	bl	80054c0 <RCCEx_PLLSAI2_Config>
 8004d74:	4603      	mov	r3, r0
 8004d76:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d78:	e003      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	74fb      	strb	r3, [r7, #19]
      break;
 8004d7e:	e000      	b.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004d80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d82:	7cfb      	ldrb	r3, [r7, #19]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10b      	bne.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004d88:	4b76      	ldr	r3, [pc, #472]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d8e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d96:	4973      	ldr	r1, [pc, #460]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004d9e:	e001      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da0:	7cfb      	ldrb	r3, [r7, #19]
 8004da2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d041      	beq.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004db4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004db8:	d02a      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004dba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004dbe:	d824      	bhi.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004dc0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004dc4:	d008      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004dc6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004dca:	d81e      	bhi.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00a      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004dd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004dd4:	d010      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004dd6:	e018      	b.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004dd8:	4b62      	ldr	r3, [pc, #392]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	4a61      	ldr	r2, [pc, #388]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004de2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004de4:	e015      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	3304      	adds	r3, #4
 8004dea:	2100      	movs	r1, #0
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 fa73 	bl	80052d8 <RCCEx_PLLSAI1_Config>
 8004df2:	4603      	mov	r3, r0
 8004df4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004df6:	e00c      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	3320      	adds	r3, #32
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 fb5e 	bl	80054c0 <RCCEx_PLLSAI2_Config>
 8004e04:	4603      	mov	r3, r0
 8004e06:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004e08:	e003      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	74fb      	strb	r3, [r7, #19]
      break;
 8004e0e:	e000      	b.n	8004e12 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004e10:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e12:	7cfb      	ldrb	r3, [r7, #19]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10b      	bne.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e18:	4b52      	ldr	r3, [pc, #328]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e1e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e26:	494f      	ldr	r1, [pc, #316]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004e2e:	e001      	b.n	8004e34 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e30:	7cfb      	ldrb	r3, [r7, #19]
 8004e32:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f000 80a0 	beq.w	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e42:	2300      	movs	r3, #0
 8004e44:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004e46:	4b47      	ldr	r3, [pc, #284]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d101      	bne.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004e52:	2301      	movs	r3, #1
 8004e54:	e000      	b.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004e56:	2300      	movs	r3, #0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00d      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e5c:	4b41      	ldr	r3, [pc, #260]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e60:	4a40      	ldr	r2, [pc, #256]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e66:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e68:	4b3e      	ldr	r3, [pc, #248]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e70:	60bb      	str	r3, [r7, #8]
 8004e72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e74:	2301      	movs	r3, #1
 8004e76:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e78:	4b3b      	ldr	r3, [pc, #236]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a3a      	ldr	r2, [pc, #232]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e84:	f7fd fef6 	bl	8002c74 <HAL_GetTick>
 8004e88:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e8a:	e009      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e8c:	f7fd fef2 	bl	8002c74 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d902      	bls.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	74fb      	strb	r3, [r7, #19]
        break;
 8004e9e:	e005      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ea0:	4b31      	ldr	r3, [pc, #196]	@ (8004f68 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0ef      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004eac:	7cfb      	ldrb	r3, [r7, #19]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d15c      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004eb2:	4b2c      	ldr	r3, [pc, #176]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ebc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d01f      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d019      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ed0:	4b24      	ldr	r3, [pc, #144]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ed6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004eda:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004edc:	4b21      	ldr	r3, [pc, #132]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ee2:	4a20      	ldr	r2, [pc, #128]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ee8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004eec:	4b1d      	ldr	r3, [pc, #116]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ef2:	4a1c      	ldr	r2, [pc, #112]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ef4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ef8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004efc:	4a19      	ldr	r2, [pc, #100]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d016      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f0e:	f7fd feb1 	bl	8002c74 <HAL_GetTick>
 8004f12:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f14:	e00b      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f16:	f7fd fead 	bl	8002c74 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d902      	bls.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	74fb      	strb	r3, [r7, #19]
            break;
 8004f2c:	e006      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f34:	f003 0302 	and.w	r3, r3, #2
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d0ec      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004f3c:	7cfb      	ldrb	r3, [r7, #19]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10c      	bne.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f42:	4b08      	ldr	r3, [pc, #32]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f52:	4904      	ldr	r1, [pc, #16]	@ (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004f5a:	e009      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f5c:	7cfb      	ldrb	r3, [r7, #19]
 8004f5e:	74bb      	strb	r3, [r7, #18]
 8004f60:	e006      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004f62:	bf00      	nop
 8004f64:	40021000 	.word	0x40021000
 8004f68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f6c:	7cfb      	ldrb	r3, [r7, #19]
 8004f6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f70:	7c7b      	ldrb	r3, [r7, #17]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d105      	bne.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f76:	4b9e      	ldr	r3, [pc, #632]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f7a:	4a9d      	ldr	r2, [pc, #628]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f80:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00a      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f8e:	4b98      	ldr	r3, [pc, #608]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f94:	f023 0203 	bic.w	r2, r3, #3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f9c:	4994      	ldr	r1, [pc, #592]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00a      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fb0:	4b8f      	ldr	r3, [pc, #572]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fb6:	f023 020c 	bic.w	r2, r3, #12
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fbe:	498c      	ldr	r1, [pc, #560]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0304 	and.w	r3, r3, #4
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00a      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004fd2:	4b87      	ldr	r3, [pc, #540]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fd8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe0:	4983      	ldr	r1, [pc, #524]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0308 	and.w	r3, r3, #8
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00a      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ff4:	4b7e      	ldr	r3, [pc, #504]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ffa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005002:	497b      	ldr	r1, [pc, #492]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005004:	4313      	orrs	r3, r2
 8005006:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0310 	and.w	r3, r3, #16
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00a      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005016:	4b76      	ldr	r3, [pc, #472]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005018:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800501c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005024:	4972      	ldr	r1, [pc, #456]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005026:	4313      	orrs	r3, r2
 8005028:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0320 	and.w	r3, r3, #32
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00a      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005038:	4b6d      	ldr	r3, [pc, #436]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800503a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800503e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005046:	496a      	ldr	r1, [pc, #424]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005048:	4313      	orrs	r3, r2
 800504a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00a      	beq.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800505a:	4b65      	ldr	r3, [pc, #404]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800505c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005060:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005068:	4961      	ldr	r1, [pc, #388]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800506a:	4313      	orrs	r3, r2
 800506c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00a      	beq.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800507c:	4b5c      	ldr	r3, [pc, #368]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800507e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005082:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800508a:	4959      	ldr	r1, [pc, #356]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800508c:	4313      	orrs	r3, r2
 800508e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800509a:	2b00      	cmp	r3, #0
 800509c:	d00a      	beq.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800509e:	4b54      	ldr	r3, [pc, #336]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050a4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050ac:	4950      	ldr	r1, [pc, #320]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00a      	beq.n	80050d6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050c0:	4b4b      	ldr	r3, [pc, #300]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050c6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ce:	4948      	ldr	r1, [pc, #288]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d00a      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050e2:	4b43      	ldr	r3, [pc, #268]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050f0:	493f      	ldr	r1, [pc, #252]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d028      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005104:	4b3a      	ldr	r3, [pc, #232]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005106:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800510a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005112:	4937      	ldr	r1, [pc, #220]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005114:	4313      	orrs	r3, r2
 8005116:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800511e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005122:	d106      	bne.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005124:	4b32      	ldr	r3, [pc, #200]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	4a31      	ldr	r2, [pc, #196]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800512a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800512e:	60d3      	str	r3, [r2, #12]
 8005130:	e011      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005136:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800513a:	d10c      	bne.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	3304      	adds	r3, #4
 8005140:	2101      	movs	r1, #1
 8005142:	4618      	mov	r0, r3
 8005144:	f000 f8c8 	bl	80052d8 <RCCEx_PLLSAI1_Config>
 8005148:	4603      	mov	r3, r0
 800514a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800514c:	7cfb      	ldrb	r3, [r7, #19]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005152:	7cfb      	ldrb	r3, [r7, #19]
 8005154:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d028      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005162:	4b23      	ldr	r3, [pc, #140]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005168:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005170:	491f      	ldr	r1, [pc, #124]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005172:	4313      	orrs	r3, r2
 8005174:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800517c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005180:	d106      	bne.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005182:	4b1b      	ldr	r3, [pc, #108]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	4a1a      	ldr	r2, [pc, #104]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005188:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800518c:	60d3      	str	r3, [r2, #12]
 800518e:	e011      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005194:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005198:	d10c      	bne.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	3304      	adds	r3, #4
 800519e:	2101      	movs	r1, #1
 80051a0:	4618      	mov	r0, r3
 80051a2:	f000 f899 	bl	80052d8 <RCCEx_PLLSAI1_Config>
 80051a6:	4603      	mov	r3, r0
 80051a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051aa:	7cfb      	ldrb	r3, [r7, #19]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80051b0:	7cfb      	ldrb	r3, [r7, #19]
 80051b2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d02b      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051c0:	4b0b      	ldr	r3, [pc, #44]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051ce:	4908      	ldr	r1, [pc, #32]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051de:	d109      	bne.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051e0:	4b03      	ldr	r3, [pc, #12]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	4a02      	ldr	r2, [pc, #8]	@ (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051ea:	60d3      	str	r3, [r2, #12]
 80051ec:	e014      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80051ee:	bf00      	nop
 80051f0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80051fc:	d10c      	bne.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	3304      	adds	r3, #4
 8005202:	2101      	movs	r1, #1
 8005204:	4618      	mov	r0, r3
 8005206:	f000 f867 	bl	80052d8 <RCCEx_PLLSAI1_Config>
 800520a:	4603      	mov	r3, r0
 800520c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800520e:	7cfb      	ldrb	r3, [r7, #19]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d001      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005214:	7cfb      	ldrb	r3, [r7, #19]
 8005216:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d02f      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005224:	4b2b      	ldr	r3, [pc, #172]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800522a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005232:	4928      	ldr	r1, [pc, #160]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005234:	4313      	orrs	r3, r2
 8005236:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800523e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005242:	d10d      	bne.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	3304      	adds	r3, #4
 8005248:	2102      	movs	r1, #2
 800524a:	4618      	mov	r0, r3
 800524c:	f000 f844 	bl	80052d8 <RCCEx_PLLSAI1_Config>
 8005250:	4603      	mov	r3, r0
 8005252:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005254:	7cfb      	ldrb	r3, [r7, #19]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d014      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800525a:	7cfb      	ldrb	r3, [r7, #19]
 800525c:	74bb      	strb	r3, [r7, #18]
 800525e:	e011      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005264:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005268:	d10c      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	3320      	adds	r3, #32
 800526e:	2102      	movs	r1, #2
 8005270:	4618      	mov	r0, r3
 8005272:	f000 f925 	bl	80054c0 <RCCEx_PLLSAI2_Config>
 8005276:	4603      	mov	r3, r0
 8005278:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800527a:	7cfb      	ldrb	r3, [r7, #19]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d001      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005280:	7cfb      	ldrb	r3, [r7, #19]
 8005282:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00a      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005290:	4b10      	ldr	r3, [pc, #64]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005296:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800529e:	490d      	ldr	r1, [pc, #52]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00b      	beq.n	80052ca <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80052b2:	4b08      	ldr	r3, [pc, #32]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052b8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052c2:	4904      	ldr	r1, [pc, #16]	@ (80052d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80052ca:	7cbb      	ldrb	r3, [r7, #18]
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3718      	adds	r7, #24
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	40021000 	.word	0x40021000

080052d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052e2:	2300      	movs	r3, #0
 80052e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052e6:	4b75      	ldr	r3, [pc, #468]	@ (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	f003 0303 	and.w	r3, r3, #3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d018      	beq.n	8005324 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80052f2:	4b72      	ldr	r3, [pc, #456]	@ (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	f003 0203 	and.w	r2, r3, #3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d10d      	bne.n	800531e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
       ||
 8005306:	2b00      	cmp	r3, #0
 8005308:	d009      	beq.n	800531e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800530a:	4b6c      	ldr	r3, [pc, #432]	@ (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	091b      	lsrs	r3, r3, #4
 8005310:	f003 0307 	and.w	r3, r3, #7
 8005314:	1c5a      	adds	r2, r3, #1
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
       ||
 800531a:	429a      	cmp	r2, r3
 800531c:	d047      	beq.n	80053ae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	73fb      	strb	r3, [r7, #15]
 8005322:	e044      	b.n	80053ae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b03      	cmp	r3, #3
 800532a:	d018      	beq.n	800535e <RCCEx_PLLSAI1_Config+0x86>
 800532c:	2b03      	cmp	r3, #3
 800532e:	d825      	bhi.n	800537c <RCCEx_PLLSAI1_Config+0xa4>
 8005330:	2b01      	cmp	r3, #1
 8005332:	d002      	beq.n	800533a <RCCEx_PLLSAI1_Config+0x62>
 8005334:	2b02      	cmp	r3, #2
 8005336:	d009      	beq.n	800534c <RCCEx_PLLSAI1_Config+0x74>
 8005338:	e020      	b.n	800537c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800533a:	4b60      	ldr	r3, [pc, #384]	@ (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b00      	cmp	r3, #0
 8005344:	d11d      	bne.n	8005382 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800534a:	e01a      	b.n	8005382 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800534c:	4b5b      	ldr	r3, [pc, #364]	@ (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005354:	2b00      	cmp	r3, #0
 8005356:	d116      	bne.n	8005386 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800535c:	e013      	b.n	8005386 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800535e:	4b57      	ldr	r3, [pc, #348]	@ (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10f      	bne.n	800538a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800536a:	4b54      	ldr	r3, [pc, #336]	@ (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005372:	2b00      	cmp	r3, #0
 8005374:	d109      	bne.n	800538a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800537a:	e006      	b.n	800538a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	73fb      	strb	r3, [r7, #15]
      break;
 8005380:	e004      	b.n	800538c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005382:	bf00      	nop
 8005384:	e002      	b.n	800538c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005386:	bf00      	nop
 8005388:	e000      	b.n	800538c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800538a:	bf00      	nop
    }

    if(status == HAL_OK)
 800538c:	7bfb      	ldrb	r3, [r7, #15]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10d      	bne.n	80053ae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005392:	4b4a      	ldr	r3, [pc, #296]	@ (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6819      	ldr	r1, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	3b01      	subs	r3, #1
 80053a4:	011b      	lsls	r3, r3, #4
 80053a6:	430b      	orrs	r3, r1
 80053a8:	4944      	ldr	r1, [pc, #272]	@ (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80053ae:	7bfb      	ldrb	r3, [r7, #15]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d17d      	bne.n	80054b0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80053b4:	4b41      	ldr	r3, [pc, #260]	@ (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a40      	ldr	r2, [pc, #256]	@ (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80053ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80053be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053c0:	f7fd fc58 	bl	8002c74 <HAL_GetTick>
 80053c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053c6:	e009      	b.n	80053dc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053c8:	f7fd fc54 	bl	8002c74 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d902      	bls.n	80053dc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	73fb      	strb	r3, [r7, #15]
        break;
 80053da:	e005      	b.n	80053e8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053dc:	4b37      	ldr	r3, [pc, #220]	@ (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d1ef      	bne.n	80053c8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80053e8:	7bfb      	ldrb	r3, [r7, #15]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d160      	bne.n	80054b0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d111      	bne.n	8005418 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053f4:	4b31      	ldr	r3, [pc, #196]	@ (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80053fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	6892      	ldr	r2, [r2, #8]
 8005404:	0211      	lsls	r1, r2, #8
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	68d2      	ldr	r2, [r2, #12]
 800540a:	0912      	lsrs	r2, r2, #4
 800540c:	0452      	lsls	r2, r2, #17
 800540e:	430a      	orrs	r2, r1
 8005410:	492a      	ldr	r1, [pc, #168]	@ (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005412:	4313      	orrs	r3, r2
 8005414:	610b      	str	r3, [r1, #16]
 8005416:	e027      	b.n	8005468 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d112      	bne.n	8005444 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800541e:	4b27      	ldr	r3, [pc, #156]	@ (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005426:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	6892      	ldr	r2, [r2, #8]
 800542e:	0211      	lsls	r1, r2, #8
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	6912      	ldr	r2, [r2, #16]
 8005434:	0852      	lsrs	r2, r2, #1
 8005436:	3a01      	subs	r2, #1
 8005438:	0552      	lsls	r2, r2, #21
 800543a:	430a      	orrs	r2, r1
 800543c:	491f      	ldr	r1, [pc, #124]	@ (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800543e:	4313      	orrs	r3, r2
 8005440:	610b      	str	r3, [r1, #16]
 8005442:	e011      	b.n	8005468 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005444:	4b1d      	ldr	r3, [pc, #116]	@ (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800544c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	6892      	ldr	r2, [r2, #8]
 8005454:	0211      	lsls	r1, r2, #8
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	6952      	ldr	r2, [r2, #20]
 800545a:	0852      	lsrs	r2, r2, #1
 800545c:	3a01      	subs	r2, #1
 800545e:	0652      	lsls	r2, r2, #25
 8005460:	430a      	orrs	r2, r1
 8005462:	4916      	ldr	r1, [pc, #88]	@ (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005464:	4313      	orrs	r3, r2
 8005466:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005468:	4b14      	ldr	r3, [pc, #80]	@ (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a13      	ldr	r2, [pc, #76]	@ (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800546e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005472:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005474:	f7fd fbfe 	bl	8002c74 <HAL_GetTick>
 8005478:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800547a:	e009      	b.n	8005490 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800547c:	f7fd fbfa 	bl	8002c74 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b02      	cmp	r3, #2
 8005488:	d902      	bls.n	8005490 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	73fb      	strb	r3, [r7, #15]
          break;
 800548e:	e005      	b.n	800549c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005490:	4b0a      	ldr	r3, [pc, #40]	@ (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d0ef      	beq.n	800547c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800549c:	7bfb      	ldrb	r3, [r7, #15]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d106      	bne.n	80054b0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80054a2:	4b06      	ldr	r3, [pc, #24]	@ (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80054a4:	691a      	ldr	r2, [r3, #16]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	4904      	ldr	r1, [pc, #16]	@ (80054bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80054b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	40021000 	.word	0x40021000

080054c0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054ca:	2300      	movs	r3, #0
 80054cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054ce:	4b6a      	ldr	r3, [pc, #424]	@ (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	f003 0303 	and.w	r3, r3, #3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d018      	beq.n	800550c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80054da:	4b67      	ldr	r3, [pc, #412]	@ (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f003 0203 	and.w	r2, r3, #3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d10d      	bne.n	8005506 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
       ||
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d009      	beq.n	8005506 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80054f2:	4b61      	ldr	r3, [pc, #388]	@ (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	091b      	lsrs	r3, r3, #4
 80054f8:	f003 0307 	and.w	r3, r3, #7
 80054fc:	1c5a      	adds	r2, r3, #1
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
       ||
 8005502:	429a      	cmp	r2, r3
 8005504:	d047      	beq.n	8005596 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	73fb      	strb	r3, [r7, #15]
 800550a:	e044      	b.n	8005596 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2b03      	cmp	r3, #3
 8005512:	d018      	beq.n	8005546 <RCCEx_PLLSAI2_Config+0x86>
 8005514:	2b03      	cmp	r3, #3
 8005516:	d825      	bhi.n	8005564 <RCCEx_PLLSAI2_Config+0xa4>
 8005518:	2b01      	cmp	r3, #1
 800551a:	d002      	beq.n	8005522 <RCCEx_PLLSAI2_Config+0x62>
 800551c:	2b02      	cmp	r3, #2
 800551e:	d009      	beq.n	8005534 <RCCEx_PLLSAI2_Config+0x74>
 8005520:	e020      	b.n	8005564 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005522:	4b55      	ldr	r3, [pc, #340]	@ (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d11d      	bne.n	800556a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005532:	e01a      	b.n	800556a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005534:	4b50      	ldr	r3, [pc, #320]	@ (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800553c:	2b00      	cmp	r3, #0
 800553e:	d116      	bne.n	800556e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005544:	e013      	b.n	800556e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005546:	4b4c      	ldr	r3, [pc, #304]	@ (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10f      	bne.n	8005572 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005552:	4b49      	ldr	r3, [pc, #292]	@ (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d109      	bne.n	8005572 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005562:	e006      	b.n	8005572 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	73fb      	strb	r3, [r7, #15]
      break;
 8005568:	e004      	b.n	8005574 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800556a:	bf00      	nop
 800556c:	e002      	b.n	8005574 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800556e:	bf00      	nop
 8005570:	e000      	b.n	8005574 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005572:	bf00      	nop
    }

    if(status == HAL_OK)
 8005574:	7bfb      	ldrb	r3, [r7, #15]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10d      	bne.n	8005596 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800557a:	4b3f      	ldr	r3, [pc, #252]	@ (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6819      	ldr	r1, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	3b01      	subs	r3, #1
 800558c:	011b      	lsls	r3, r3, #4
 800558e:	430b      	orrs	r3, r1
 8005590:	4939      	ldr	r1, [pc, #228]	@ (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005592:	4313      	orrs	r3, r2
 8005594:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005596:	7bfb      	ldrb	r3, [r7, #15]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d167      	bne.n	800566c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800559c:	4b36      	ldr	r3, [pc, #216]	@ (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a35      	ldr	r2, [pc, #212]	@ (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055a8:	f7fd fb64 	bl	8002c74 <HAL_GetTick>
 80055ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055ae:	e009      	b.n	80055c4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80055b0:	f7fd fb60 	bl	8002c74 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d902      	bls.n	80055c4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	73fb      	strb	r3, [r7, #15]
        break;
 80055c2:	e005      	b.n	80055d0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80055c4:	4b2c      	ldr	r3, [pc, #176]	@ (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1ef      	bne.n	80055b0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80055d0:	7bfb      	ldrb	r3, [r7, #15]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d14a      	bne.n	800566c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d111      	bne.n	8005600 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80055dc:	4b26      	ldr	r3, [pc, #152]	@ (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055de:	695b      	ldr	r3, [r3, #20]
 80055e0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80055e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	6892      	ldr	r2, [r2, #8]
 80055ec:	0211      	lsls	r1, r2, #8
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	68d2      	ldr	r2, [r2, #12]
 80055f2:	0912      	lsrs	r2, r2, #4
 80055f4:	0452      	lsls	r2, r2, #17
 80055f6:	430a      	orrs	r2, r1
 80055f8:	491f      	ldr	r1, [pc, #124]	@ (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	614b      	str	r3, [r1, #20]
 80055fe:	e011      	b.n	8005624 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005600:	4b1d      	ldr	r3, [pc, #116]	@ (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005608:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	6892      	ldr	r2, [r2, #8]
 8005610:	0211      	lsls	r1, r2, #8
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	6912      	ldr	r2, [r2, #16]
 8005616:	0852      	lsrs	r2, r2, #1
 8005618:	3a01      	subs	r2, #1
 800561a:	0652      	lsls	r2, r2, #25
 800561c:	430a      	orrs	r2, r1
 800561e:	4916      	ldr	r1, [pc, #88]	@ (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005620:	4313      	orrs	r3, r2
 8005622:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005624:	4b14      	ldr	r3, [pc, #80]	@ (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a13      	ldr	r2, [pc, #76]	@ (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 800562a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800562e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005630:	f7fd fb20 	bl	8002c74 <HAL_GetTick>
 8005634:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005636:	e009      	b.n	800564c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005638:	f7fd fb1c 	bl	8002c74 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	2b02      	cmp	r3, #2
 8005644:	d902      	bls.n	800564c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005646:	2303      	movs	r3, #3
 8005648:	73fb      	strb	r3, [r7, #15]
          break;
 800564a:	e005      	b.n	8005658 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800564c:	4b0a      	ldr	r3, [pc, #40]	@ (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d0ef      	beq.n	8005638 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005658:	7bfb      	ldrb	r3, [r7, #15]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d106      	bne.n	800566c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800565e:	4b06      	ldr	r3, [pc, #24]	@ (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005660:	695a      	ldr	r2, [r3, #20]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	4904      	ldr	r1, [pc, #16]	@ (8005678 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005668:	4313      	orrs	r3, r2
 800566a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800566c:	7bfb      	ldrb	r3, [r7, #15]
}
 800566e:	4618      	mov	r0, r3
 8005670:	3710      	adds	r7, #16
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	40021000 	.word	0x40021000

0800567c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e049      	b.n	8005722 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005694:	b2db      	uxtb	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d106      	bne.n	80056a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7fc fdea 	bl	800227c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2202      	movs	r2, #2
 80056ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	3304      	adds	r3, #4
 80056b8:	4619      	mov	r1, r3
 80056ba:	4610      	mov	r0, r2
 80056bc:	f000 fec0 	bl	8006440 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3708      	adds	r7, #8
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}
	...

0800572c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d109      	bne.n	8005750 <HAL_TIM_PWM_Start+0x24>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b01      	cmp	r3, #1
 8005746:	bf14      	ite	ne
 8005748:	2301      	movne	r3, #1
 800574a:	2300      	moveq	r3, #0
 800574c:	b2db      	uxtb	r3, r3
 800574e:	e03c      	b.n	80057ca <HAL_TIM_PWM_Start+0x9e>
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	2b04      	cmp	r3, #4
 8005754:	d109      	bne.n	800576a <HAL_TIM_PWM_Start+0x3e>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b01      	cmp	r3, #1
 8005760:	bf14      	ite	ne
 8005762:	2301      	movne	r3, #1
 8005764:	2300      	moveq	r3, #0
 8005766:	b2db      	uxtb	r3, r3
 8005768:	e02f      	b.n	80057ca <HAL_TIM_PWM_Start+0x9e>
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2b08      	cmp	r3, #8
 800576e:	d109      	bne.n	8005784 <HAL_TIM_PWM_Start+0x58>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b01      	cmp	r3, #1
 800577a:	bf14      	ite	ne
 800577c:	2301      	movne	r3, #1
 800577e:	2300      	moveq	r3, #0
 8005780:	b2db      	uxtb	r3, r3
 8005782:	e022      	b.n	80057ca <HAL_TIM_PWM_Start+0x9e>
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	2b0c      	cmp	r3, #12
 8005788:	d109      	bne.n	800579e <HAL_TIM_PWM_Start+0x72>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b01      	cmp	r3, #1
 8005794:	bf14      	ite	ne
 8005796:	2301      	movne	r3, #1
 8005798:	2300      	moveq	r3, #0
 800579a:	b2db      	uxtb	r3, r3
 800579c:	e015      	b.n	80057ca <HAL_TIM_PWM_Start+0x9e>
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	2b10      	cmp	r3, #16
 80057a2:	d109      	bne.n	80057b8 <HAL_TIM_PWM_Start+0x8c>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	bf14      	ite	ne
 80057b0:	2301      	movne	r3, #1
 80057b2:	2300      	moveq	r3, #0
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	e008      	b.n	80057ca <HAL_TIM_PWM_Start+0x9e>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	bf14      	ite	ne
 80057c4:	2301      	movne	r3, #1
 80057c6:	2300      	moveq	r3, #0
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d001      	beq.n	80057d2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e09c      	b.n	800590c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d104      	bne.n	80057e2 <HAL_TIM_PWM_Start+0xb6>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2202      	movs	r2, #2
 80057dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057e0:	e023      	b.n	800582a <HAL_TIM_PWM_Start+0xfe>
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b04      	cmp	r3, #4
 80057e6:	d104      	bne.n	80057f2 <HAL_TIM_PWM_Start+0xc6>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2202      	movs	r2, #2
 80057ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057f0:	e01b      	b.n	800582a <HAL_TIM_PWM_Start+0xfe>
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2b08      	cmp	r3, #8
 80057f6:	d104      	bne.n	8005802 <HAL_TIM_PWM_Start+0xd6>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2202      	movs	r2, #2
 80057fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005800:	e013      	b.n	800582a <HAL_TIM_PWM_Start+0xfe>
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	2b0c      	cmp	r3, #12
 8005806:	d104      	bne.n	8005812 <HAL_TIM_PWM_Start+0xe6>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2202      	movs	r2, #2
 800580c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005810:	e00b      	b.n	800582a <HAL_TIM_PWM_Start+0xfe>
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b10      	cmp	r3, #16
 8005816:	d104      	bne.n	8005822 <HAL_TIM_PWM_Start+0xf6>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005820:	e003      	b.n	800582a <HAL_TIM_PWM_Start+0xfe>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2202      	movs	r2, #2
 8005826:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2201      	movs	r2, #1
 8005830:	6839      	ldr	r1, [r7, #0]
 8005832:	4618      	mov	r0, r3
 8005834:	f001 faa4 	bl	8006d80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a35      	ldr	r2, [pc, #212]	@ (8005914 <HAL_TIM_PWM_Start+0x1e8>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d013      	beq.n	800586a <HAL_TIM_PWM_Start+0x13e>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a34      	ldr	r2, [pc, #208]	@ (8005918 <HAL_TIM_PWM_Start+0x1ec>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d00e      	beq.n	800586a <HAL_TIM_PWM_Start+0x13e>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a32      	ldr	r2, [pc, #200]	@ (800591c <HAL_TIM_PWM_Start+0x1f0>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d009      	beq.n	800586a <HAL_TIM_PWM_Start+0x13e>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a31      	ldr	r2, [pc, #196]	@ (8005920 <HAL_TIM_PWM_Start+0x1f4>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d004      	beq.n	800586a <HAL_TIM_PWM_Start+0x13e>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a2f      	ldr	r2, [pc, #188]	@ (8005924 <HAL_TIM_PWM_Start+0x1f8>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d101      	bne.n	800586e <HAL_TIM_PWM_Start+0x142>
 800586a:	2301      	movs	r3, #1
 800586c:	e000      	b.n	8005870 <HAL_TIM_PWM_Start+0x144>
 800586e:	2300      	movs	r3, #0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d007      	beq.n	8005884 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005882:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a22      	ldr	r2, [pc, #136]	@ (8005914 <HAL_TIM_PWM_Start+0x1e8>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d01d      	beq.n	80058ca <HAL_TIM_PWM_Start+0x19e>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005896:	d018      	beq.n	80058ca <HAL_TIM_PWM_Start+0x19e>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a22      	ldr	r2, [pc, #136]	@ (8005928 <HAL_TIM_PWM_Start+0x1fc>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d013      	beq.n	80058ca <HAL_TIM_PWM_Start+0x19e>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a21      	ldr	r2, [pc, #132]	@ (800592c <HAL_TIM_PWM_Start+0x200>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d00e      	beq.n	80058ca <HAL_TIM_PWM_Start+0x19e>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a1f      	ldr	r2, [pc, #124]	@ (8005930 <HAL_TIM_PWM_Start+0x204>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d009      	beq.n	80058ca <HAL_TIM_PWM_Start+0x19e>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a17      	ldr	r2, [pc, #92]	@ (8005918 <HAL_TIM_PWM_Start+0x1ec>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d004      	beq.n	80058ca <HAL_TIM_PWM_Start+0x19e>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a15      	ldr	r2, [pc, #84]	@ (800591c <HAL_TIM_PWM_Start+0x1f0>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d115      	bne.n	80058f6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	689a      	ldr	r2, [r3, #8]
 80058d0:	4b18      	ldr	r3, [pc, #96]	@ (8005934 <HAL_TIM_PWM_Start+0x208>)
 80058d2:	4013      	ands	r3, r2
 80058d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2b06      	cmp	r3, #6
 80058da:	d015      	beq.n	8005908 <HAL_TIM_PWM_Start+0x1dc>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80058e2:	d011      	beq.n	8005908 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f042 0201 	orr.w	r2, r2, #1
 80058f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058f4:	e008      	b.n	8005908 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f042 0201 	orr.w	r2, r2, #1
 8005904:	601a      	str	r2, [r3, #0]
 8005906:	e000      	b.n	800590a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005908:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3710      	adds	r7, #16
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	40012c00 	.word	0x40012c00
 8005918:	40013400 	.word	0x40013400
 800591c:	40014000 	.word	0x40014000
 8005920:	40014400 	.word	0x40014400
 8005924:	40014800 	.word	0x40014800
 8005928:	40000400 	.word	0x40000400
 800592c:	40000800 	.word	0x40000800
 8005930:	40000c00 	.word	0x40000c00
 8005934:	00010007 	.word	0x00010007

08005938 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d101      	bne.n	800594a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e049      	b.n	80059de <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005950:	b2db      	uxtb	r3, r3
 8005952:	2b00      	cmp	r3, #0
 8005954:	d106      	bne.n	8005964 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7fc fcb0 	bl	80022c4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2202      	movs	r2, #2
 8005968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	3304      	adds	r3, #4
 8005974:	4619      	mov	r1, r3
 8005976:	4610      	mov	r0, r2
 8005978:	f000 fd62 	bl	8006440 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059dc:	2300      	movs	r3, #0
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3708      	adds	r7, #8
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
	...

080059e8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059f2:	2300      	movs	r3, #0
 80059f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d104      	bne.n	8005a06 <HAL_TIM_IC_Start_IT+0x1e>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	e023      	b.n	8005a4e <HAL_TIM_IC_Start_IT+0x66>
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2b04      	cmp	r3, #4
 8005a0a:	d104      	bne.n	8005a16 <HAL_TIM_IC_Start_IT+0x2e>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	e01b      	b.n	8005a4e <HAL_TIM_IC_Start_IT+0x66>
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	2b08      	cmp	r3, #8
 8005a1a:	d104      	bne.n	8005a26 <HAL_TIM_IC_Start_IT+0x3e>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	e013      	b.n	8005a4e <HAL_TIM_IC_Start_IT+0x66>
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2b0c      	cmp	r3, #12
 8005a2a:	d104      	bne.n	8005a36 <HAL_TIM_IC_Start_IT+0x4e>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	e00b      	b.n	8005a4e <HAL_TIM_IC_Start_IT+0x66>
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	2b10      	cmp	r3, #16
 8005a3a:	d104      	bne.n	8005a46 <HAL_TIM_IC_Start_IT+0x5e>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	e003      	b.n	8005a4e <HAL_TIM_IC_Start_IT+0x66>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d104      	bne.n	8005a60 <HAL_TIM_IC_Start_IT+0x78>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	e013      	b.n	8005a88 <HAL_TIM_IC_Start_IT+0xa0>
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	2b04      	cmp	r3, #4
 8005a64:	d104      	bne.n	8005a70 <HAL_TIM_IC_Start_IT+0x88>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	e00b      	b.n	8005a88 <HAL_TIM_IC_Start_IT+0xa0>
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	2b08      	cmp	r3, #8
 8005a74:	d104      	bne.n	8005a80 <HAL_TIM_IC_Start_IT+0x98>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	e003      	b.n	8005a88 <HAL_TIM_IC_Start_IT+0xa0>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a8a:	7bbb      	ldrb	r3, [r7, #14]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d102      	bne.n	8005a96 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a90:	7b7b      	ldrb	r3, [r7, #13]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d001      	beq.n	8005a9a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e0dd      	b.n	8005c56 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d104      	bne.n	8005aaa <HAL_TIM_IC_Start_IT+0xc2>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005aa8:	e023      	b.n	8005af2 <HAL_TIM_IC_Start_IT+0x10a>
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	2b04      	cmp	r3, #4
 8005aae:	d104      	bne.n	8005aba <HAL_TIM_IC_Start_IT+0xd2>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ab8:	e01b      	b.n	8005af2 <HAL_TIM_IC_Start_IT+0x10a>
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	2b08      	cmp	r3, #8
 8005abe:	d104      	bne.n	8005aca <HAL_TIM_IC_Start_IT+0xe2>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2202      	movs	r2, #2
 8005ac4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ac8:	e013      	b.n	8005af2 <HAL_TIM_IC_Start_IT+0x10a>
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	2b0c      	cmp	r3, #12
 8005ace:	d104      	bne.n	8005ada <HAL_TIM_IC_Start_IT+0xf2>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005ad8:	e00b      	b.n	8005af2 <HAL_TIM_IC_Start_IT+0x10a>
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	2b10      	cmp	r3, #16
 8005ade:	d104      	bne.n	8005aea <HAL_TIM_IC_Start_IT+0x102>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2202      	movs	r2, #2
 8005ae4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ae8:	e003      	b.n	8005af2 <HAL_TIM_IC_Start_IT+0x10a>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2202      	movs	r2, #2
 8005aee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d104      	bne.n	8005b02 <HAL_TIM_IC_Start_IT+0x11a>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2202      	movs	r2, #2
 8005afc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b00:	e013      	b.n	8005b2a <HAL_TIM_IC_Start_IT+0x142>
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	2b04      	cmp	r3, #4
 8005b06:	d104      	bne.n	8005b12 <HAL_TIM_IC_Start_IT+0x12a>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2202      	movs	r2, #2
 8005b0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b10:	e00b      	b.n	8005b2a <HAL_TIM_IC_Start_IT+0x142>
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2b08      	cmp	r3, #8
 8005b16:	d104      	bne.n	8005b22 <HAL_TIM_IC_Start_IT+0x13a>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005b20:	e003      	b.n	8005b2a <HAL_TIM_IC_Start_IT+0x142>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2202      	movs	r2, #2
 8005b26:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	2b0c      	cmp	r3, #12
 8005b2e:	d841      	bhi.n	8005bb4 <HAL_TIM_IC_Start_IT+0x1cc>
 8005b30:	a201      	add	r2, pc, #4	@ (adr r2, 8005b38 <HAL_TIM_IC_Start_IT+0x150>)
 8005b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b36:	bf00      	nop
 8005b38:	08005b6d 	.word	0x08005b6d
 8005b3c:	08005bb5 	.word	0x08005bb5
 8005b40:	08005bb5 	.word	0x08005bb5
 8005b44:	08005bb5 	.word	0x08005bb5
 8005b48:	08005b7f 	.word	0x08005b7f
 8005b4c:	08005bb5 	.word	0x08005bb5
 8005b50:	08005bb5 	.word	0x08005bb5
 8005b54:	08005bb5 	.word	0x08005bb5
 8005b58:	08005b91 	.word	0x08005b91
 8005b5c:	08005bb5 	.word	0x08005bb5
 8005b60:	08005bb5 	.word	0x08005bb5
 8005b64:	08005bb5 	.word	0x08005bb5
 8005b68:	08005ba3 	.word	0x08005ba3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68da      	ldr	r2, [r3, #12]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f042 0202 	orr.w	r2, r2, #2
 8005b7a:	60da      	str	r2, [r3, #12]
      break;
 8005b7c:	e01d      	b.n	8005bba <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68da      	ldr	r2, [r3, #12]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f042 0204 	orr.w	r2, r2, #4
 8005b8c:	60da      	str	r2, [r3, #12]
      break;
 8005b8e:	e014      	b.n	8005bba <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68da      	ldr	r2, [r3, #12]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f042 0208 	orr.w	r2, r2, #8
 8005b9e:	60da      	str	r2, [r3, #12]
      break;
 8005ba0:	e00b      	b.n	8005bba <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	68da      	ldr	r2, [r3, #12]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f042 0210 	orr.w	r2, r2, #16
 8005bb0:	60da      	str	r2, [r3, #12]
      break;
 8005bb2:	e002      	b.n	8005bba <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	73fb      	strb	r3, [r7, #15]
      break;
 8005bb8:	bf00      	nop
  }

  if (status == HAL_OK)
 8005bba:	7bfb      	ldrb	r3, [r7, #15]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d149      	bne.n	8005c54 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	6839      	ldr	r1, [r7, #0]
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f001 f8d9 	bl	8006d80 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a23      	ldr	r2, [pc, #140]	@ (8005c60 <HAL_TIM_IC_Start_IT+0x278>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d01d      	beq.n	8005c14 <HAL_TIM_IC_Start_IT+0x22c>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005be0:	d018      	beq.n	8005c14 <HAL_TIM_IC_Start_IT+0x22c>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a1f      	ldr	r2, [pc, #124]	@ (8005c64 <HAL_TIM_IC_Start_IT+0x27c>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d013      	beq.n	8005c14 <HAL_TIM_IC_Start_IT+0x22c>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a1d      	ldr	r2, [pc, #116]	@ (8005c68 <HAL_TIM_IC_Start_IT+0x280>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d00e      	beq.n	8005c14 <HAL_TIM_IC_Start_IT+0x22c>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a1c      	ldr	r2, [pc, #112]	@ (8005c6c <HAL_TIM_IC_Start_IT+0x284>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d009      	beq.n	8005c14 <HAL_TIM_IC_Start_IT+0x22c>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a1a      	ldr	r2, [pc, #104]	@ (8005c70 <HAL_TIM_IC_Start_IT+0x288>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d004      	beq.n	8005c14 <HAL_TIM_IC_Start_IT+0x22c>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a19      	ldr	r2, [pc, #100]	@ (8005c74 <HAL_TIM_IC_Start_IT+0x28c>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d115      	bne.n	8005c40 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689a      	ldr	r2, [r3, #8]
 8005c1a:	4b17      	ldr	r3, [pc, #92]	@ (8005c78 <HAL_TIM_IC_Start_IT+0x290>)
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	2b06      	cmp	r3, #6
 8005c24:	d015      	beq.n	8005c52 <HAL_TIM_IC_Start_IT+0x26a>
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c2c:	d011      	beq.n	8005c52 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f042 0201 	orr.w	r2, r2, #1
 8005c3c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c3e:	e008      	b.n	8005c52 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f042 0201 	orr.w	r2, r2, #1
 8005c4e:	601a      	str	r2, [r3, #0]
 8005c50:	e000      	b.n	8005c54 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c52:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	40012c00 	.word	0x40012c00
 8005c64:	40000400 	.word	0x40000400
 8005c68:	40000800 	.word	0x40000800
 8005c6c:	40000c00 	.word	0x40000c00
 8005c70:	40013400 	.word	0x40013400
 8005c74:	40014000 	.word	0x40014000
 8005c78:	00010007 	.word	0x00010007

08005c7c <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c86:	2300      	movs	r3, #0
 8005c88:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b0c      	cmp	r3, #12
 8005c8e:	d841      	bhi.n	8005d14 <HAL_TIM_IC_Stop_IT+0x98>
 8005c90:	a201      	add	r2, pc, #4	@ (adr r2, 8005c98 <HAL_TIM_IC_Stop_IT+0x1c>)
 8005c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c96:	bf00      	nop
 8005c98:	08005ccd 	.word	0x08005ccd
 8005c9c:	08005d15 	.word	0x08005d15
 8005ca0:	08005d15 	.word	0x08005d15
 8005ca4:	08005d15 	.word	0x08005d15
 8005ca8:	08005cdf 	.word	0x08005cdf
 8005cac:	08005d15 	.word	0x08005d15
 8005cb0:	08005d15 	.word	0x08005d15
 8005cb4:	08005d15 	.word	0x08005d15
 8005cb8:	08005cf1 	.word	0x08005cf1
 8005cbc:	08005d15 	.word	0x08005d15
 8005cc0:	08005d15 	.word	0x08005d15
 8005cc4:	08005d15 	.word	0x08005d15
 8005cc8:	08005d03 	.word	0x08005d03
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68da      	ldr	r2, [r3, #12]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f022 0202 	bic.w	r2, r2, #2
 8005cda:	60da      	str	r2, [r3, #12]
      break;
 8005cdc:	e01d      	b.n	8005d1a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68da      	ldr	r2, [r3, #12]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f022 0204 	bic.w	r2, r2, #4
 8005cec:	60da      	str	r2, [r3, #12]
      break;
 8005cee:	e014      	b.n	8005d1a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68da      	ldr	r2, [r3, #12]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f022 0208 	bic.w	r2, r2, #8
 8005cfe:	60da      	str	r2, [r3, #12]
      break;
 8005d00:	e00b      	b.n	8005d1a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68da      	ldr	r2, [r3, #12]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f022 0210 	bic.w	r2, r2, #16
 8005d10:	60da      	str	r2, [r3, #12]
      break;
 8005d12:	e002      	b.n	8005d1a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	73fb      	strb	r3, [r7, #15]
      break;
 8005d18:	bf00      	nop
  }

  if (status == HAL_OK)
 8005d1a:	7bfb      	ldrb	r3, [r7, #15]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d166      	bne.n	8005dee <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2200      	movs	r2, #0
 8005d26:	6839      	ldr	r1, [r7, #0]
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f001 f829 	bl	8006d80 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	6a1a      	ldr	r2, [r3, #32]
 8005d34:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005d38:	4013      	ands	r3, r2
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10f      	bne.n	8005d5e <HAL_TIM_IC_Stop_IT+0xe2>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6a1a      	ldr	r2, [r3, #32]
 8005d44:	f240 4344 	movw	r3, #1092	@ 0x444
 8005d48:	4013      	ands	r3, r2
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d107      	bne.n	8005d5e <HAL_TIM_IC_Stop_IT+0xe2>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f022 0201 	bic.w	r2, r2, #1
 8005d5c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d104      	bne.n	8005d6e <HAL_TIM_IC_Stop_IT+0xf2>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d6c:	e023      	b.n	8005db6 <HAL_TIM_IC_Stop_IT+0x13a>
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	2b04      	cmp	r3, #4
 8005d72:	d104      	bne.n	8005d7e <HAL_TIM_IC_Stop_IT+0x102>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d7c:	e01b      	b.n	8005db6 <HAL_TIM_IC_Stop_IT+0x13a>
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	2b08      	cmp	r3, #8
 8005d82:	d104      	bne.n	8005d8e <HAL_TIM_IC_Stop_IT+0x112>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d8c:	e013      	b.n	8005db6 <HAL_TIM_IC_Stop_IT+0x13a>
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b0c      	cmp	r3, #12
 8005d92:	d104      	bne.n	8005d9e <HAL_TIM_IC_Stop_IT+0x122>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005d9c:	e00b      	b.n	8005db6 <HAL_TIM_IC_Stop_IT+0x13a>
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	2b10      	cmp	r3, #16
 8005da2:	d104      	bne.n	8005dae <HAL_TIM_IC_Stop_IT+0x132>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005dac:	e003      	b.n	8005db6 <HAL_TIM_IC_Stop_IT+0x13a>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d104      	bne.n	8005dc6 <HAL_TIM_IC_Stop_IT+0x14a>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005dc4:	e013      	b.n	8005dee <HAL_TIM_IC_Stop_IT+0x172>
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	2b04      	cmp	r3, #4
 8005dca:	d104      	bne.n	8005dd6 <HAL_TIM_IC_Stop_IT+0x15a>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005dd4:	e00b      	b.n	8005dee <HAL_TIM_IC_Stop_IT+0x172>
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	2b08      	cmp	r3, #8
 8005dda:	d104      	bne.n	8005de6 <HAL_TIM_IC_Stop_IT+0x16a>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005de4:	e003      	b.n	8005dee <HAL_TIM_IC_Stop_IT+0x172>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

  /* Return function status */
  return status;
 8005dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3710      	adds	r7, #16
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	f003 0302 	and.w	r3, r3, #2
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d020      	beq.n	8005e5c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d01b      	beq.n	8005e5c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f06f 0202 	mvn.w	r2, #2
 8005e2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	f003 0303 	and.w	r3, r3, #3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d003      	beq.n	8005e4a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f7fb fd5c 	bl	8001900 <HAL_TIM_IC_CaptureCallback>
 8005e48:	e005      	b.n	8005e56 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 fada 	bl	8006404 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 fae1 	bl	8006418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	f003 0304 	and.w	r3, r3, #4
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d020      	beq.n	8005ea8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f003 0304 	and.w	r3, r3, #4
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d01b      	beq.n	8005ea8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f06f 0204 	mvn.w	r2, #4
 8005e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d003      	beq.n	8005e96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f7fb fd36 	bl	8001900 <HAL_TIM_IC_CaptureCallback>
 8005e94:	e005      	b.n	8005ea2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 fab4 	bl	8006404 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 fabb 	bl	8006418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	f003 0308 	and.w	r3, r3, #8
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d020      	beq.n	8005ef4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f003 0308 	and.w	r3, r3, #8
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d01b      	beq.n	8005ef4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f06f 0208 	mvn.w	r2, #8
 8005ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2204      	movs	r2, #4
 8005eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	69db      	ldr	r3, [r3, #28]
 8005ed2:	f003 0303 	and.w	r3, r3, #3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d003      	beq.n	8005ee2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f7fb fd10 	bl	8001900 <HAL_TIM_IC_CaptureCallback>
 8005ee0:	e005      	b.n	8005eee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 fa8e 	bl	8006404 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 fa95 	bl	8006418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	f003 0310 	and.w	r3, r3, #16
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d020      	beq.n	8005f40 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f003 0310 	and.w	r3, r3, #16
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d01b      	beq.n	8005f40 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f06f 0210 	mvn.w	r2, #16
 8005f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2208      	movs	r2, #8
 8005f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	69db      	ldr	r3, [r3, #28]
 8005f1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d003      	beq.n	8005f2e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7fb fcea 	bl	8001900 <HAL_TIM_IC_CaptureCallback>
 8005f2c:	e005      	b.n	8005f3a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 fa68 	bl	8006404 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 fa6f 	bl	8006418 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00c      	beq.n	8005f64 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f003 0301 	and.w	r3, r3, #1
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d007      	beq.n	8005f64 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f06f 0201 	mvn.w	r2, #1
 8005f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 fa46 	bl	80063f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d104      	bne.n	8005f78 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00c      	beq.n	8005f92 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d007      	beq.n	8005f92 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 ffaf 	bl	8006ef0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00c      	beq.n	8005fb6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d007      	beq.n	8005fb6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 ffa7 	bl	8006f04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00c      	beq.n	8005fda <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d007      	beq.n	8005fda <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005fd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 fa29 	bl	800642c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	f003 0320 	and.w	r3, r3, #32
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00c      	beq.n	8005ffe <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f003 0320 	and.w	r3, r3, #32
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d007      	beq.n	8005ffe <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f06f 0220 	mvn.w	r2, #32
 8005ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 ff6f 	bl	8006edc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ffe:	bf00      	nop
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b086      	sub	sp, #24
 800600a:	af00      	add	r7, sp, #0
 800600c:	60f8      	str	r0, [r7, #12]
 800600e:	60b9      	str	r1, [r7, #8]
 8006010:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006012:	2300      	movs	r3, #0
 8006014:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800601c:	2b01      	cmp	r3, #1
 800601e:	d101      	bne.n	8006024 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006020:	2302      	movs	r3, #2
 8006022:	e088      	b.n	8006136 <HAL_TIM_IC_ConfigChannel+0x130>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d11b      	bne.n	800606a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8006042:	f000 fd79 	bl	8006b38 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	699a      	ldr	r2, [r3, #24]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f022 020c 	bic.w	r2, r2, #12
 8006054:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	6999      	ldr	r1, [r3, #24]
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	689a      	ldr	r2, [r3, #8]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	430a      	orrs	r2, r1
 8006066:	619a      	str	r2, [r3, #24]
 8006068:	e060      	b.n	800612c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2b04      	cmp	r3, #4
 800606e:	d11c      	bne.n	80060aa <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8006080:	f000 fdc8 	bl	8006c14 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	699a      	ldr	r2, [r3, #24]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006092:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6999      	ldr	r1, [r3, #24]
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	021a      	lsls	r2, r3, #8
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	430a      	orrs	r2, r1
 80060a6:	619a      	str	r2, [r3, #24]
 80060a8:	e040      	b.n	800612c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2b08      	cmp	r3, #8
 80060ae:	d11b      	bne.n	80060e8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80060c0:	f000 fde5 	bl	8006c8e <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	69da      	ldr	r2, [r3, #28]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f022 020c 	bic.w	r2, r2, #12
 80060d2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	69d9      	ldr	r1, [r3, #28]
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	689a      	ldr	r2, [r3, #8]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	430a      	orrs	r2, r1
 80060e4:	61da      	str	r2, [r3, #28]
 80060e6:	e021      	b.n	800612c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b0c      	cmp	r3, #12
 80060ec:	d11c      	bne.n	8006128 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80060fe:	f000 fe02 	bl	8006d06 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	69da      	ldr	r2, [r3, #28]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006110:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	69d9      	ldr	r1, [r3, #28]
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	021a      	lsls	r2, r3, #8
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	430a      	orrs	r2, r1
 8006124:	61da      	str	r2, [r3, #28]
 8006126:	e001      	b.n	800612c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006134:	7dfb      	ldrb	r3, [r7, #23]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3718      	adds	r7, #24
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
	...

08006140 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800614c:	2300      	movs	r3, #0
 800614e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006156:	2b01      	cmp	r3, #1
 8006158:	d101      	bne.n	800615e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800615a:	2302      	movs	r3, #2
 800615c:	e0ff      	b.n	800635e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2b14      	cmp	r3, #20
 800616a:	f200 80f0 	bhi.w	800634e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800616e:	a201      	add	r2, pc, #4	@ (adr r2, 8006174 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006174:	080061c9 	.word	0x080061c9
 8006178:	0800634f 	.word	0x0800634f
 800617c:	0800634f 	.word	0x0800634f
 8006180:	0800634f 	.word	0x0800634f
 8006184:	08006209 	.word	0x08006209
 8006188:	0800634f 	.word	0x0800634f
 800618c:	0800634f 	.word	0x0800634f
 8006190:	0800634f 	.word	0x0800634f
 8006194:	0800624b 	.word	0x0800624b
 8006198:	0800634f 	.word	0x0800634f
 800619c:	0800634f 	.word	0x0800634f
 80061a0:	0800634f 	.word	0x0800634f
 80061a4:	0800628b 	.word	0x0800628b
 80061a8:	0800634f 	.word	0x0800634f
 80061ac:	0800634f 	.word	0x0800634f
 80061b0:	0800634f 	.word	0x0800634f
 80061b4:	080062cd 	.word	0x080062cd
 80061b8:	0800634f 	.word	0x0800634f
 80061bc:	0800634f 	.word	0x0800634f
 80061c0:	0800634f 	.word	0x0800634f
 80061c4:	0800630d 	.word	0x0800630d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68b9      	ldr	r1, [r7, #8]
 80061ce:	4618      	mov	r0, r3
 80061d0:	f000 f9dc 	bl	800658c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	699a      	ldr	r2, [r3, #24]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f042 0208 	orr.w	r2, r2, #8
 80061e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	699a      	ldr	r2, [r3, #24]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f022 0204 	bic.w	r2, r2, #4
 80061f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	6999      	ldr	r1, [r3, #24]
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	691a      	ldr	r2, [r3, #16]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	430a      	orrs	r2, r1
 8006204:	619a      	str	r2, [r3, #24]
      break;
 8006206:	e0a5      	b.n	8006354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68b9      	ldr	r1, [r7, #8]
 800620e:	4618      	mov	r0, r3
 8006210:	f000 fa4c 	bl	80066ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	699a      	ldr	r2, [r3, #24]
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006222:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	699a      	ldr	r2, [r3, #24]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006232:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6999      	ldr	r1, [r3, #24]
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	021a      	lsls	r2, r3, #8
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	430a      	orrs	r2, r1
 8006246:	619a      	str	r2, [r3, #24]
      break;
 8006248:	e084      	b.n	8006354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	68b9      	ldr	r1, [r7, #8]
 8006250:	4618      	mov	r0, r3
 8006252:	f000 fab5 	bl	80067c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	69da      	ldr	r2, [r3, #28]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f042 0208 	orr.w	r2, r2, #8
 8006264:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	69da      	ldr	r2, [r3, #28]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f022 0204 	bic.w	r2, r2, #4
 8006274:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	69d9      	ldr	r1, [r3, #28]
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	691a      	ldr	r2, [r3, #16]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	430a      	orrs	r2, r1
 8006286:	61da      	str	r2, [r3, #28]
      break;
 8006288:	e064      	b.n	8006354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68b9      	ldr	r1, [r7, #8]
 8006290:	4618      	mov	r0, r3
 8006292:	f000 fb1d 	bl	80068d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	69da      	ldr	r2, [r3, #28]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	69da      	ldr	r2, [r3, #28]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	69d9      	ldr	r1, [r3, #28]
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	021a      	lsls	r2, r3, #8
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	430a      	orrs	r2, r1
 80062c8:	61da      	str	r2, [r3, #28]
      break;
 80062ca:	e043      	b.n	8006354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68b9      	ldr	r1, [r7, #8]
 80062d2:	4618      	mov	r0, r3
 80062d4:	f000 fb66 	bl	80069a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f042 0208 	orr.w	r2, r2, #8
 80062e6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f022 0204 	bic.w	r2, r2, #4
 80062f6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	691a      	ldr	r2, [r3, #16]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	430a      	orrs	r2, r1
 8006308:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800630a:	e023      	b.n	8006354 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68b9      	ldr	r1, [r7, #8]
 8006312:	4618      	mov	r0, r3
 8006314:	f000 fbaa 	bl	8006a6c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006326:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006336:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	021a      	lsls	r2, r3, #8
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	430a      	orrs	r2, r1
 800634a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800634c:	e002      	b.n	8006354 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	75fb      	strb	r3, [r7, #23]
      break;
 8006352:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800635c:	7dfb      	ldrb	r3, [r7, #23]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3718      	adds	r7, #24
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop

08006368 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006368:	b480      	push	{r7}
 800636a:	b085      	sub	sp, #20
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
 8006370:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006372:	2300      	movs	r3, #0
 8006374:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	2b0c      	cmp	r3, #12
 800637a:	d831      	bhi.n	80063e0 <HAL_TIM_ReadCapturedValue+0x78>
 800637c:	a201      	add	r2, pc, #4	@ (adr r2, 8006384 <HAL_TIM_ReadCapturedValue+0x1c>)
 800637e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006382:	bf00      	nop
 8006384:	080063b9 	.word	0x080063b9
 8006388:	080063e1 	.word	0x080063e1
 800638c:	080063e1 	.word	0x080063e1
 8006390:	080063e1 	.word	0x080063e1
 8006394:	080063c3 	.word	0x080063c3
 8006398:	080063e1 	.word	0x080063e1
 800639c:	080063e1 	.word	0x080063e1
 80063a0:	080063e1 	.word	0x080063e1
 80063a4:	080063cd 	.word	0x080063cd
 80063a8:	080063e1 	.word	0x080063e1
 80063ac:	080063e1 	.word	0x080063e1
 80063b0:	080063e1 	.word	0x080063e1
 80063b4:	080063d7 	.word	0x080063d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063be:	60fb      	str	r3, [r7, #12]

      break;
 80063c0:	e00f      	b.n	80063e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c8:	60fb      	str	r3, [r7, #12]

      break;
 80063ca:	e00a      	b.n	80063e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063d2:	60fb      	str	r3, [r7, #12]

      break;
 80063d4:	e005      	b.n	80063e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063dc:	60fb      	str	r3, [r7, #12]

      break;
 80063de:	e000      	b.n	80063e2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80063e0:	bf00      	nop
  }

  return tmpreg;
 80063e2:	68fb      	ldr	r3, [r7, #12]
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3714      	adds	r7, #20
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80063f8:	bf00      	nop
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800640c:	bf00      	nop
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006420:	bf00      	nop
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006434:	bf00      	nop
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a46      	ldr	r2, [pc, #280]	@ (800656c <TIM_Base_SetConfig+0x12c>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d013      	beq.n	8006480 <TIM_Base_SetConfig+0x40>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800645e:	d00f      	beq.n	8006480 <TIM_Base_SetConfig+0x40>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a43      	ldr	r2, [pc, #268]	@ (8006570 <TIM_Base_SetConfig+0x130>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d00b      	beq.n	8006480 <TIM_Base_SetConfig+0x40>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a42      	ldr	r2, [pc, #264]	@ (8006574 <TIM_Base_SetConfig+0x134>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d007      	beq.n	8006480 <TIM_Base_SetConfig+0x40>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a41      	ldr	r2, [pc, #260]	@ (8006578 <TIM_Base_SetConfig+0x138>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d003      	beq.n	8006480 <TIM_Base_SetConfig+0x40>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a40      	ldr	r2, [pc, #256]	@ (800657c <TIM_Base_SetConfig+0x13c>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d108      	bne.n	8006492 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006486:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	4313      	orrs	r3, r2
 8006490:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a35      	ldr	r2, [pc, #212]	@ (800656c <TIM_Base_SetConfig+0x12c>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d01f      	beq.n	80064da <TIM_Base_SetConfig+0x9a>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064a0:	d01b      	beq.n	80064da <TIM_Base_SetConfig+0x9a>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a32      	ldr	r2, [pc, #200]	@ (8006570 <TIM_Base_SetConfig+0x130>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d017      	beq.n	80064da <TIM_Base_SetConfig+0x9a>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a31      	ldr	r2, [pc, #196]	@ (8006574 <TIM_Base_SetConfig+0x134>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d013      	beq.n	80064da <TIM_Base_SetConfig+0x9a>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a30      	ldr	r2, [pc, #192]	@ (8006578 <TIM_Base_SetConfig+0x138>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d00f      	beq.n	80064da <TIM_Base_SetConfig+0x9a>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a2f      	ldr	r2, [pc, #188]	@ (800657c <TIM_Base_SetConfig+0x13c>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d00b      	beq.n	80064da <TIM_Base_SetConfig+0x9a>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a2e      	ldr	r2, [pc, #184]	@ (8006580 <TIM_Base_SetConfig+0x140>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d007      	beq.n	80064da <TIM_Base_SetConfig+0x9a>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a2d      	ldr	r2, [pc, #180]	@ (8006584 <TIM_Base_SetConfig+0x144>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d003      	beq.n	80064da <TIM_Base_SetConfig+0x9a>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a2c      	ldr	r2, [pc, #176]	@ (8006588 <TIM_Base_SetConfig+0x148>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d108      	bne.n	80064ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	689a      	ldr	r2, [r3, #8]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a16      	ldr	r2, [pc, #88]	@ (800656c <TIM_Base_SetConfig+0x12c>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d00f      	beq.n	8006538 <TIM_Base_SetConfig+0xf8>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a18      	ldr	r2, [pc, #96]	@ (800657c <TIM_Base_SetConfig+0x13c>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d00b      	beq.n	8006538 <TIM_Base_SetConfig+0xf8>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a17      	ldr	r2, [pc, #92]	@ (8006580 <TIM_Base_SetConfig+0x140>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d007      	beq.n	8006538 <TIM_Base_SetConfig+0xf8>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a16      	ldr	r2, [pc, #88]	@ (8006584 <TIM_Base_SetConfig+0x144>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d003      	beq.n	8006538 <TIM_Base_SetConfig+0xf8>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a15      	ldr	r2, [pc, #84]	@ (8006588 <TIM_Base_SetConfig+0x148>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d103      	bne.n	8006540 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	691a      	ldr	r2, [r3, #16]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	2b01      	cmp	r3, #1
 8006550:	d105      	bne.n	800655e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	f023 0201 	bic.w	r2, r3, #1
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	611a      	str	r2, [r3, #16]
  }
}
 800655e:	bf00      	nop
 8006560:	3714      	adds	r7, #20
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	40012c00 	.word	0x40012c00
 8006570:	40000400 	.word	0x40000400
 8006574:	40000800 	.word	0x40000800
 8006578:	40000c00 	.word	0x40000c00
 800657c:	40013400 	.word	0x40013400
 8006580:	40014000 	.word	0x40014000
 8006584:	40014400 	.word	0x40014400
 8006588:	40014800 	.word	0x40014800

0800658c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800658c:	b480      	push	{r7}
 800658e:	b087      	sub	sp, #28
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a1b      	ldr	r3, [r3, #32]
 800659a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a1b      	ldr	r3, [r3, #32]
 80065a0:	f023 0201 	bic.w	r2, r3, #1
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f023 0303 	bic.w	r3, r3, #3
 80065c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f023 0302 	bic.w	r3, r3, #2
 80065d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	697a      	ldr	r2, [r7, #20]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a2c      	ldr	r2, [pc, #176]	@ (8006698 <TIM_OC1_SetConfig+0x10c>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d00f      	beq.n	800660c <TIM_OC1_SetConfig+0x80>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a2b      	ldr	r2, [pc, #172]	@ (800669c <TIM_OC1_SetConfig+0x110>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d00b      	beq.n	800660c <TIM_OC1_SetConfig+0x80>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a2a      	ldr	r2, [pc, #168]	@ (80066a0 <TIM_OC1_SetConfig+0x114>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d007      	beq.n	800660c <TIM_OC1_SetConfig+0x80>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4a29      	ldr	r2, [pc, #164]	@ (80066a4 <TIM_OC1_SetConfig+0x118>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d003      	beq.n	800660c <TIM_OC1_SetConfig+0x80>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a28      	ldr	r2, [pc, #160]	@ (80066a8 <TIM_OC1_SetConfig+0x11c>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d10c      	bne.n	8006626 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	f023 0308 	bic.w	r3, r3, #8
 8006612:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	4313      	orrs	r3, r2
 800661c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	f023 0304 	bic.w	r3, r3, #4
 8006624:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a1b      	ldr	r2, [pc, #108]	@ (8006698 <TIM_OC1_SetConfig+0x10c>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d00f      	beq.n	800664e <TIM_OC1_SetConfig+0xc2>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a1a      	ldr	r2, [pc, #104]	@ (800669c <TIM_OC1_SetConfig+0x110>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d00b      	beq.n	800664e <TIM_OC1_SetConfig+0xc2>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a19      	ldr	r2, [pc, #100]	@ (80066a0 <TIM_OC1_SetConfig+0x114>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d007      	beq.n	800664e <TIM_OC1_SetConfig+0xc2>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a18      	ldr	r2, [pc, #96]	@ (80066a4 <TIM_OC1_SetConfig+0x118>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d003      	beq.n	800664e <TIM_OC1_SetConfig+0xc2>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a17      	ldr	r2, [pc, #92]	@ (80066a8 <TIM_OC1_SetConfig+0x11c>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d111      	bne.n	8006672 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006654:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800665c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	693a      	ldr	r2, [r7, #16]
 8006664:	4313      	orrs	r3, r2
 8006666:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	4313      	orrs	r3, r2
 8006670:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	685a      	ldr	r2, [r3, #4]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	621a      	str	r2, [r3, #32]
}
 800668c:	bf00      	nop
 800668e:	371c      	adds	r7, #28
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr
 8006698:	40012c00 	.word	0x40012c00
 800669c:	40013400 	.word	0x40013400
 80066a0:	40014000 	.word	0x40014000
 80066a4:	40014400 	.word	0x40014400
 80066a8:	40014800 	.word	0x40014800

080066ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b087      	sub	sp, #28
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a1b      	ldr	r3, [r3, #32]
 80066c0:	f023 0210 	bic.w	r2, r3, #16
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	699b      	ldr	r3, [r3, #24]
 80066d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80066da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	021b      	lsls	r3, r3, #8
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	4313      	orrs	r3, r2
 80066f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	f023 0320 	bic.w	r3, r3, #32
 80066fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	011b      	lsls	r3, r3, #4
 8006702:	697a      	ldr	r2, [r7, #20]
 8006704:	4313      	orrs	r3, r2
 8006706:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a28      	ldr	r2, [pc, #160]	@ (80067ac <TIM_OC2_SetConfig+0x100>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d003      	beq.n	8006718 <TIM_OC2_SetConfig+0x6c>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a27      	ldr	r2, [pc, #156]	@ (80067b0 <TIM_OC2_SetConfig+0x104>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d10d      	bne.n	8006734 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800671e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	011b      	lsls	r3, r3, #4
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	4313      	orrs	r3, r2
 800672a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006732:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a1d      	ldr	r2, [pc, #116]	@ (80067ac <TIM_OC2_SetConfig+0x100>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d00f      	beq.n	800675c <TIM_OC2_SetConfig+0xb0>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a1c      	ldr	r2, [pc, #112]	@ (80067b0 <TIM_OC2_SetConfig+0x104>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d00b      	beq.n	800675c <TIM_OC2_SetConfig+0xb0>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a1b      	ldr	r2, [pc, #108]	@ (80067b4 <TIM_OC2_SetConfig+0x108>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d007      	beq.n	800675c <TIM_OC2_SetConfig+0xb0>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a1a      	ldr	r2, [pc, #104]	@ (80067b8 <TIM_OC2_SetConfig+0x10c>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d003      	beq.n	800675c <TIM_OC2_SetConfig+0xb0>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a19      	ldr	r2, [pc, #100]	@ (80067bc <TIM_OC2_SetConfig+0x110>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d113      	bne.n	8006784 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006762:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800676a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	695b      	ldr	r3, [r3, #20]
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	4313      	orrs	r3, r2
 8006776:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	699b      	ldr	r3, [r3, #24]
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	4313      	orrs	r3, r2
 8006782:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	685a      	ldr	r2, [r3, #4]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	621a      	str	r2, [r3, #32]
}
 800679e:	bf00      	nop
 80067a0:	371c      	adds	r7, #28
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	40012c00 	.word	0x40012c00
 80067b0:	40013400 	.word	0x40013400
 80067b4:	40014000 	.word	0x40014000
 80067b8:	40014400 	.word	0x40014400
 80067bc:	40014800 	.word	0x40014800

080067c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b087      	sub	sp, #28
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a1b      	ldr	r3, [r3, #32]
 80067d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	69db      	ldr	r3, [r3, #28]
 80067e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80067ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f023 0303 	bic.w	r3, r3, #3
 80067fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	4313      	orrs	r3, r2
 8006804:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800680c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	021b      	lsls	r3, r3, #8
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	4313      	orrs	r3, r2
 8006818:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a27      	ldr	r2, [pc, #156]	@ (80068bc <TIM_OC3_SetConfig+0xfc>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d003      	beq.n	800682a <TIM_OC3_SetConfig+0x6a>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a26      	ldr	r2, [pc, #152]	@ (80068c0 <TIM_OC3_SetConfig+0x100>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d10d      	bne.n	8006846 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006830:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	021b      	lsls	r3, r3, #8
 8006838:	697a      	ldr	r2, [r7, #20]
 800683a:	4313      	orrs	r3, r2
 800683c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006844:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4a1c      	ldr	r2, [pc, #112]	@ (80068bc <TIM_OC3_SetConfig+0xfc>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d00f      	beq.n	800686e <TIM_OC3_SetConfig+0xae>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a1b      	ldr	r2, [pc, #108]	@ (80068c0 <TIM_OC3_SetConfig+0x100>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d00b      	beq.n	800686e <TIM_OC3_SetConfig+0xae>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a1a      	ldr	r2, [pc, #104]	@ (80068c4 <TIM_OC3_SetConfig+0x104>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d007      	beq.n	800686e <TIM_OC3_SetConfig+0xae>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a19      	ldr	r2, [pc, #100]	@ (80068c8 <TIM_OC3_SetConfig+0x108>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d003      	beq.n	800686e <TIM_OC3_SetConfig+0xae>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a18      	ldr	r2, [pc, #96]	@ (80068cc <TIM_OC3_SetConfig+0x10c>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d113      	bne.n	8006896 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006874:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800687c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	011b      	lsls	r3, r3, #4
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	4313      	orrs	r3, r2
 8006888:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	011b      	lsls	r3, r3, #4
 8006890:	693a      	ldr	r2, [r7, #16]
 8006892:	4313      	orrs	r3, r2
 8006894:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	685a      	ldr	r2, [r3, #4]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	621a      	str	r2, [r3, #32]
}
 80068b0:	bf00      	nop
 80068b2:	371c      	adds	r7, #28
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr
 80068bc:	40012c00 	.word	0x40012c00
 80068c0:	40013400 	.word	0x40013400
 80068c4:	40014000 	.word	0x40014000
 80068c8:	40014400 	.word	0x40014400
 80068cc:	40014800 	.word	0x40014800

080068d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b087      	sub	sp, #28
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a1b      	ldr	r3, [r3, #32]
 80068e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	69db      	ldr	r3, [r3, #28]
 80068f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80068fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800690a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	021b      	lsls	r3, r3, #8
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	4313      	orrs	r3, r2
 8006916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800691e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	031b      	lsls	r3, r3, #12
 8006926:	693a      	ldr	r2, [r7, #16]
 8006928:	4313      	orrs	r3, r2
 800692a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a18      	ldr	r2, [pc, #96]	@ (8006990 <TIM_OC4_SetConfig+0xc0>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d00f      	beq.n	8006954 <TIM_OC4_SetConfig+0x84>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a17      	ldr	r2, [pc, #92]	@ (8006994 <TIM_OC4_SetConfig+0xc4>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d00b      	beq.n	8006954 <TIM_OC4_SetConfig+0x84>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a16      	ldr	r2, [pc, #88]	@ (8006998 <TIM_OC4_SetConfig+0xc8>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d007      	beq.n	8006954 <TIM_OC4_SetConfig+0x84>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a15      	ldr	r2, [pc, #84]	@ (800699c <TIM_OC4_SetConfig+0xcc>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d003      	beq.n	8006954 <TIM_OC4_SetConfig+0x84>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a14      	ldr	r2, [pc, #80]	@ (80069a0 <TIM_OC4_SetConfig+0xd0>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d109      	bne.n	8006968 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800695a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	695b      	ldr	r3, [r3, #20]
 8006960:	019b      	lsls	r3, r3, #6
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	4313      	orrs	r3, r2
 8006966:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	685a      	ldr	r2, [r3, #4]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	693a      	ldr	r2, [r7, #16]
 8006980:	621a      	str	r2, [r3, #32]
}
 8006982:	bf00      	nop
 8006984:	371c      	adds	r7, #28
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	40012c00 	.word	0x40012c00
 8006994:	40013400 	.word	0x40013400
 8006998:	40014000 	.word	0x40014000
 800699c:	40014400 	.word	0x40014400
 80069a0:	40014800 	.word	0x40014800

080069a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b087      	sub	sp, #28
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a1b      	ldr	r3, [r3, #32]
 80069b8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	4313      	orrs	r3, r2
 80069e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80069e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	041b      	lsls	r3, r3, #16
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a17      	ldr	r2, [pc, #92]	@ (8006a58 <TIM_OC5_SetConfig+0xb4>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d00f      	beq.n	8006a1e <TIM_OC5_SetConfig+0x7a>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a16      	ldr	r2, [pc, #88]	@ (8006a5c <TIM_OC5_SetConfig+0xb8>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d00b      	beq.n	8006a1e <TIM_OC5_SetConfig+0x7a>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a15      	ldr	r2, [pc, #84]	@ (8006a60 <TIM_OC5_SetConfig+0xbc>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d007      	beq.n	8006a1e <TIM_OC5_SetConfig+0x7a>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a14      	ldr	r2, [pc, #80]	@ (8006a64 <TIM_OC5_SetConfig+0xc0>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d003      	beq.n	8006a1e <TIM_OC5_SetConfig+0x7a>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a13      	ldr	r2, [pc, #76]	@ (8006a68 <TIM_OC5_SetConfig+0xc4>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d109      	bne.n	8006a32 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a24:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	021b      	lsls	r3, r3, #8
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	697a      	ldr	r2, [r7, #20]
 8006a36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	685a      	ldr	r2, [r3, #4]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	693a      	ldr	r2, [r7, #16]
 8006a4a:	621a      	str	r2, [r3, #32]
}
 8006a4c:	bf00      	nop
 8006a4e:	371c      	adds	r7, #28
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr
 8006a58:	40012c00 	.word	0x40012c00
 8006a5c:	40013400 	.word	0x40013400
 8006a60:	40014000 	.word	0x40014000
 8006a64:	40014400 	.word	0x40014400
 8006a68:	40014800 	.word	0x40014800

08006a6c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b087      	sub	sp, #28
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6a1b      	ldr	r3, [r3, #32]
 8006a80:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	021b      	lsls	r3, r3, #8
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006ab2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	051b      	lsls	r3, r3, #20
 8006aba:	693a      	ldr	r2, [r7, #16]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	4a18      	ldr	r2, [pc, #96]	@ (8006b24 <TIM_OC6_SetConfig+0xb8>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d00f      	beq.n	8006ae8 <TIM_OC6_SetConfig+0x7c>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a17      	ldr	r2, [pc, #92]	@ (8006b28 <TIM_OC6_SetConfig+0xbc>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d00b      	beq.n	8006ae8 <TIM_OC6_SetConfig+0x7c>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a16      	ldr	r2, [pc, #88]	@ (8006b2c <TIM_OC6_SetConfig+0xc0>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d007      	beq.n	8006ae8 <TIM_OC6_SetConfig+0x7c>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a15      	ldr	r2, [pc, #84]	@ (8006b30 <TIM_OC6_SetConfig+0xc4>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d003      	beq.n	8006ae8 <TIM_OC6_SetConfig+0x7c>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a14      	ldr	r2, [pc, #80]	@ (8006b34 <TIM_OC6_SetConfig+0xc8>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d109      	bne.n	8006afc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006aee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	695b      	ldr	r3, [r3, #20]
 8006af4:	029b      	lsls	r3, r3, #10
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	685a      	ldr	r2, [r3, #4]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	693a      	ldr	r2, [r7, #16]
 8006b14:	621a      	str	r2, [r3, #32]
}
 8006b16:	bf00      	nop
 8006b18:	371c      	adds	r7, #28
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	40012c00 	.word	0x40012c00
 8006b28:	40013400 	.word	0x40013400
 8006b2c:	40014000 	.word	0x40014000
 8006b30:	40014400 	.word	0x40014400
 8006b34:	40014800 	.word	0x40014800

08006b38 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b087      	sub	sp, #28
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	607a      	str	r2, [r7, #4]
 8006b44:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6a1b      	ldr	r3, [r3, #32]
 8006b50:	f023 0201 	bic.w	r2, r3, #1
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	699b      	ldr	r3, [r3, #24]
 8006b5c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	4a26      	ldr	r2, [pc, #152]	@ (8006bfc <TIM_TI1_SetConfig+0xc4>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d017      	beq.n	8006b96 <TIM_TI1_SetConfig+0x5e>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b6c:	d013      	beq.n	8006b96 <TIM_TI1_SetConfig+0x5e>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	4a23      	ldr	r2, [pc, #140]	@ (8006c00 <TIM_TI1_SetConfig+0xc8>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d00f      	beq.n	8006b96 <TIM_TI1_SetConfig+0x5e>
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	4a22      	ldr	r2, [pc, #136]	@ (8006c04 <TIM_TI1_SetConfig+0xcc>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d00b      	beq.n	8006b96 <TIM_TI1_SetConfig+0x5e>
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	4a21      	ldr	r2, [pc, #132]	@ (8006c08 <TIM_TI1_SetConfig+0xd0>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d007      	beq.n	8006b96 <TIM_TI1_SetConfig+0x5e>
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	4a20      	ldr	r2, [pc, #128]	@ (8006c0c <TIM_TI1_SetConfig+0xd4>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d003      	beq.n	8006b96 <TIM_TI1_SetConfig+0x5e>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	4a1f      	ldr	r2, [pc, #124]	@ (8006c10 <TIM_TI1_SetConfig+0xd8>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d101      	bne.n	8006b9a <TIM_TI1_SetConfig+0x62>
 8006b96:	2301      	movs	r3, #1
 8006b98:	e000      	b.n	8006b9c <TIM_TI1_SetConfig+0x64>
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d008      	beq.n	8006bb2 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	f023 0303 	bic.w	r3, r3, #3
 8006ba6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006ba8:	697a      	ldr	r2, [r7, #20]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	617b      	str	r3, [r7, #20]
 8006bb0:	e003      	b.n	8006bba <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	f043 0301 	orr.w	r3, r3, #1
 8006bb8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006bc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	011b      	lsls	r3, r3, #4
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	697a      	ldr	r2, [r7, #20]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	f023 030a 	bic.w	r3, r3, #10
 8006bd4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	f003 030a 	and.w	r3, r3, #10
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	693a      	ldr	r2, [r7, #16]
 8006bec:	621a      	str	r2, [r3, #32]
}
 8006bee:	bf00      	nop
 8006bf0:	371c      	adds	r7, #28
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop
 8006bfc:	40012c00 	.word	0x40012c00
 8006c00:	40000400 	.word	0x40000400
 8006c04:	40000800 	.word	0x40000800
 8006c08:	40000c00 	.word	0x40000c00
 8006c0c:	40013400 	.word	0x40013400
 8006c10:	40014000 	.word	0x40014000

08006c14 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b087      	sub	sp, #28
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	607a      	str	r2, [r7, #4]
 8006c20:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6a1b      	ldr	r3, [r3, #32]
 8006c2c:	f023 0210 	bic.w	r2, r3, #16
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	699b      	ldr	r3, [r3, #24]
 8006c38:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	021b      	lsls	r3, r3, #8
 8006c46:	693a      	ldr	r2, [r7, #16]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006c52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	031b      	lsls	r3, r3, #12
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	693a      	ldr	r2, [r7, #16]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006c66:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	011b      	lsls	r3, r3, #4
 8006c6c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	4313      	orrs	r3, r2
 8006c74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	693a      	ldr	r2, [r7, #16]
 8006c7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	621a      	str	r2, [r3, #32]
}
 8006c82:	bf00      	nop
 8006c84:	371c      	adds	r7, #28
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr

08006c8e <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c8e:	b480      	push	{r7}
 8006c90:	b087      	sub	sp, #28
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	60f8      	str	r0, [r7, #12]
 8006c96:	60b9      	str	r1, [r7, #8]
 8006c98:	607a      	str	r2, [r7, #4]
 8006c9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6a1b      	ldr	r3, [r3, #32]
 8006ca0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	69db      	ldr	r3, [r3, #28]
 8006cb2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	f023 0303 	bic.w	r3, r3, #3
 8006cba:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006cbc:	693a      	ldr	r2, [r7, #16]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006cca:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	011b      	lsls	r3, r3, #4
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006cde:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	021b      	lsls	r3, r3, #8
 8006ce4:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006ce8:	697a      	ldr	r2, [r7, #20]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	621a      	str	r2, [r3, #32]
}
 8006cfa:	bf00      	nop
 8006cfc:	371c      	adds	r7, #28
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d06:	b480      	push	{r7}
 8006d08:	b087      	sub	sp, #28
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	60f8      	str	r0, [r7, #12]
 8006d0e:	60b9      	str	r1, [r7, #8]
 8006d10:	607a      	str	r2, [r7, #4]
 8006d12:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6a1b      	ldr	r3, [r3, #32]
 8006d18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6a1b      	ldr	r3, [r3, #32]
 8006d1e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	69db      	ldr	r3, [r3, #28]
 8006d2a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d32:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	021b      	lsls	r3, r3, #8
 8006d38:	693a      	ldr	r2, [r7, #16]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d44:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	031b      	lsls	r3, r3, #12
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	693a      	ldr	r2, [r7, #16]
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006d58:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	031b      	lsls	r3, r3, #12
 8006d5e:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	697a      	ldr	r2, [r7, #20]
 8006d72:	621a      	str	r2, [r3, #32]
}
 8006d74:	bf00      	nop
 8006d76:	371c      	adds	r7, #28
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b087      	sub	sp, #28
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	f003 031f 	and.w	r3, r3, #31
 8006d92:	2201      	movs	r2, #1
 8006d94:	fa02 f303 	lsl.w	r3, r2, r3
 8006d98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6a1a      	ldr	r2, [r3, #32]
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	43db      	mvns	r3, r3
 8006da2:	401a      	ands	r2, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6a1a      	ldr	r2, [r3, #32]
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	f003 031f 	and.w	r3, r3, #31
 8006db2:	6879      	ldr	r1, [r7, #4]
 8006db4:	fa01 f303 	lsl.w	r3, r1, r3
 8006db8:	431a      	orrs	r2, r3
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	621a      	str	r2, [r3, #32]
}
 8006dbe:	bf00      	nop
 8006dc0:	371c      	adds	r7, #28
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
	...

08006dcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b085      	sub	sp, #20
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d101      	bne.n	8006de4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006de0:	2302      	movs	r3, #2
 8006de2:	e068      	b.n	8006eb6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2202      	movs	r2, #2
 8006df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a2e      	ldr	r2, [pc, #184]	@ (8006ec4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d004      	beq.n	8006e18 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a2d      	ldr	r2, [pc, #180]	@ (8006ec8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d108      	bne.n	8006e2a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006e1e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e30:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a1e      	ldr	r2, [pc, #120]	@ (8006ec4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d01d      	beq.n	8006e8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e56:	d018      	beq.n	8006e8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a1b      	ldr	r2, [pc, #108]	@ (8006ecc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d013      	beq.n	8006e8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a1a      	ldr	r2, [pc, #104]	@ (8006ed0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d00e      	beq.n	8006e8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a18      	ldr	r2, [pc, #96]	@ (8006ed4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d009      	beq.n	8006e8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a13      	ldr	r2, [pc, #76]	@ (8006ec8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d004      	beq.n	8006e8a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a14      	ldr	r2, [pc, #80]	@ (8006ed8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d10c      	bne.n	8006ea4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	68ba      	ldr	r2, [r7, #8]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	68ba      	ldr	r2, [r7, #8]
 8006ea2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	40012c00 	.word	0x40012c00
 8006ec8:	40013400 	.word	0x40013400
 8006ecc:	40000400 	.word	0x40000400
 8006ed0:	40000800 	.word	0x40000800
 8006ed4:	40000c00 	.word	0x40000c00
 8006ed8:	40014000 	.word	0x40014000

08006edc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ee4:	bf00      	nop
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006f0c:	bf00      	nop
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d101      	bne.n	8006f2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e040      	b.n	8006fac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d106      	bne.n	8006f40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f7fb fa5e 	bl	80023fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2224      	movs	r2, #36	@ 0x24
 8006f44:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f022 0201 	bic.w	r2, r2, #1
 8006f54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d002      	beq.n	8006f64 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 ff84 	bl	8007e6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 fcc9 	bl	80078fc <UART_SetConfig>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d101      	bne.n	8006f74 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	e01b      	b.n	8006fac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	685a      	ldr	r2, [r3, #4]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	689a      	ldr	r2, [r3, #8]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006f92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f042 0201 	orr.w	r2, r2, #1
 8006fa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f001 f803 	bl	8007fb0 <UART_CheckIdleState>
 8006faa:	4603      	mov	r3, r0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3708      	adds	r7, #8
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b08a      	sub	sp, #40	@ 0x28
 8006fb8:	af02      	add	r7, sp, #8
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	603b      	str	r3, [r7, #0]
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006fc8:	2b20      	cmp	r3, #32
 8006fca:	d177      	bne.n	80070bc <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d002      	beq.n	8006fd8 <HAL_UART_Transmit+0x24>
 8006fd2:	88fb      	ldrh	r3, [r7, #6]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d101      	bne.n	8006fdc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e070      	b.n	80070be <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2221      	movs	r2, #33	@ 0x21
 8006fe8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006fea:	f7fb fe43 	bl	8002c74 <HAL_GetTick>
 8006fee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	88fa      	ldrh	r2, [r7, #6]
 8006ff4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	88fa      	ldrh	r2, [r7, #6]
 8006ffc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007008:	d108      	bne.n	800701c <HAL_UART_Transmit+0x68>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d104      	bne.n	800701c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007012:	2300      	movs	r3, #0
 8007014:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	61bb      	str	r3, [r7, #24]
 800701a:	e003      	b.n	8007024 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007020:	2300      	movs	r3, #0
 8007022:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007024:	e02f      	b.n	8007086 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	9300      	str	r3, [sp, #0]
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	2200      	movs	r2, #0
 800702e:	2180      	movs	r1, #128	@ 0x80
 8007030:	68f8      	ldr	r0, [r7, #12]
 8007032:	f001 f865 	bl	8008100 <UART_WaitOnFlagUntilTimeout>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d004      	beq.n	8007046 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2220      	movs	r2, #32
 8007040:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007042:	2303      	movs	r3, #3
 8007044:	e03b      	b.n	80070be <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d10b      	bne.n	8007064 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	881a      	ldrh	r2, [r3, #0]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007058:	b292      	uxth	r2, r2
 800705a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	3302      	adds	r3, #2
 8007060:	61bb      	str	r3, [r7, #24]
 8007062:	e007      	b.n	8007074 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	781a      	ldrb	r2, [r3, #0]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	3301      	adds	r3, #1
 8007072:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800707a:	b29b      	uxth	r3, r3
 800707c:	3b01      	subs	r3, #1
 800707e:	b29a      	uxth	r2, r3
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800708c:	b29b      	uxth	r3, r3
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1c9      	bne.n	8007026 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	9300      	str	r3, [sp, #0]
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	2200      	movs	r2, #0
 800709a:	2140      	movs	r1, #64	@ 0x40
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f001 f82f 	bl	8008100 <UART_WaitOnFlagUntilTimeout>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d004      	beq.n	80070b2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2220      	movs	r2, #32
 80070ac:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e005      	b.n	80070be <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2220      	movs	r2, #32
 80070b6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80070b8:	2300      	movs	r3, #0
 80070ba:	e000      	b.n	80070be <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80070bc:	2302      	movs	r3, #2
  }
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3720      	adds	r7, #32
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
	...

080070c8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b08a      	sub	sp, #40	@ 0x28
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	60b9      	str	r1, [r7, #8]
 80070d2:	4613      	mov	r3, r2
 80070d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070dc:	2b20      	cmp	r3, #32
 80070de:	d137      	bne.n	8007150 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d002      	beq.n	80070ec <HAL_UART_Receive_IT+0x24>
 80070e6:	88fb      	ldrh	r3, [r7, #6]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d101      	bne.n	80070f0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80070ec:	2301      	movs	r3, #1
 80070ee:	e030      	b.n	8007152 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a18      	ldr	r2, [pc, #96]	@ (800715c <HAL_UART_Receive_IT+0x94>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d01f      	beq.n	8007140 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800710a:	2b00      	cmp	r3, #0
 800710c:	d018      	beq.n	8007140 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	e853 3f00 	ldrex	r3, [r3]
 800711a:	613b      	str	r3, [r7, #16]
   return(result);
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007122:	627b      	str	r3, [r7, #36]	@ 0x24
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	461a      	mov	r2, r3
 800712a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712c:	623b      	str	r3, [r7, #32]
 800712e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007130:	69f9      	ldr	r1, [r7, #28]
 8007132:	6a3a      	ldr	r2, [r7, #32]
 8007134:	e841 2300 	strex	r3, r2, [r1]
 8007138:	61bb      	str	r3, [r7, #24]
   return(result);
 800713a:	69bb      	ldr	r3, [r7, #24]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d1e6      	bne.n	800710e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007140:	88fb      	ldrh	r3, [r7, #6]
 8007142:	461a      	mov	r2, r3
 8007144:	68b9      	ldr	r1, [r7, #8]
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f001 f848 	bl	80081dc <UART_Start_Receive_IT>
 800714c:	4603      	mov	r3, r0
 800714e:	e000      	b.n	8007152 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007150:	2302      	movs	r3, #2
  }
}
 8007152:	4618      	mov	r0, r3
 8007154:	3728      	adds	r7, #40	@ 0x28
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	40008000 	.word	0x40008000

08007160 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b09a      	sub	sp, #104	@ 0x68
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
#else
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007170:	e853 3f00 	ldrex	r3, [r3]
 8007174:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007176:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007178:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800717c:	667b      	str	r3, [r7, #100]	@ 0x64
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	461a      	mov	r2, r3
 8007184:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007186:	657b      	str	r3, [r7, #84]	@ 0x54
 8007188:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800718a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800718c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800718e:	e841 2300 	strex	r3, r2, [r1]
 8007192:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007194:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1e6      	bne.n	8007168 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	3308      	adds	r3, #8
 80071a0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071a4:	e853 3f00 	ldrex	r3, [r3]
 80071a8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80071aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ac:	f023 0301 	bic.w	r3, r3, #1
 80071b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	3308      	adds	r3, #8
 80071b8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80071ba:	643a      	str	r2, [r7, #64]	@ 0x40
 80071bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071be:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80071c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80071c2:	e841 2300 	strex	r3, r2, [r1]
 80071c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80071c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1e5      	bne.n	800719a <HAL_UART_AbortReceive+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d118      	bne.n	8007208 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071dc:	6a3b      	ldr	r3, [r7, #32]
 80071de:	e853 3f00 	ldrex	r3, [r3]
 80071e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	f023 0310 	bic.w	r3, r3, #16
 80071ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	461a      	mov	r2, r3
 80071f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071f6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80071fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071fc:	e841 2300 	strex	r3, r2, [r1]
 8007200:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007204:	2b00      	cmp	r3, #0
 8007206:	d1e6      	bne.n	80071d6 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007212:	2b40      	cmp	r3, #64	@ 0x40
 8007214:	d137      	bne.n	8007286 <HAL_UART_AbortReceive+0x126>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	3308      	adds	r3, #8
 800721c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	e853 3f00 	ldrex	r3, [r3]
 8007224:	60bb      	str	r3, [r7, #8]
   return(result);
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800722c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	3308      	adds	r3, #8
 8007234:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007236:	61ba      	str	r2, [r7, #24]
 8007238:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723a:	6979      	ldr	r1, [r7, #20]
 800723c:	69ba      	ldr	r2, [r7, #24]
 800723e:	e841 2300 	strex	r3, r2, [r1]
 8007242:	613b      	str	r3, [r7, #16]
   return(result);
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d1e5      	bne.n	8007216 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800724e:	2b00      	cmp	r3, #0
 8007250:	d019      	beq.n	8007286 <HAL_UART_AbortReceive+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007256:	2200      	movs	r2, #0
 8007258:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800725e:	4618      	mov	r0, r3
 8007260:	f7fb fe7b 	bl	8002f5a <HAL_DMA_Abort>
 8007264:	4603      	mov	r3, r0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00d      	beq.n	8007286 <HAL_UART_AbortReceive+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800726e:	4618      	mov	r0, r3
 8007270:	f7fb fef2 	bl	8003058 <HAL_DMA_GetError>
 8007274:	4603      	mov	r3, r0
 8007276:	2b20      	cmp	r3, #32
 8007278:	d105      	bne.n	8007286 <HAL_UART_AbortReceive+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2210      	movs	r2, #16
 800727e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8007282:	2303      	movs	r3, #3
 8007284:	e019      	b.n	80072ba <HAL_UART_AbortReceive+0x15a>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	220f      	movs	r2, #15
 8007294:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	8b1b      	ldrh	r3, [r3, #24]
 800729c:	b29a      	uxth	r2, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f042 0208 	orr.w	r2, r2, #8
 80072a6:	b292      	uxth	r2, r2
 80072a8:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2220      	movs	r2, #32
 80072ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2200      	movs	r2, #0
 80072b6:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3768      	adds	r7, #104	@ 0x68
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
	...

080072c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b0ba      	sub	sp, #232	@ 0xe8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	69db      	ldr	r3, [r3, #28]
 80072d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80072ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80072ee:	f640 030f 	movw	r3, #2063	@ 0x80f
 80072f2:	4013      	ands	r3, r2
 80072f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80072f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d115      	bne.n	800732c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007304:	f003 0320 	and.w	r3, r3, #32
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00f      	beq.n	800732c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800730c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007310:	f003 0320 	and.w	r3, r3, #32
 8007314:	2b00      	cmp	r3, #0
 8007316:	d009      	beq.n	800732c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800731c:	2b00      	cmp	r3, #0
 800731e:	f000 82ca 	beq.w	80078b6 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	4798      	blx	r3
      }
      return;
 800732a:	e2c4      	b.n	80078b6 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800732c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007330:	2b00      	cmp	r3, #0
 8007332:	f000 8117 	beq.w	8007564 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007336:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800733a:	f003 0301 	and.w	r3, r3, #1
 800733e:	2b00      	cmp	r3, #0
 8007340:	d106      	bne.n	8007350 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007342:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007346:	4b85      	ldr	r3, [pc, #532]	@ (800755c <HAL_UART_IRQHandler+0x298>)
 8007348:	4013      	ands	r3, r2
 800734a:	2b00      	cmp	r3, #0
 800734c:	f000 810a 	beq.w	8007564 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007354:	f003 0301 	and.w	r3, r3, #1
 8007358:	2b00      	cmp	r3, #0
 800735a:	d011      	beq.n	8007380 <HAL_UART_IRQHandler+0xbc>
 800735c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007360:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00b      	beq.n	8007380 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2201      	movs	r2, #1
 800736e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007376:	f043 0201 	orr.w	r2, r3, #1
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007384:	f003 0302 	and.w	r3, r3, #2
 8007388:	2b00      	cmp	r3, #0
 800738a:	d011      	beq.n	80073b0 <HAL_UART_IRQHandler+0xec>
 800738c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007390:	f003 0301 	and.w	r3, r3, #1
 8007394:	2b00      	cmp	r3, #0
 8007396:	d00b      	beq.n	80073b0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2202      	movs	r2, #2
 800739e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073a6:	f043 0204 	orr.w	r2, r3, #4
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073b4:	f003 0304 	and.w	r3, r3, #4
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d011      	beq.n	80073e0 <HAL_UART_IRQHandler+0x11c>
 80073bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073c0:	f003 0301 	and.w	r3, r3, #1
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00b      	beq.n	80073e0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2204      	movs	r2, #4
 80073ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073d6:	f043 0202 	orr.w	r2, r3, #2
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80073e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073e4:	f003 0308 	and.w	r3, r3, #8
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d017      	beq.n	800741c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80073ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073f0:	f003 0320 	and.w	r3, r3, #32
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d105      	bne.n	8007404 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80073f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073fc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00b      	beq.n	800741c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2208      	movs	r2, #8
 800740a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007412:	f043 0208 	orr.w	r2, r3, #8
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800741c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007420:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007424:	2b00      	cmp	r3, #0
 8007426:	d012      	beq.n	800744e <HAL_UART_IRQHandler+0x18a>
 8007428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800742c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007430:	2b00      	cmp	r3, #0
 8007432:	d00c      	beq.n	800744e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800743c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007444:	f043 0220 	orr.w	r2, r3, #32
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007454:	2b00      	cmp	r3, #0
 8007456:	f000 8230 	beq.w	80078ba <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800745a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800745e:	f003 0320 	and.w	r3, r3, #32
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00d      	beq.n	8007482 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007466:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800746a:	f003 0320 	and.w	r3, r3, #32
 800746e:	2b00      	cmp	r3, #0
 8007470:	d007      	beq.n	8007482 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007476:	2b00      	cmp	r3, #0
 8007478:	d003      	beq.n	8007482 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007488:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007496:	2b40      	cmp	r3, #64	@ 0x40
 8007498:	d005      	beq.n	80074a6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800749a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800749e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d04f      	beq.n	8007546 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 ff5e 	bl	8008368 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074b6:	2b40      	cmp	r3, #64	@ 0x40
 80074b8:	d141      	bne.n	800753e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	3308      	adds	r3, #8
 80074c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80074c8:	e853 3f00 	ldrex	r3, [r3]
 80074cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80074d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80074d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	3308      	adds	r3, #8
 80074e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80074e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80074ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80074f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80074f6:	e841 2300 	strex	r3, r2, [r1]
 80074fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80074fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1d9      	bne.n	80074ba <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800750a:	2b00      	cmp	r3, #0
 800750c:	d013      	beq.n	8007536 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007512:	4a13      	ldr	r2, [pc, #76]	@ (8007560 <HAL_UART_IRQHandler+0x29c>)
 8007514:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800751a:	4618      	mov	r0, r3
 800751c:	f7fb fd5b 	bl	8002fd6 <HAL_DMA_Abort_IT>
 8007520:	4603      	mov	r3, r0
 8007522:	2b00      	cmp	r3, #0
 8007524:	d017      	beq.n	8007556 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800752a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007530:	4610      	mov	r0, r2
 8007532:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007534:	e00f      	b.n	8007556 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f7fa fcce 	bl	8001ed8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800753c:	e00b      	b.n	8007556 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f7fa fcca 	bl	8001ed8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007544:	e007      	b.n	8007556 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f7fa fcc6 	bl	8001ed8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8007554:	e1b1      	b.n	80078ba <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007556:	bf00      	nop
    return;
 8007558:	e1af      	b.n	80078ba <HAL_UART_IRQHandler+0x5f6>
 800755a:	bf00      	nop
 800755c:	04000120 	.word	0x04000120
 8007560:	08008431 	.word	0x08008431

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007568:	2b01      	cmp	r3, #1
 800756a:	f040 816a 	bne.w	8007842 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800756e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007572:	f003 0310 	and.w	r3, r3, #16
 8007576:	2b00      	cmp	r3, #0
 8007578:	f000 8163 	beq.w	8007842 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800757c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007580:	f003 0310 	and.w	r3, r3, #16
 8007584:	2b00      	cmp	r3, #0
 8007586:	f000 815c 	beq.w	8007842 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2210      	movs	r2, #16
 8007590:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800759c:	2b40      	cmp	r3, #64	@ 0x40
 800759e:	f040 80d4 	bne.w	800774a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80075ae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	f000 80ad 	beq.w	8007712 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80075be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80075c2:	429a      	cmp	r2, r3
 80075c4:	f080 80a5 	bcs.w	8007712 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80075ce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f003 0320 	and.w	r3, r3, #32
 80075de:	2b00      	cmp	r3, #0
 80075e0:	f040 8086 	bne.w	80076f0 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80075f0:	e853 3f00 	ldrex	r3, [r3]
 80075f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80075f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80075fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007600:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	461a      	mov	r2, r3
 800760a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800760e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007612:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007616:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800761a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800761e:	e841 2300 	strex	r3, r2, [r1]
 8007622:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007626:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1da      	bne.n	80075e4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	3308      	adds	r3, #8
 8007634:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007636:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007638:	e853 3f00 	ldrex	r3, [r3]
 800763c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800763e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007640:	f023 0301 	bic.w	r3, r3, #1
 8007644:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	3308      	adds	r3, #8
 800764e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007652:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007656:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007658:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800765a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800765e:	e841 2300 	strex	r3, r2, [r1]
 8007662:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007664:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007666:	2b00      	cmp	r3, #0
 8007668:	d1e1      	bne.n	800762e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	3308      	adds	r3, #8
 8007670:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007672:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007674:	e853 3f00 	ldrex	r3, [r3]
 8007678:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800767a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800767c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007680:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	3308      	adds	r3, #8
 800768a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800768e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007690:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007692:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007694:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007696:	e841 2300 	strex	r3, r2, [r1]
 800769a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800769c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1e3      	bne.n	800766a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2220      	movs	r2, #32
 80076a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076b8:	e853 3f00 	ldrex	r3, [r3]
 80076bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80076be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076c0:	f023 0310 	bic.w	r3, r3, #16
 80076c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	461a      	mov	r2, r3
 80076ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80076d2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80076d4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80076d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80076da:	e841 2300 	strex	r3, r2, [r1]
 80076de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80076e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d1e4      	bne.n	80076b0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076ea:	4618      	mov	r0, r3
 80076ec:	f7fb fc35 	bl	8002f5a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2202      	movs	r2, #2
 80076f4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007702:	b29b      	uxth	r3, r3
 8007704:	1ad3      	subs	r3, r2, r3
 8007706:	b29b      	uxth	r3, r3
 8007708:	4619      	mov	r1, r3
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 f8ea 	bl	80078e4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007710:	e0d5      	b.n	80078be <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007718:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800771c:	429a      	cmp	r2, r3
 800771e:	f040 80ce 	bne.w	80078be <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f003 0320 	and.w	r3, r3, #32
 800772e:	2b20      	cmp	r3, #32
 8007730:	f040 80c5 	bne.w	80078be <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2202      	movs	r2, #2
 8007738:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007740:	4619      	mov	r1, r3
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f8ce 	bl	80078e4 <HAL_UARTEx_RxEventCallback>
      return;
 8007748:	e0b9      	b.n	80078be <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007756:	b29b      	uxth	r3, r3
 8007758:	1ad3      	subs	r3, r2, r3
 800775a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8007764:	b29b      	uxth	r3, r3
 8007766:	2b00      	cmp	r3, #0
 8007768:	f000 80ab 	beq.w	80078c2 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800776c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007770:	2b00      	cmp	r3, #0
 8007772:	f000 80a6 	beq.w	80078c2 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800777c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800777e:	e853 3f00 	ldrex	r3, [r3]
 8007782:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007786:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800778a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	461a      	mov	r2, r3
 8007794:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007798:	647b      	str	r3, [r7, #68]	@ 0x44
 800779a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800779e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80077a0:	e841 2300 	strex	r3, r2, [r1]
 80077a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80077a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d1e4      	bne.n	8007776 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	3308      	adds	r3, #8
 80077b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b6:	e853 3f00 	ldrex	r3, [r3]
 80077ba:	623b      	str	r3, [r7, #32]
   return(result);
 80077bc:	6a3b      	ldr	r3, [r7, #32]
 80077be:	f023 0301 	bic.w	r3, r3, #1
 80077c2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	3308      	adds	r3, #8
 80077cc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80077d0:	633a      	str	r2, [r7, #48]	@ 0x30
 80077d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80077d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077d8:	e841 2300 	strex	r3, r2, [r1]
 80077dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80077de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d1e3      	bne.n	80077ac <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2220      	movs	r2, #32
 80077e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	e853 3f00 	ldrex	r3, [r3]
 8007804:	60fb      	str	r3, [r7, #12]
   return(result);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f023 0310 	bic.w	r3, r3, #16
 800780c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	461a      	mov	r2, r3
 8007816:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800781a:	61fb      	str	r3, [r7, #28]
 800781c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800781e:	69b9      	ldr	r1, [r7, #24]
 8007820:	69fa      	ldr	r2, [r7, #28]
 8007822:	e841 2300 	strex	r3, r2, [r1]
 8007826:	617b      	str	r3, [r7, #20]
   return(result);
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d1e4      	bne.n	80077f8 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2202      	movs	r2, #2
 8007832:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007834:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007838:	4619      	mov	r1, r3
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 f852 	bl	80078e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007840:	e03f      	b.n	80078c2 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007846:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00e      	beq.n	800786c <HAL_UART_IRQHandler+0x5a8>
 800784e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007852:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007856:	2b00      	cmp	r3, #0
 8007858:	d008      	beq.n	800786c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007862:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 ffdf 	bl	8008828 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800786a:	e02d      	b.n	80078c8 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800786c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007870:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00e      	beq.n	8007896 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007878:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800787c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007880:	2b00      	cmp	r3, #0
 8007882:	d008      	beq.n	8007896 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007888:	2b00      	cmp	r3, #0
 800788a:	d01c      	beq.n	80078c6 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	4798      	blx	r3
    }
    return;
 8007894:	e017      	b.n	80078c6 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800789a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d012      	beq.n	80078c8 <HAL_UART_IRQHandler+0x604>
 80078a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d00c      	beq.n	80078c8 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fdd4 	bl	800845c <UART_EndTransmit_IT>
    return;
 80078b4:	e008      	b.n	80078c8 <HAL_UART_IRQHandler+0x604>
      return;
 80078b6:	bf00      	nop
 80078b8:	e006      	b.n	80078c8 <HAL_UART_IRQHandler+0x604>
    return;
 80078ba:	bf00      	nop
 80078bc:	e004      	b.n	80078c8 <HAL_UART_IRQHandler+0x604>
      return;
 80078be:	bf00      	nop
 80078c0:	e002      	b.n	80078c8 <HAL_UART_IRQHandler+0x604>
      return;
 80078c2:	bf00      	nop
 80078c4:	e000      	b.n	80078c8 <HAL_UART_IRQHandler+0x604>
    return;
 80078c6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80078c8:	37e8      	adds	r7, #232	@ 0xe8
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop

080078d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	460b      	mov	r3, r1
 80078ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80078f0:	bf00      	nop
 80078f2:	370c      	adds	r7, #12
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007900:	b08a      	sub	sp, #40	@ 0x28
 8007902:	af00      	add	r7, sp, #0
 8007904:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007906:	2300      	movs	r3, #0
 8007908:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	689a      	ldr	r2, [r3, #8]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	431a      	orrs	r2, r3
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	695b      	ldr	r3, [r3, #20]
 800791a:	431a      	orrs	r2, r3
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	69db      	ldr	r3, [r3, #28]
 8007920:	4313      	orrs	r3, r2
 8007922:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	4ba4      	ldr	r3, [pc, #656]	@ (8007bbc <UART_SetConfig+0x2c0>)
 800792c:	4013      	ands	r3, r2
 800792e:	68fa      	ldr	r2, [r7, #12]
 8007930:	6812      	ldr	r2, [r2, #0]
 8007932:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007934:	430b      	orrs	r3, r1
 8007936:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	68da      	ldr	r2, [r3, #12]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	430a      	orrs	r2, r1
 800794c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	699b      	ldr	r3, [r3, #24]
 8007952:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a99      	ldr	r2, [pc, #612]	@ (8007bc0 <UART_SetConfig+0x2c4>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d004      	beq.n	8007968 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	6a1b      	ldr	r3, [r3, #32]
 8007962:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007964:	4313      	orrs	r3, r2
 8007966:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007978:	430a      	orrs	r2, r1
 800797a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a90      	ldr	r2, [pc, #576]	@ (8007bc4 <UART_SetConfig+0x2c8>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d126      	bne.n	80079d4 <UART_SetConfig+0xd8>
 8007986:	4b90      	ldr	r3, [pc, #576]	@ (8007bc8 <UART_SetConfig+0x2cc>)
 8007988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800798c:	f003 0303 	and.w	r3, r3, #3
 8007990:	2b03      	cmp	r3, #3
 8007992:	d81b      	bhi.n	80079cc <UART_SetConfig+0xd0>
 8007994:	a201      	add	r2, pc, #4	@ (adr r2, 800799c <UART_SetConfig+0xa0>)
 8007996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800799a:	bf00      	nop
 800799c:	080079ad 	.word	0x080079ad
 80079a0:	080079bd 	.word	0x080079bd
 80079a4:	080079b5 	.word	0x080079b5
 80079a8:	080079c5 	.word	0x080079c5
 80079ac:	2301      	movs	r3, #1
 80079ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079b2:	e116      	b.n	8007be2 <UART_SetConfig+0x2e6>
 80079b4:	2302      	movs	r3, #2
 80079b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079ba:	e112      	b.n	8007be2 <UART_SetConfig+0x2e6>
 80079bc:	2304      	movs	r3, #4
 80079be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079c2:	e10e      	b.n	8007be2 <UART_SetConfig+0x2e6>
 80079c4:	2308      	movs	r3, #8
 80079c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079ca:	e10a      	b.n	8007be2 <UART_SetConfig+0x2e6>
 80079cc:	2310      	movs	r3, #16
 80079ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80079d2:	e106      	b.n	8007be2 <UART_SetConfig+0x2e6>
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a7c      	ldr	r2, [pc, #496]	@ (8007bcc <UART_SetConfig+0x2d0>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d138      	bne.n	8007a50 <UART_SetConfig+0x154>
 80079de:	4b7a      	ldr	r3, [pc, #488]	@ (8007bc8 <UART_SetConfig+0x2cc>)
 80079e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80079e4:	f003 030c 	and.w	r3, r3, #12
 80079e8:	2b0c      	cmp	r3, #12
 80079ea:	d82d      	bhi.n	8007a48 <UART_SetConfig+0x14c>
 80079ec:	a201      	add	r2, pc, #4	@ (adr r2, 80079f4 <UART_SetConfig+0xf8>)
 80079ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f2:	bf00      	nop
 80079f4:	08007a29 	.word	0x08007a29
 80079f8:	08007a49 	.word	0x08007a49
 80079fc:	08007a49 	.word	0x08007a49
 8007a00:	08007a49 	.word	0x08007a49
 8007a04:	08007a39 	.word	0x08007a39
 8007a08:	08007a49 	.word	0x08007a49
 8007a0c:	08007a49 	.word	0x08007a49
 8007a10:	08007a49 	.word	0x08007a49
 8007a14:	08007a31 	.word	0x08007a31
 8007a18:	08007a49 	.word	0x08007a49
 8007a1c:	08007a49 	.word	0x08007a49
 8007a20:	08007a49 	.word	0x08007a49
 8007a24:	08007a41 	.word	0x08007a41
 8007a28:	2300      	movs	r3, #0
 8007a2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a2e:	e0d8      	b.n	8007be2 <UART_SetConfig+0x2e6>
 8007a30:	2302      	movs	r3, #2
 8007a32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a36:	e0d4      	b.n	8007be2 <UART_SetConfig+0x2e6>
 8007a38:	2304      	movs	r3, #4
 8007a3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a3e:	e0d0      	b.n	8007be2 <UART_SetConfig+0x2e6>
 8007a40:	2308      	movs	r3, #8
 8007a42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a46:	e0cc      	b.n	8007be2 <UART_SetConfig+0x2e6>
 8007a48:	2310      	movs	r3, #16
 8007a4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a4e:	e0c8      	b.n	8007be2 <UART_SetConfig+0x2e6>
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a5e      	ldr	r2, [pc, #376]	@ (8007bd0 <UART_SetConfig+0x2d4>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d125      	bne.n	8007aa6 <UART_SetConfig+0x1aa>
 8007a5a:	4b5b      	ldr	r3, [pc, #364]	@ (8007bc8 <UART_SetConfig+0x2cc>)
 8007a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a60:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007a64:	2b30      	cmp	r3, #48	@ 0x30
 8007a66:	d016      	beq.n	8007a96 <UART_SetConfig+0x19a>
 8007a68:	2b30      	cmp	r3, #48	@ 0x30
 8007a6a:	d818      	bhi.n	8007a9e <UART_SetConfig+0x1a2>
 8007a6c:	2b20      	cmp	r3, #32
 8007a6e:	d00a      	beq.n	8007a86 <UART_SetConfig+0x18a>
 8007a70:	2b20      	cmp	r3, #32
 8007a72:	d814      	bhi.n	8007a9e <UART_SetConfig+0x1a2>
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d002      	beq.n	8007a7e <UART_SetConfig+0x182>
 8007a78:	2b10      	cmp	r3, #16
 8007a7a:	d008      	beq.n	8007a8e <UART_SetConfig+0x192>
 8007a7c:	e00f      	b.n	8007a9e <UART_SetConfig+0x1a2>
 8007a7e:	2300      	movs	r3, #0
 8007a80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a84:	e0ad      	b.n	8007be2 <UART_SetConfig+0x2e6>
 8007a86:	2302      	movs	r3, #2
 8007a88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a8c:	e0a9      	b.n	8007be2 <UART_SetConfig+0x2e6>
 8007a8e:	2304      	movs	r3, #4
 8007a90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a94:	e0a5      	b.n	8007be2 <UART_SetConfig+0x2e6>
 8007a96:	2308      	movs	r3, #8
 8007a98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007a9c:	e0a1      	b.n	8007be2 <UART_SetConfig+0x2e6>
 8007a9e:	2310      	movs	r3, #16
 8007aa0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007aa4:	e09d      	b.n	8007be2 <UART_SetConfig+0x2e6>
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a4a      	ldr	r2, [pc, #296]	@ (8007bd4 <UART_SetConfig+0x2d8>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d125      	bne.n	8007afc <UART_SetConfig+0x200>
 8007ab0:	4b45      	ldr	r3, [pc, #276]	@ (8007bc8 <UART_SetConfig+0x2cc>)
 8007ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ab6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007aba:	2bc0      	cmp	r3, #192	@ 0xc0
 8007abc:	d016      	beq.n	8007aec <UART_SetConfig+0x1f0>
 8007abe:	2bc0      	cmp	r3, #192	@ 0xc0
 8007ac0:	d818      	bhi.n	8007af4 <UART_SetConfig+0x1f8>
 8007ac2:	2b80      	cmp	r3, #128	@ 0x80
 8007ac4:	d00a      	beq.n	8007adc <UART_SetConfig+0x1e0>
 8007ac6:	2b80      	cmp	r3, #128	@ 0x80
 8007ac8:	d814      	bhi.n	8007af4 <UART_SetConfig+0x1f8>
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d002      	beq.n	8007ad4 <UART_SetConfig+0x1d8>
 8007ace:	2b40      	cmp	r3, #64	@ 0x40
 8007ad0:	d008      	beq.n	8007ae4 <UART_SetConfig+0x1e8>
 8007ad2:	e00f      	b.n	8007af4 <UART_SetConfig+0x1f8>
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ada:	e082      	b.n	8007be2 <UART_SetConfig+0x2e6>
 8007adc:	2302      	movs	r3, #2
 8007ade:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ae2:	e07e      	b.n	8007be2 <UART_SetConfig+0x2e6>
 8007ae4:	2304      	movs	r3, #4
 8007ae6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007aea:	e07a      	b.n	8007be2 <UART_SetConfig+0x2e6>
 8007aec:	2308      	movs	r3, #8
 8007aee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007af2:	e076      	b.n	8007be2 <UART_SetConfig+0x2e6>
 8007af4:	2310      	movs	r3, #16
 8007af6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007afa:	e072      	b.n	8007be2 <UART_SetConfig+0x2e6>
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a35      	ldr	r2, [pc, #212]	@ (8007bd8 <UART_SetConfig+0x2dc>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d12a      	bne.n	8007b5c <UART_SetConfig+0x260>
 8007b06:	4b30      	ldr	r3, [pc, #192]	@ (8007bc8 <UART_SetConfig+0x2cc>)
 8007b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b0c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b14:	d01a      	beq.n	8007b4c <UART_SetConfig+0x250>
 8007b16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b1a:	d81b      	bhi.n	8007b54 <UART_SetConfig+0x258>
 8007b1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b20:	d00c      	beq.n	8007b3c <UART_SetConfig+0x240>
 8007b22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b26:	d815      	bhi.n	8007b54 <UART_SetConfig+0x258>
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d003      	beq.n	8007b34 <UART_SetConfig+0x238>
 8007b2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b30:	d008      	beq.n	8007b44 <UART_SetConfig+0x248>
 8007b32:	e00f      	b.n	8007b54 <UART_SetConfig+0x258>
 8007b34:	2300      	movs	r3, #0
 8007b36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b3a:	e052      	b.n	8007be2 <UART_SetConfig+0x2e6>
 8007b3c:	2302      	movs	r3, #2
 8007b3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b42:	e04e      	b.n	8007be2 <UART_SetConfig+0x2e6>
 8007b44:	2304      	movs	r3, #4
 8007b46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b4a:	e04a      	b.n	8007be2 <UART_SetConfig+0x2e6>
 8007b4c:	2308      	movs	r3, #8
 8007b4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b52:	e046      	b.n	8007be2 <UART_SetConfig+0x2e6>
 8007b54:	2310      	movs	r3, #16
 8007b56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b5a:	e042      	b.n	8007be2 <UART_SetConfig+0x2e6>
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a17      	ldr	r2, [pc, #92]	@ (8007bc0 <UART_SetConfig+0x2c4>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d13a      	bne.n	8007bdc <UART_SetConfig+0x2e0>
 8007b66:	4b18      	ldr	r3, [pc, #96]	@ (8007bc8 <UART_SetConfig+0x2cc>)
 8007b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b6c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007b70:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b74:	d01a      	beq.n	8007bac <UART_SetConfig+0x2b0>
 8007b76:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b7a:	d81b      	bhi.n	8007bb4 <UART_SetConfig+0x2b8>
 8007b7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b80:	d00c      	beq.n	8007b9c <UART_SetConfig+0x2a0>
 8007b82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b86:	d815      	bhi.n	8007bb4 <UART_SetConfig+0x2b8>
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d003      	beq.n	8007b94 <UART_SetConfig+0x298>
 8007b8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b90:	d008      	beq.n	8007ba4 <UART_SetConfig+0x2a8>
 8007b92:	e00f      	b.n	8007bb4 <UART_SetConfig+0x2b8>
 8007b94:	2300      	movs	r3, #0
 8007b96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007b9a:	e022      	b.n	8007be2 <UART_SetConfig+0x2e6>
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007ba2:	e01e      	b.n	8007be2 <UART_SetConfig+0x2e6>
 8007ba4:	2304      	movs	r3, #4
 8007ba6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007baa:	e01a      	b.n	8007be2 <UART_SetConfig+0x2e6>
 8007bac:	2308      	movs	r3, #8
 8007bae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bb2:	e016      	b.n	8007be2 <UART_SetConfig+0x2e6>
 8007bb4:	2310      	movs	r3, #16
 8007bb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007bba:	e012      	b.n	8007be2 <UART_SetConfig+0x2e6>
 8007bbc:	efff69f3 	.word	0xefff69f3
 8007bc0:	40008000 	.word	0x40008000
 8007bc4:	40013800 	.word	0x40013800
 8007bc8:	40021000 	.word	0x40021000
 8007bcc:	40004400 	.word	0x40004400
 8007bd0:	40004800 	.word	0x40004800
 8007bd4:	40004c00 	.word	0x40004c00
 8007bd8:	40005000 	.word	0x40005000
 8007bdc:	2310      	movs	r3, #16
 8007bde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a9f      	ldr	r2, [pc, #636]	@ (8007e64 <UART_SetConfig+0x568>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d17a      	bne.n	8007ce2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007bec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007bf0:	2b08      	cmp	r3, #8
 8007bf2:	d824      	bhi.n	8007c3e <UART_SetConfig+0x342>
 8007bf4:	a201      	add	r2, pc, #4	@ (adr r2, 8007bfc <UART_SetConfig+0x300>)
 8007bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bfa:	bf00      	nop
 8007bfc:	08007c21 	.word	0x08007c21
 8007c00:	08007c3f 	.word	0x08007c3f
 8007c04:	08007c29 	.word	0x08007c29
 8007c08:	08007c3f 	.word	0x08007c3f
 8007c0c:	08007c2f 	.word	0x08007c2f
 8007c10:	08007c3f 	.word	0x08007c3f
 8007c14:	08007c3f 	.word	0x08007c3f
 8007c18:	08007c3f 	.word	0x08007c3f
 8007c1c:	08007c37 	.word	0x08007c37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c20:	f7fc ffe4 	bl	8004bec <HAL_RCC_GetPCLK1Freq>
 8007c24:	61f8      	str	r0, [r7, #28]
        break;
 8007c26:	e010      	b.n	8007c4a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c28:	4b8f      	ldr	r3, [pc, #572]	@ (8007e68 <UART_SetConfig+0x56c>)
 8007c2a:	61fb      	str	r3, [r7, #28]
        break;
 8007c2c:	e00d      	b.n	8007c4a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c2e:	f7fc ff45 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8007c32:	61f8      	str	r0, [r7, #28]
        break;
 8007c34:	e009      	b.n	8007c4a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c3a:	61fb      	str	r3, [r7, #28]
        break;
 8007c3c:	e005      	b.n	8007c4a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007c48:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f000 80fb 	beq.w	8007e48 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	685a      	ldr	r2, [r3, #4]
 8007c56:	4613      	mov	r3, r2
 8007c58:	005b      	lsls	r3, r3, #1
 8007c5a:	4413      	add	r3, r2
 8007c5c:	69fa      	ldr	r2, [r7, #28]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d305      	bcc.n	8007c6e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007c68:	69fa      	ldr	r2, [r7, #28]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d903      	bls.n	8007c76 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007c74:	e0e8      	b.n	8007e48 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	461c      	mov	r4, r3
 8007c7c:	4615      	mov	r5, r2
 8007c7e:	f04f 0200 	mov.w	r2, #0
 8007c82:	f04f 0300 	mov.w	r3, #0
 8007c86:	022b      	lsls	r3, r5, #8
 8007c88:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007c8c:	0222      	lsls	r2, r4, #8
 8007c8e:	68f9      	ldr	r1, [r7, #12]
 8007c90:	6849      	ldr	r1, [r1, #4]
 8007c92:	0849      	lsrs	r1, r1, #1
 8007c94:	2000      	movs	r0, #0
 8007c96:	4688      	mov	r8, r1
 8007c98:	4681      	mov	r9, r0
 8007c9a:	eb12 0a08 	adds.w	sl, r2, r8
 8007c9e:	eb43 0b09 	adc.w	fp, r3, r9
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	603b      	str	r3, [r7, #0]
 8007caa:	607a      	str	r2, [r7, #4]
 8007cac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cb0:	4650      	mov	r0, sl
 8007cb2:	4659      	mov	r1, fp
 8007cb4:	f7f8 ffe8 	bl	8000c88 <__aeabi_uldivmod>
 8007cb8:	4602      	mov	r2, r0
 8007cba:	460b      	mov	r3, r1
 8007cbc:	4613      	mov	r3, r2
 8007cbe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007cc6:	d308      	bcc.n	8007cda <UART_SetConfig+0x3de>
 8007cc8:	69bb      	ldr	r3, [r7, #24]
 8007cca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007cce:	d204      	bcs.n	8007cda <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	69ba      	ldr	r2, [r7, #24]
 8007cd6:	60da      	str	r2, [r3, #12]
 8007cd8:	e0b6      	b.n	8007e48 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007ce0:	e0b2      	b.n	8007e48 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	69db      	ldr	r3, [r3, #28]
 8007ce6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cea:	d15e      	bne.n	8007daa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007cec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007cf0:	2b08      	cmp	r3, #8
 8007cf2:	d828      	bhi.n	8007d46 <UART_SetConfig+0x44a>
 8007cf4:	a201      	add	r2, pc, #4	@ (adr r2, 8007cfc <UART_SetConfig+0x400>)
 8007cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cfa:	bf00      	nop
 8007cfc:	08007d21 	.word	0x08007d21
 8007d00:	08007d29 	.word	0x08007d29
 8007d04:	08007d31 	.word	0x08007d31
 8007d08:	08007d47 	.word	0x08007d47
 8007d0c:	08007d37 	.word	0x08007d37
 8007d10:	08007d47 	.word	0x08007d47
 8007d14:	08007d47 	.word	0x08007d47
 8007d18:	08007d47 	.word	0x08007d47
 8007d1c:	08007d3f 	.word	0x08007d3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d20:	f7fc ff64 	bl	8004bec <HAL_RCC_GetPCLK1Freq>
 8007d24:	61f8      	str	r0, [r7, #28]
        break;
 8007d26:	e014      	b.n	8007d52 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d28:	f7fc ff76 	bl	8004c18 <HAL_RCC_GetPCLK2Freq>
 8007d2c:	61f8      	str	r0, [r7, #28]
        break;
 8007d2e:	e010      	b.n	8007d52 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d30:	4b4d      	ldr	r3, [pc, #308]	@ (8007e68 <UART_SetConfig+0x56c>)
 8007d32:	61fb      	str	r3, [r7, #28]
        break;
 8007d34:	e00d      	b.n	8007d52 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d36:	f7fc fec1 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8007d3a:	61f8      	str	r0, [r7, #28]
        break;
 8007d3c:	e009      	b.n	8007d52 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d42:	61fb      	str	r3, [r7, #28]
        break;
 8007d44:	e005      	b.n	8007d52 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007d46:	2300      	movs	r3, #0
 8007d48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007d50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d077      	beq.n	8007e48 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	005a      	lsls	r2, r3, #1
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	085b      	lsrs	r3, r3, #1
 8007d62:	441a      	add	r2, r3
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d6c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	2b0f      	cmp	r3, #15
 8007d72:	d916      	bls.n	8007da2 <UART_SetConfig+0x4a6>
 8007d74:	69bb      	ldr	r3, [r7, #24]
 8007d76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d7a:	d212      	bcs.n	8007da2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	f023 030f 	bic.w	r3, r3, #15
 8007d84:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	085b      	lsrs	r3, r3, #1
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	f003 0307 	and.w	r3, r3, #7
 8007d90:	b29a      	uxth	r2, r3
 8007d92:	8afb      	ldrh	r3, [r7, #22]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	8afa      	ldrh	r2, [r7, #22]
 8007d9e:	60da      	str	r2, [r3, #12]
 8007da0:	e052      	b.n	8007e48 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007da8:	e04e      	b.n	8007e48 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007daa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007dae:	2b08      	cmp	r3, #8
 8007db0:	d827      	bhi.n	8007e02 <UART_SetConfig+0x506>
 8007db2:	a201      	add	r2, pc, #4	@ (adr r2, 8007db8 <UART_SetConfig+0x4bc>)
 8007db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db8:	08007ddd 	.word	0x08007ddd
 8007dbc:	08007de5 	.word	0x08007de5
 8007dc0:	08007ded 	.word	0x08007ded
 8007dc4:	08007e03 	.word	0x08007e03
 8007dc8:	08007df3 	.word	0x08007df3
 8007dcc:	08007e03 	.word	0x08007e03
 8007dd0:	08007e03 	.word	0x08007e03
 8007dd4:	08007e03 	.word	0x08007e03
 8007dd8:	08007dfb 	.word	0x08007dfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ddc:	f7fc ff06 	bl	8004bec <HAL_RCC_GetPCLK1Freq>
 8007de0:	61f8      	str	r0, [r7, #28]
        break;
 8007de2:	e014      	b.n	8007e0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007de4:	f7fc ff18 	bl	8004c18 <HAL_RCC_GetPCLK2Freq>
 8007de8:	61f8      	str	r0, [r7, #28]
        break;
 8007dea:	e010      	b.n	8007e0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007dec:	4b1e      	ldr	r3, [pc, #120]	@ (8007e68 <UART_SetConfig+0x56c>)
 8007dee:	61fb      	str	r3, [r7, #28]
        break;
 8007df0:	e00d      	b.n	8007e0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007df2:	f7fc fe63 	bl	8004abc <HAL_RCC_GetSysClockFreq>
 8007df6:	61f8      	str	r0, [r7, #28]
        break;
 8007df8:	e009      	b.n	8007e0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007dfe:	61fb      	str	r3, [r7, #28]
        break;
 8007e00:	e005      	b.n	8007e0e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007e02:	2300      	movs	r3, #0
 8007e04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007e0c:	bf00      	nop
    }

    if (pclk != 0U)
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d019      	beq.n	8007e48 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	085a      	lsrs	r2, r3, #1
 8007e1a:	69fb      	ldr	r3, [r7, #28]
 8007e1c:	441a      	add	r2, r3
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	685b      	ldr	r3, [r3, #4]
 8007e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e26:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e28:	69bb      	ldr	r3, [r7, #24]
 8007e2a:	2b0f      	cmp	r3, #15
 8007e2c:	d909      	bls.n	8007e42 <UART_SetConfig+0x546>
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e34:	d205      	bcs.n	8007e42 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	b29a      	uxth	r2, r3
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	60da      	str	r2, [r3, #12]
 8007e40:	e002      	b.n	8007e48 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2200      	movs	r2, #0
 8007e52:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007e54:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3728      	adds	r7, #40	@ 0x28
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e62:	bf00      	nop
 8007e64:	40008000 	.word	0x40008000
 8007e68:	00f42400 	.word	0x00f42400

08007e6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e78:	f003 0308 	and.w	r3, r3, #8
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d00a      	beq.n	8007e96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	430a      	orrs	r2, r1
 8007e94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e9a:	f003 0301 	and.w	r3, r3, #1
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00a      	beq.n	8007eb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	430a      	orrs	r2, r1
 8007eb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ebc:	f003 0302 	and.w	r3, r3, #2
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d00a      	beq.n	8007eda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	685b      	ldr	r3, [r3, #4]
 8007eca:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	430a      	orrs	r2, r1
 8007ed8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ede:	f003 0304 	and.w	r3, r3, #4
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00a      	beq.n	8007efc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	430a      	orrs	r2, r1
 8007efa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f00:	f003 0310 	and.w	r3, r3, #16
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d00a      	beq.n	8007f1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	430a      	orrs	r2, r1
 8007f1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f22:	f003 0320 	and.w	r3, r3, #32
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00a      	beq.n	8007f40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	430a      	orrs	r2, r1
 8007f3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d01a      	beq.n	8007f82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	430a      	orrs	r2, r1
 8007f60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f6a:	d10a      	bne.n	8007f82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	430a      	orrs	r2, r1
 8007f80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d00a      	beq.n	8007fa4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	430a      	orrs	r2, r1
 8007fa2:	605a      	str	r2, [r3, #4]
  }
}
 8007fa4:	bf00      	nop
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b098      	sub	sp, #96	@ 0x60
 8007fb4:	af02      	add	r7, sp, #8
 8007fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007fc0:	f7fa fe58 	bl	8002c74 <HAL_GetTick>
 8007fc4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f003 0308 	and.w	r3, r3, #8
 8007fd0:	2b08      	cmp	r3, #8
 8007fd2:	d12e      	bne.n	8008032 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fd4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007fd8:	9300      	str	r3, [sp, #0]
 8007fda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 f88c 	bl	8008100 <UART_WaitOnFlagUntilTimeout>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d021      	beq.n	8008032 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ff6:	e853 3f00 	ldrex	r3, [r3]
 8007ffa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ffe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008002:	653b      	str	r3, [r7, #80]	@ 0x50
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	461a      	mov	r2, r3
 800800a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800800c:	647b      	str	r3, [r7, #68]	@ 0x44
 800800e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008010:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008012:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008014:	e841 2300 	strex	r3, r2, [r1]
 8008018:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800801a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800801c:	2b00      	cmp	r3, #0
 800801e:	d1e6      	bne.n	8007fee <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2220      	movs	r2, #32
 8008024:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800802e:	2303      	movs	r3, #3
 8008030:	e062      	b.n	80080f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f003 0304 	and.w	r3, r3, #4
 800803c:	2b04      	cmp	r3, #4
 800803e:	d149      	bne.n	80080d4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008040:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008044:	9300      	str	r3, [sp, #0]
 8008046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008048:	2200      	movs	r2, #0
 800804a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 f856 	bl	8008100 <UART_WaitOnFlagUntilTimeout>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d03c      	beq.n	80080d4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008062:	e853 3f00 	ldrex	r3, [r3]
 8008066:	623b      	str	r3, [r7, #32]
   return(result);
 8008068:	6a3b      	ldr	r3, [r7, #32]
 800806a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800806e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	461a      	mov	r2, r3
 8008076:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008078:	633b      	str	r3, [r7, #48]	@ 0x30
 800807a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800807e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008080:	e841 2300 	strex	r3, r2, [r1]
 8008084:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1e6      	bne.n	800805a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	3308      	adds	r3, #8
 8008092:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	e853 3f00 	ldrex	r3, [r3]
 800809a:	60fb      	str	r3, [r7, #12]
   return(result);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f023 0301 	bic.w	r3, r3, #1
 80080a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	3308      	adds	r3, #8
 80080aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80080ac:	61fa      	str	r2, [r7, #28]
 80080ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b0:	69b9      	ldr	r1, [r7, #24]
 80080b2:	69fa      	ldr	r2, [r7, #28]
 80080b4:	e841 2300 	strex	r3, r2, [r1]
 80080b8:	617b      	str	r3, [r7, #20]
   return(result);
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d1e5      	bne.n	800808c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2220      	movs	r2, #32
 80080c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80080d0:	2303      	movs	r3, #3
 80080d2:	e011      	b.n	80080f8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2220      	movs	r2, #32
 80080d8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2220      	movs	r2, #32
 80080de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2200      	movs	r2, #0
 80080ec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3758      	adds	r7, #88	@ 0x58
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b084      	sub	sp, #16
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	603b      	str	r3, [r7, #0]
 800810c:	4613      	mov	r3, r2
 800810e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008110:	e04f      	b.n	80081b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008112:	69bb      	ldr	r3, [r7, #24]
 8008114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008118:	d04b      	beq.n	80081b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800811a:	f7fa fdab 	bl	8002c74 <HAL_GetTick>
 800811e:	4602      	mov	r2, r0
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	1ad3      	subs	r3, r2, r3
 8008124:	69ba      	ldr	r2, [r7, #24]
 8008126:	429a      	cmp	r2, r3
 8008128:	d302      	bcc.n	8008130 <UART_WaitOnFlagUntilTimeout+0x30>
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d101      	bne.n	8008134 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008130:	2303      	movs	r3, #3
 8008132:	e04e      	b.n	80081d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f003 0304 	and.w	r3, r3, #4
 800813e:	2b00      	cmp	r3, #0
 8008140:	d037      	beq.n	80081b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	2b80      	cmp	r3, #128	@ 0x80
 8008146:	d034      	beq.n	80081b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	2b40      	cmp	r3, #64	@ 0x40
 800814c:	d031      	beq.n	80081b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	69db      	ldr	r3, [r3, #28]
 8008154:	f003 0308 	and.w	r3, r3, #8
 8008158:	2b08      	cmp	r3, #8
 800815a:	d110      	bne.n	800817e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2208      	movs	r2, #8
 8008162:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008164:	68f8      	ldr	r0, [r7, #12]
 8008166:	f000 f8ff 	bl	8008368 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2208      	movs	r2, #8
 800816e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2200      	movs	r2, #0
 8008176:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	e029      	b.n	80081d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	69db      	ldr	r3, [r3, #28]
 8008184:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008188:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800818c:	d111      	bne.n	80081b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008196:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f000 f8e5 	bl	8008368 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2220      	movs	r2, #32
 80081a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2200      	movs	r2, #0
 80081aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80081ae:	2303      	movs	r3, #3
 80081b0:	e00f      	b.n	80081d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	69da      	ldr	r2, [r3, #28]
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	4013      	ands	r3, r2
 80081bc:	68ba      	ldr	r2, [r7, #8]
 80081be:	429a      	cmp	r2, r3
 80081c0:	bf0c      	ite	eq
 80081c2:	2301      	moveq	r3, #1
 80081c4:	2300      	movne	r3, #0
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	461a      	mov	r2, r3
 80081ca:	79fb      	ldrb	r3, [r7, #7]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d0a0      	beq.n	8008112 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3710      	adds	r7, #16
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
	...

080081dc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80081dc:	b480      	push	{r7}
 80081de:	b097      	sub	sp, #92	@ 0x5c
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	4613      	mov	r3, r2
 80081e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	68ba      	ldr	r2, [r7, #8]
 80081ee:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	88fa      	ldrh	r2, [r7, #6]
 80081f4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	88fa      	ldrh	r2, [r7, #6]
 80081fc:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2200      	movs	r2, #0
 8008204:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800820e:	d10e      	bne.n	800822e <UART_Start_Receive_IT+0x52>
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	691b      	ldr	r3, [r3, #16]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d105      	bne.n	8008224 <UART_Start_Receive_IT+0x48>
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800821e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008222:	e02d      	b.n	8008280 <UART_Start_Receive_IT+0xa4>
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	22ff      	movs	r2, #255	@ 0xff
 8008228:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800822c:	e028      	b.n	8008280 <UART_Start_Receive_IT+0xa4>
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d10d      	bne.n	8008252 <UART_Start_Receive_IT+0x76>
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	691b      	ldr	r3, [r3, #16]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d104      	bne.n	8008248 <UART_Start_Receive_IT+0x6c>
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	22ff      	movs	r2, #255	@ 0xff
 8008242:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008246:	e01b      	b.n	8008280 <UART_Start_Receive_IT+0xa4>
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	227f      	movs	r2, #127	@ 0x7f
 800824c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008250:	e016      	b.n	8008280 <UART_Start_Receive_IT+0xa4>
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800825a:	d10d      	bne.n	8008278 <UART_Start_Receive_IT+0x9c>
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	691b      	ldr	r3, [r3, #16]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d104      	bne.n	800826e <UART_Start_Receive_IT+0x92>
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	227f      	movs	r2, #127	@ 0x7f
 8008268:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800826c:	e008      	b.n	8008280 <UART_Start_Receive_IT+0xa4>
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	223f      	movs	r2, #63	@ 0x3f
 8008272:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8008276:	e003      	b.n	8008280 <UART_Start_Receive_IT+0xa4>
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2200      	movs	r2, #0
 8008284:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2222      	movs	r2, #34	@ 0x22
 800828c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	3308      	adds	r3, #8
 8008296:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008298:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800829a:	e853 3f00 	ldrex	r3, [r3]
 800829e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80082a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a2:	f043 0301 	orr.w	r3, r3, #1
 80082a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	3308      	adds	r3, #8
 80082ae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80082b0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80082b2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80082b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80082b8:	e841 2300 	strex	r3, r2, [r1]
 80082bc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80082be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d1e5      	bne.n	8008290 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082cc:	d107      	bne.n	80082de <UART_Start_Receive_IT+0x102>
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d103      	bne.n	80082de <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	4a21      	ldr	r2, [pc, #132]	@ (8008360 <UART_Start_Receive_IT+0x184>)
 80082da:	669a      	str	r2, [r3, #104]	@ 0x68
 80082dc:	e002      	b.n	80082e4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	4a20      	ldr	r2, [pc, #128]	@ (8008364 <UART_Start_Receive_IT+0x188>)
 80082e2:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	691b      	ldr	r3, [r3, #16]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d019      	beq.n	8008320 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f4:	e853 3f00 	ldrex	r3, [r3]
 80082f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80082fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082fc:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008300:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	461a      	mov	r2, r3
 8008308:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800830a:	637b      	str	r3, [r7, #52]	@ 0x34
 800830c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800830e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008310:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008312:	e841 2300 	strex	r3, r2, [r1]
 8008316:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1e6      	bne.n	80082ec <UART_Start_Receive_IT+0x110>
 800831e:	e018      	b.n	8008352 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	e853 3f00 	ldrex	r3, [r3]
 800832c:	613b      	str	r3, [r7, #16]
   return(result);
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	f043 0320 	orr.w	r3, r3, #32
 8008334:	653b      	str	r3, [r7, #80]	@ 0x50
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	461a      	mov	r2, r3
 800833c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800833e:	623b      	str	r3, [r7, #32]
 8008340:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008342:	69f9      	ldr	r1, [r7, #28]
 8008344:	6a3a      	ldr	r2, [r7, #32]
 8008346:	e841 2300 	strex	r3, r2, [r1]
 800834a:	61bb      	str	r3, [r7, #24]
   return(result);
 800834c:	69bb      	ldr	r3, [r7, #24]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d1e6      	bne.n	8008320 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8008352:	2300      	movs	r3, #0
}
 8008354:	4618      	mov	r0, r3
 8008356:	375c      	adds	r7, #92	@ 0x5c
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr
 8008360:	0800866d 	.word	0x0800866d
 8008364:	080084b1 	.word	0x080084b1

08008368 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008368:	b480      	push	{r7}
 800836a:	b095      	sub	sp, #84	@ 0x54
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008378:	e853 3f00 	ldrex	r3, [r3]
 800837c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800837e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008380:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008384:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	461a      	mov	r2, r3
 800838c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800838e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008390:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008392:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008394:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008396:	e841 2300 	strex	r3, r2, [r1]
 800839a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800839c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d1e6      	bne.n	8008370 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	3308      	adds	r3, #8
 80083a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083aa:	6a3b      	ldr	r3, [r7, #32]
 80083ac:	e853 3f00 	ldrex	r3, [r3]
 80083b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	f023 0301 	bic.w	r3, r3, #1
 80083b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	3308      	adds	r3, #8
 80083c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80083c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80083c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80083c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083ca:	e841 2300 	strex	r3, r2, [r1]
 80083ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80083d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d1e5      	bne.n	80083a2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d118      	bne.n	8008410 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	e853 3f00 	ldrex	r3, [r3]
 80083ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80083ec:	68bb      	ldr	r3, [r7, #8]
 80083ee:	f023 0310 	bic.w	r3, r3, #16
 80083f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	461a      	mov	r2, r3
 80083fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083fc:	61bb      	str	r3, [r7, #24]
 80083fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008400:	6979      	ldr	r1, [r7, #20]
 8008402:	69ba      	ldr	r2, [r7, #24]
 8008404:	e841 2300 	strex	r3, r2, [r1]
 8008408:	613b      	str	r3, [r7, #16]
   return(result);
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d1e6      	bne.n	80083de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2220      	movs	r2, #32
 8008414:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008424:	bf00      	nop
 8008426:	3754      	adds	r7, #84	@ 0x54
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800843c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2200      	movs	r2, #0
 8008442:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2200      	movs	r2, #0
 800844a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800844e:	68f8      	ldr	r0, [r7, #12]
 8008450:	f7f9 fd42 	bl	8001ed8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008454:	bf00      	nop
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b088      	sub	sp, #32
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	e853 3f00 	ldrex	r3, [r3]
 8008470:	60bb      	str	r3, [r7, #8]
   return(result);
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008478:	61fb      	str	r3, [r7, #28]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	461a      	mov	r2, r3
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	61bb      	str	r3, [r7, #24]
 8008484:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008486:	6979      	ldr	r1, [r7, #20]
 8008488:	69ba      	ldr	r2, [r7, #24]
 800848a:	e841 2300 	strex	r3, r2, [r1]
 800848e:	613b      	str	r3, [r7, #16]
   return(result);
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d1e6      	bne.n	8008464 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2220      	movs	r2, #32
 800849a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f7ff fa14 	bl	80078d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084a8:	bf00      	nop
 80084aa:	3720      	adds	r7, #32
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b09c      	sub	sp, #112	@ 0x70
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80084be:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084c8:	2b22      	cmp	r3, #34	@ 0x22
 80084ca:	f040 80be 	bne.w	800864a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80084d4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80084d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80084dc:	b2d9      	uxtb	r1, r3
 80084de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80084e2:	b2da      	uxtb	r2, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084e8:	400a      	ands	r2, r1
 80084ea:	b2d2      	uxtb	r2, r2
 80084ec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084f2:	1c5a      	adds	r2, r3, #1
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80084fe:	b29b      	uxth	r3, r3
 8008500:	3b01      	subs	r3, #1
 8008502:	b29a      	uxth	r2, r3
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8008510:	b29b      	uxth	r3, r3
 8008512:	2b00      	cmp	r3, #0
 8008514:	f040 80a3 	bne.w	800865e <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800851e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008520:	e853 3f00 	ldrex	r3, [r3]
 8008524:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008526:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008528:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800852c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	461a      	mov	r2, r3
 8008534:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008536:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008538:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800853a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800853c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800853e:	e841 2300 	strex	r3, r2, [r1]
 8008542:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008544:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008546:	2b00      	cmp	r3, #0
 8008548:	d1e6      	bne.n	8008518 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	3308      	adds	r3, #8
 8008550:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008554:	e853 3f00 	ldrex	r3, [r3]
 8008558:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800855a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800855c:	f023 0301 	bic.w	r3, r3, #1
 8008560:	667b      	str	r3, [r7, #100]	@ 0x64
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	3308      	adds	r3, #8
 8008568:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800856a:	647a      	str	r2, [r7, #68]	@ 0x44
 800856c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008570:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008572:	e841 2300 	strex	r3, r2, [r1]
 8008576:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800857a:	2b00      	cmp	r3, #0
 800857c:	d1e5      	bne.n	800854a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2220      	movs	r2, #32
 8008582:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2200      	movs	r2, #0
 800858a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a34      	ldr	r2, [pc, #208]	@ (8008668 <UART_RxISR_8BIT+0x1b8>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d01f      	beq.n	80085dc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d018      	beq.n	80085dc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b2:	e853 3f00 	ldrex	r3, [r3]
 80085b6:	623b      	str	r3, [r7, #32]
   return(result);
 80085b8:	6a3b      	ldr	r3, [r7, #32]
 80085ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80085be:	663b      	str	r3, [r7, #96]	@ 0x60
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	461a      	mov	r2, r3
 80085c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80085c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80085ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80085ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085d0:	e841 2300 	strex	r3, r2, [r1]
 80085d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80085d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d1e6      	bne.n	80085aa <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d12e      	bne.n	8008642 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2200      	movs	r2, #0
 80085e8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	e853 3f00 	ldrex	r3, [r3]
 80085f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f023 0310 	bic.w	r3, r3, #16
 80085fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	461a      	mov	r2, r3
 8008606:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008608:	61fb      	str	r3, [r7, #28]
 800860a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860c:	69b9      	ldr	r1, [r7, #24]
 800860e:	69fa      	ldr	r2, [r7, #28]
 8008610:	e841 2300 	strex	r3, r2, [r1]
 8008614:	617b      	str	r3, [r7, #20]
   return(result);
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1e6      	bne.n	80085ea <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	69db      	ldr	r3, [r3, #28]
 8008622:	f003 0310 	and.w	r3, r3, #16
 8008626:	2b10      	cmp	r3, #16
 8008628:	d103      	bne.n	8008632 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2210      	movs	r2, #16
 8008630:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8008638:	4619      	mov	r1, r3
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f7ff f952 	bl	80078e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008640:	e00d      	b.n	800865e <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f7f9 fb40 	bl	8001cc8 <HAL_UART_RxCpltCallback>
}
 8008648:	e009      	b.n	800865e <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	8b1b      	ldrh	r3, [r3, #24]
 8008650:	b29a      	uxth	r2, r3
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f042 0208 	orr.w	r2, r2, #8
 800865a:	b292      	uxth	r2, r2
 800865c:	831a      	strh	r2, [r3, #24]
}
 800865e:	bf00      	nop
 8008660:	3770      	adds	r7, #112	@ 0x70
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	40008000 	.word	0x40008000

0800866c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b09c      	sub	sp, #112	@ 0x70
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800867a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008684:	2b22      	cmp	r3, #34	@ 0x22
 8008686:	f040 80be 	bne.w	8008806 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008690:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008698:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800869a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800869e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80086a2:	4013      	ands	r3, r2
 80086a4:	b29a      	uxth	r2, r3
 80086a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80086a8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086ae:	1c9a      	adds	r2, r3, #2
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	3b01      	subs	r3, #1
 80086be:	b29a      	uxth	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	f040 80a3 	bne.w	800881a <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086dc:	e853 3f00 	ldrex	r3, [r3]
 80086e0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80086e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80086e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	461a      	mov	r2, r3
 80086f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80086f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80086f4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80086f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80086fa:	e841 2300 	strex	r3, r2, [r1]
 80086fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008700:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008702:	2b00      	cmp	r3, #0
 8008704:	d1e6      	bne.n	80086d4 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	3308      	adds	r3, #8
 800870c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008710:	e853 3f00 	ldrex	r3, [r3]
 8008714:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008718:	f023 0301 	bic.w	r3, r3, #1
 800871c:	663b      	str	r3, [r7, #96]	@ 0x60
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	3308      	adds	r3, #8
 8008724:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008726:	643a      	str	r2, [r7, #64]	@ 0x40
 8008728:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800872a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800872c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800872e:	e841 2300 	strex	r3, r2, [r1]
 8008732:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008736:	2b00      	cmp	r3, #0
 8008738:	d1e5      	bne.n	8008706 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2220      	movs	r2, #32
 800873e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	4a34      	ldr	r2, [pc, #208]	@ (8008824 <UART_RxISR_16BIT+0x1b8>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d01f      	beq.n	8008798 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008762:	2b00      	cmp	r3, #0
 8008764:	d018      	beq.n	8008798 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876c:	6a3b      	ldr	r3, [r7, #32]
 800876e:	e853 3f00 	ldrex	r3, [r3]
 8008772:	61fb      	str	r3, [r7, #28]
   return(result);
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800877a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	461a      	mov	r2, r3
 8008782:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008784:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008786:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008788:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800878a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800878c:	e841 2300 	strex	r3, r2, [r1]
 8008790:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008794:	2b00      	cmp	r3, #0
 8008796:	d1e6      	bne.n	8008766 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800879c:	2b01      	cmp	r3, #1
 800879e:	d12e      	bne.n	80087fe <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	e853 3f00 	ldrex	r3, [r3]
 80087b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	f023 0310 	bic.w	r3, r3, #16
 80087ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	461a      	mov	r2, r3
 80087c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80087c4:	61bb      	str	r3, [r7, #24]
 80087c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c8:	6979      	ldr	r1, [r7, #20]
 80087ca:	69ba      	ldr	r2, [r7, #24]
 80087cc:	e841 2300 	strex	r3, r2, [r1]
 80087d0:	613b      	str	r3, [r7, #16]
   return(result);
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d1e6      	bne.n	80087a6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	69db      	ldr	r3, [r3, #28]
 80087de:	f003 0310 	and.w	r3, r3, #16
 80087e2:	2b10      	cmp	r3, #16
 80087e4:	d103      	bne.n	80087ee <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	2210      	movs	r2, #16
 80087ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80087f4:	4619      	mov	r1, r3
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f7ff f874 	bl	80078e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80087fc:	e00d      	b.n	800881a <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f7f9 fa62 	bl	8001cc8 <HAL_UART_RxCpltCallback>
}
 8008804:	e009      	b.n	800881a <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	8b1b      	ldrh	r3, [r3, #24]
 800880c:	b29a      	uxth	r2, r3
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f042 0208 	orr.w	r2, r2, #8
 8008816:	b292      	uxth	r2, r2
 8008818:	831a      	strh	r2, [r3, #24]
}
 800881a:	bf00      	nop
 800881c:	3770      	adds	r7, #112	@ 0x70
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	40008000 	.word	0x40008000

08008828 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008830:	bf00      	nop
 8008832:	370c      	adds	r7, #12
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <__cvt>:
 800883c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008840:	ec57 6b10 	vmov	r6, r7, d0
 8008844:	2f00      	cmp	r7, #0
 8008846:	460c      	mov	r4, r1
 8008848:	4619      	mov	r1, r3
 800884a:	463b      	mov	r3, r7
 800884c:	bfbb      	ittet	lt
 800884e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008852:	461f      	movlt	r7, r3
 8008854:	2300      	movge	r3, #0
 8008856:	232d      	movlt	r3, #45	@ 0x2d
 8008858:	700b      	strb	r3, [r1, #0]
 800885a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800885c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008860:	4691      	mov	r9, r2
 8008862:	f023 0820 	bic.w	r8, r3, #32
 8008866:	bfbc      	itt	lt
 8008868:	4632      	movlt	r2, r6
 800886a:	4616      	movlt	r6, r2
 800886c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008870:	d005      	beq.n	800887e <__cvt+0x42>
 8008872:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008876:	d100      	bne.n	800887a <__cvt+0x3e>
 8008878:	3401      	adds	r4, #1
 800887a:	2102      	movs	r1, #2
 800887c:	e000      	b.n	8008880 <__cvt+0x44>
 800887e:	2103      	movs	r1, #3
 8008880:	ab03      	add	r3, sp, #12
 8008882:	9301      	str	r3, [sp, #4]
 8008884:	ab02      	add	r3, sp, #8
 8008886:	9300      	str	r3, [sp, #0]
 8008888:	ec47 6b10 	vmov	d0, r6, r7
 800888c:	4653      	mov	r3, sl
 800888e:	4622      	mov	r2, r4
 8008890:	f001 fa8a 	bl	8009da8 <_dtoa_r>
 8008894:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008898:	4605      	mov	r5, r0
 800889a:	d119      	bne.n	80088d0 <__cvt+0x94>
 800889c:	f019 0f01 	tst.w	r9, #1
 80088a0:	d00e      	beq.n	80088c0 <__cvt+0x84>
 80088a2:	eb00 0904 	add.w	r9, r0, r4
 80088a6:	2200      	movs	r2, #0
 80088a8:	2300      	movs	r3, #0
 80088aa:	4630      	mov	r0, r6
 80088ac:	4639      	mov	r1, r7
 80088ae:	f7f8 f90b 	bl	8000ac8 <__aeabi_dcmpeq>
 80088b2:	b108      	cbz	r0, 80088b8 <__cvt+0x7c>
 80088b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80088b8:	2230      	movs	r2, #48	@ 0x30
 80088ba:	9b03      	ldr	r3, [sp, #12]
 80088bc:	454b      	cmp	r3, r9
 80088be:	d31e      	bcc.n	80088fe <__cvt+0xc2>
 80088c0:	9b03      	ldr	r3, [sp, #12]
 80088c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80088c4:	1b5b      	subs	r3, r3, r5
 80088c6:	4628      	mov	r0, r5
 80088c8:	6013      	str	r3, [r2, #0]
 80088ca:	b004      	add	sp, #16
 80088cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80088d4:	eb00 0904 	add.w	r9, r0, r4
 80088d8:	d1e5      	bne.n	80088a6 <__cvt+0x6a>
 80088da:	7803      	ldrb	r3, [r0, #0]
 80088dc:	2b30      	cmp	r3, #48	@ 0x30
 80088de:	d10a      	bne.n	80088f6 <__cvt+0xba>
 80088e0:	2200      	movs	r2, #0
 80088e2:	2300      	movs	r3, #0
 80088e4:	4630      	mov	r0, r6
 80088e6:	4639      	mov	r1, r7
 80088e8:	f7f8 f8ee 	bl	8000ac8 <__aeabi_dcmpeq>
 80088ec:	b918      	cbnz	r0, 80088f6 <__cvt+0xba>
 80088ee:	f1c4 0401 	rsb	r4, r4, #1
 80088f2:	f8ca 4000 	str.w	r4, [sl]
 80088f6:	f8da 3000 	ldr.w	r3, [sl]
 80088fa:	4499      	add	r9, r3
 80088fc:	e7d3      	b.n	80088a6 <__cvt+0x6a>
 80088fe:	1c59      	adds	r1, r3, #1
 8008900:	9103      	str	r1, [sp, #12]
 8008902:	701a      	strb	r2, [r3, #0]
 8008904:	e7d9      	b.n	80088ba <__cvt+0x7e>

08008906 <__exponent>:
 8008906:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008908:	2900      	cmp	r1, #0
 800890a:	bfba      	itte	lt
 800890c:	4249      	neglt	r1, r1
 800890e:	232d      	movlt	r3, #45	@ 0x2d
 8008910:	232b      	movge	r3, #43	@ 0x2b
 8008912:	2909      	cmp	r1, #9
 8008914:	7002      	strb	r2, [r0, #0]
 8008916:	7043      	strb	r3, [r0, #1]
 8008918:	dd29      	ble.n	800896e <__exponent+0x68>
 800891a:	f10d 0307 	add.w	r3, sp, #7
 800891e:	461d      	mov	r5, r3
 8008920:	270a      	movs	r7, #10
 8008922:	461a      	mov	r2, r3
 8008924:	fbb1 f6f7 	udiv	r6, r1, r7
 8008928:	fb07 1416 	mls	r4, r7, r6, r1
 800892c:	3430      	adds	r4, #48	@ 0x30
 800892e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008932:	460c      	mov	r4, r1
 8008934:	2c63      	cmp	r4, #99	@ 0x63
 8008936:	f103 33ff 	add.w	r3, r3, #4294967295
 800893a:	4631      	mov	r1, r6
 800893c:	dcf1      	bgt.n	8008922 <__exponent+0x1c>
 800893e:	3130      	adds	r1, #48	@ 0x30
 8008940:	1e94      	subs	r4, r2, #2
 8008942:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008946:	1c41      	adds	r1, r0, #1
 8008948:	4623      	mov	r3, r4
 800894a:	42ab      	cmp	r3, r5
 800894c:	d30a      	bcc.n	8008964 <__exponent+0x5e>
 800894e:	f10d 0309 	add.w	r3, sp, #9
 8008952:	1a9b      	subs	r3, r3, r2
 8008954:	42ac      	cmp	r4, r5
 8008956:	bf88      	it	hi
 8008958:	2300      	movhi	r3, #0
 800895a:	3302      	adds	r3, #2
 800895c:	4403      	add	r3, r0
 800895e:	1a18      	subs	r0, r3, r0
 8008960:	b003      	add	sp, #12
 8008962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008964:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008968:	f801 6f01 	strb.w	r6, [r1, #1]!
 800896c:	e7ed      	b.n	800894a <__exponent+0x44>
 800896e:	2330      	movs	r3, #48	@ 0x30
 8008970:	3130      	adds	r1, #48	@ 0x30
 8008972:	7083      	strb	r3, [r0, #2]
 8008974:	70c1      	strb	r1, [r0, #3]
 8008976:	1d03      	adds	r3, r0, #4
 8008978:	e7f1      	b.n	800895e <__exponent+0x58>
	...

0800897c <_printf_float>:
 800897c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008980:	b08d      	sub	sp, #52	@ 0x34
 8008982:	460c      	mov	r4, r1
 8008984:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008988:	4616      	mov	r6, r2
 800898a:	461f      	mov	r7, r3
 800898c:	4605      	mov	r5, r0
 800898e:	f001 f905 	bl	8009b9c <_localeconv_r>
 8008992:	6803      	ldr	r3, [r0, #0]
 8008994:	9304      	str	r3, [sp, #16]
 8008996:	4618      	mov	r0, r3
 8008998:	f7f7 fc6a 	bl	8000270 <strlen>
 800899c:	2300      	movs	r3, #0
 800899e:	930a      	str	r3, [sp, #40]	@ 0x28
 80089a0:	f8d8 3000 	ldr.w	r3, [r8]
 80089a4:	9005      	str	r0, [sp, #20]
 80089a6:	3307      	adds	r3, #7
 80089a8:	f023 0307 	bic.w	r3, r3, #7
 80089ac:	f103 0208 	add.w	r2, r3, #8
 80089b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80089b4:	f8d4 b000 	ldr.w	fp, [r4]
 80089b8:	f8c8 2000 	str.w	r2, [r8]
 80089bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80089c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80089c4:	9307      	str	r3, [sp, #28]
 80089c6:	f8cd 8018 	str.w	r8, [sp, #24]
 80089ca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80089ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089d2:	4b9c      	ldr	r3, [pc, #624]	@ (8008c44 <_printf_float+0x2c8>)
 80089d4:	f04f 32ff 	mov.w	r2, #4294967295
 80089d8:	f7f8 f8a8 	bl	8000b2c <__aeabi_dcmpun>
 80089dc:	bb70      	cbnz	r0, 8008a3c <_printf_float+0xc0>
 80089de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089e2:	4b98      	ldr	r3, [pc, #608]	@ (8008c44 <_printf_float+0x2c8>)
 80089e4:	f04f 32ff 	mov.w	r2, #4294967295
 80089e8:	f7f8 f882 	bl	8000af0 <__aeabi_dcmple>
 80089ec:	bb30      	cbnz	r0, 8008a3c <_printf_float+0xc0>
 80089ee:	2200      	movs	r2, #0
 80089f0:	2300      	movs	r3, #0
 80089f2:	4640      	mov	r0, r8
 80089f4:	4649      	mov	r1, r9
 80089f6:	f7f8 f871 	bl	8000adc <__aeabi_dcmplt>
 80089fa:	b110      	cbz	r0, 8008a02 <_printf_float+0x86>
 80089fc:	232d      	movs	r3, #45	@ 0x2d
 80089fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a02:	4a91      	ldr	r2, [pc, #580]	@ (8008c48 <_printf_float+0x2cc>)
 8008a04:	4b91      	ldr	r3, [pc, #580]	@ (8008c4c <_printf_float+0x2d0>)
 8008a06:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008a0a:	bf8c      	ite	hi
 8008a0c:	4690      	movhi	r8, r2
 8008a0e:	4698      	movls	r8, r3
 8008a10:	2303      	movs	r3, #3
 8008a12:	6123      	str	r3, [r4, #16]
 8008a14:	f02b 0304 	bic.w	r3, fp, #4
 8008a18:	6023      	str	r3, [r4, #0]
 8008a1a:	f04f 0900 	mov.w	r9, #0
 8008a1e:	9700      	str	r7, [sp, #0]
 8008a20:	4633      	mov	r3, r6
 8008a22:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008a24:	4621      	mov	r1, r4
 8008a26:	4628      	mov	r0, r5
 8008a28:	f000 f9d2 	bl	8008dd0 <_printf_common>
 8008a2c:	3001      	adds	r0, #1
 8008a2e:	f040 808d 	bne.w	8008b4c <_printf_float+0x1d0>
 8008a32:	f04f 30ff 	mov.w	r0, #4294967295
 8008a36:	b00d      	add	sp, #52	@ 0x34
 8008a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a3c:	4642      	mov	r2, r8
 8008a3e:	464b      	mov	r3, r9
 8008a40:	4640      	mov	r0, r8
 8008a42:	4649      	mov	r1, r9
 8008a44:	f7f8 f872 	bl	8000b2c <__aeabi_dcmpun>
 8008a48:	b140      	cbz	r0, 8008a5c <_printf_float+0xe0>
 8008a4a:	464b      	mov	r3, r9
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	bfbc      	itt	lt
 8008a50:	232d      	movlt	r3, #45	@ 0x2d
 8008a52:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008a56:	4a7e      	ldr	r2, [pc, #504]	@ (8008c50 <_printf_float+0x2d4>)
 8008a58:	4b7e      	ldr	r3, [pc, #504]	@ (8008c54 <_printf_float+0x2d8>)
 8008a5a:	e7d4      	b.n	8008a06 <_printf_float+0x8a>
 8008a5c:	6863      	ldr	r3, [r4, #4]
 8008a5e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008a62:	9206      	str	r2, [sp, #24]
 8008a64:	1c5a      	adds	r2, r3, #1
 8008a66:	d13b      	bne.n	8008ae0 <_printf_float+0x164>
 8008a68:	2306      	movs	r3, #6
 8008a6a:	6063      	str	r3, [r4, #4]
 8008a6c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008a70:	2300      	movs	r3, #0
 8008a72:	6022      	str	r2, [r4, #0]
 8008a74:	9303      	str	r3, [sp, #12]
 8008a76:	ab0a      	add	r3, sp, #40	@ 0x28
 8008a78:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008a7c:	ab09      	add	r3, sp, #36	@ 0x24
 8008a7e:	9300      	str	r3, [sp, #0]
 8008a80:	6861      	ldr	r1, [r4, #4]
 8008a82:	ec49 8b10 	vmov	d0, r8, r9
 8008a86:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	f7ff fed6 	bl	800883c <__cvt>
 8008a90:	9b06      	ldr	r3, [sp, #24]
 8008a92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008a94:	2b47      	cmp	r3, #71	@ 0x47
 8008a96:	4680      	mov	r8, r0
 8008a98:	d129      	bne.n	8008aee <_printf_float+0x172>
 8008a9a:	1cc8      	adds	r0, r1, #3
 8008a9c:	db02      	blt.n	8008aa4 <_printf_float+0x128>
 8008a9e:	6863      	ldr	r3, [r4, #4]
 8008aa0:	4299      	cmp	r1, r3
 8008aa2:	dd41      	ble.n	8008b28 <_printf_float+0x1ac>
 8008aa4:	f1aa 0a02 	sub.w	sl, sl, #2
 8008aa8:	fa5f fa8a 	uxtb.w	sl, sl
 8008aac:	3901      	subs	r1, #1
 8008aae:	4652      	mov	r2, sl
 8008ab0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008ab4:	9109      	str	r1, [sp, #36]	@ 0x24
 8008ab6:	f7ff ff26 	bl	8008906 <__exponent>
 8008aba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008abc:	1813      	adds	r3, r2, r0
 8008abe:	2a01      	cmp	r2, #1
 8008ac0:	4681      	mov	r9, r0
 8008ac2:	6123      	str	r3, [r4, #16]
 8008ac4:	dc02      	bgt.n	8008acc <_printf_float+0x150>
 8008ac6:	6822      	ldr	r2, [r4, #0]
 8008ac8:	07d2      	lsls	r2, r2, #31
 8008aca:	d501      	bpl.n	8008ad0 <_printf_float+0x154>
 8008acc:	3301      	adds	r3, #1
 8008ace:	6123      	str	r3, [r4, #16]
 8008ad0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d0a2      	beq.n	8008a1e <_printf_float+0xa2>
 8008ad8:	232d      	movs	r3, #45	@ 0x2d
 8008ada:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ade:	e79e      	b.n	8008a1e <_printf_float+0xa2>
 8008ae0:	9a06      	ldr	r2, [sp, #24]
 8008ae2:	2a47      	cmp	r2, #71	@ 0x47
 8008ae4:	d1c2      	bne.n	8008a6c <_printf_float+0xf0>
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1c0      	bne.n	8008a6c <_printf_float+0xf0>
 8008aea:	2301      	movs	r3, #1
 8008aec:	e7bd      	b.n	8008a6a <_printf_float+0xee>
 8008aee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008af2:	d9db      	bls.n	8008aac <_printf_float+0x130>
 8008af4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008af8:	d118      	bne.n	8008b2c <_printf_float+0x1b0>
 8008afa:	2900      	cmp	r1, #0
 8008afc:	6863      	ldr	r3, [r4, #4]
 8008afe:	dd0b      	ble.n	8008b18 <_printf_float+0x19c>
 8008b00:	6121      	str	r1, [r4, #16]
 8008b02:	b913      	cbnz	r3, 8008b0a <_printf_float+0x18e>
 8008b04:	6822      	ldr	r2, [r4, #0]
 8008b06:	07d0      	lsls	r0, r2, #31
 8008b08:	d502      	bpl.n	8008b10 <_printf_float+0x194>
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	440b      	add	r3, r1
 8008b0e:	6123      	str	r3, [r4, #16]
 8008b10:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008b12:	f04f 0900 	mov.w	r9, #0
 8008b16:	e7db      	b.n	8008ad0 <_printf_float+0x154>
 8008b18:	b913      	cbnz	r3, 8008b20 <_printf_float+0x1a4>
 8008b1a:	6822      	ldr	r2, [r4, #0]
 8008b1c:	07d2      	lsls	r2, r2, #31
 8008b1e:	d501      	bpl.n	8008b24 <_printf_float+0x1a8>
 8008b20:	3302      	adds	r3, #2
 8008b22:	e7f4      	b.n	8008b0e <_printf_float+0x192>
 8008b24:	2301      	movs	r3, #1
 8008b26:	e7f2      	b.n	8008b0e <_printf_float+0x192>
 8008b28:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008b2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b2e:	4299      	cmp	r1, r3
 8008b30:	db05      	blt.n	8008b3e <_printf_float+0x1c2>
 8008b32:	6823      	ldr	r3, [r4, #0]
 8008b34:	6121      	str	r1, [r4, #16]
 8008b36:	07d8      	lsls	r0, r3, #31
 8008b38:	d5ea      	bpl.n	8008b10 <_printf_float+0x194>
 8008b3a:	1c4b      	adds	r3, r1, #1
 8008b3c:	e7e7      	b.n	8008b0e <_printf_float+0x192>
 8008b3e:	2900      	cmp	r1, #0
 8008b40:	bfd4      	ite	le
 8008b42:	f1c1 0202 	rsble	r2, r1, #2
 8008b46:	2201      	movgt	r2, #1
 8008b48:	4413      	add	r3, r2
 8008b4a:	e7e0      	b.n	8008b0e <_printf_float+0x192>
 8008b4c:	6823      	ldr	r3, [r4, #0]
 8008b4e:	055a      	lsls	r2, r3, #21
 8008b50:	d407      	bmi.n	8008b62 <_printf_float+0x1e6>
 8008b52:	6923      	ldr	r3, [r4, #16]
 8008b54:	4642      	mov	r2, r8
 8008b56:	4631      	mov	r1, r6
 8008b58:	4628      	mov	r0, r5
 8008b5a:	47b8      	blx	r7
 8008b5c:	3001      	adds	r0, #1
 8008b5e:	d12b      	bne.n	8008bb8 <_printf_float+0x23c>
 8008b60:	e767      	b.n	8008a32 <_printf_float+0xb6>
 8008b62:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008b66:	f240 80dd 	bls.w	8008d24 <_printf_float+0x3a8>
 8008b6a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008b6e:	2200      	movs	r2, #0
 8008b70:	2300      	movs	r3, #0
 8008b72:	f7f7 ffa9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b76:	2800      	cmp	r0, #0
 8008b78:	d033      	beq.n	8008be2 <_printf_float+0x266>
 8008b7a:	4a37      	ldr	r2, [pc, #220]	@ (8008c58 <_printf_float+0x2dc>)
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	4631      	mov	r1, r6
 8008b80:	4628      	mov	r0, r5
 8008b82:	47b8      	blx	r7
 8008b84:	3001      	adds	r0, #1
 8008b86:	f43f af54 	beq.w	8008a32 <_printf_float+0xb6>
 8008b8a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008b8e:	4543      	cmp	r3, r8
 8008b90:	db02      	blt.n	8008b98 <_printf_float+0x21c>
 8008b92:	6823      	ldr	r3, [r4, #0]
 8008b94:	07d8      	lsls	r0, r3, #31
 8008b96:	d50f      	bpl.n	8008bb8 <_printf_float+0x23c>
 8008b98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b9c:	4631      	mov	r1, r6
 8008b9e:	4628      	mov	r0, r5
 8008ba0:	47b8      	blx	r7
 8008ba2:	3001      	adds	r0, #1
 8008ba4:	f43f af45 	beq.w	8008a32 <_printf_float+0xb6>
 8008ba8:	f04f 0900 	mov.w	r9, #0
 8008bac:	f108 38ff 	add.w	r8, r8, #4294967295
 8008bb0:	f104 0a1a 	add.w	sl, r4, #26
 8008bb4:	45c8      	cmp	r8, r9
 8008bb6:	dc09      	bgt.n	8008bcc <_printf_float+0x250>
 8008bb8:	6823      	ldr	r3, [r4, #0]
 8008bba:	079b      	lsls	r3, r3, #30
 8008bbc:	f100 8103 	bmi.w	8008dc6 <_printf_float+0x44a>
 8008bc0:	68e0      	ldr	r0, [r4, #12]
 8008bc2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008bc4:	4298      	cmp	r0, r3
 8008bc6:	bfb8      	it	lt
 8008bc8:	4618      	movlt	r0, r3
 8008bca:	e734      	b.n	8008a36 <_printf_float+0xba>
 8008bcc:	2301      	movs	r3, #1
 8008bce:	4652      	mov	r2, sl
 8008bd0:	4631      	mov	r1, r6
 8008bd2:	4628      	mov	r0, r5
 8008bd4:	47b8      	blx	r7
 8008bd6:	3001      	adds	r0, #1
 8008bd8:	f43f af2b 	beq.w	8008a32 <_printf_float+0xb6>
 8008bdc:	f109 0901 	add.w	r9, r9, #1
 8008be0:	e7e8      	b.n	8008bb4 <_printf_float+0x238>
 8008be2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	dc39      	bgt.n	8008c5c <_printf_float+0x2e0>
 8008be8:	4a1b      	ldr	r2, [pc, #108]	@ (8008c58 <_printf_float+0x2dc>)
 8008bea:	2301      	movs	r3, #1
 8008bec:	4631      	mov	r1, r6
 8008bee:	4628      	mov	r0, r5
 8008bf0:	47b8      	blx	r7
 8008bf2:	3001      	adds	r0, #1
 8008bf4:	f43f af1d 	beq.w	8008a32 <_printf_float+0xb6>
 8008bf8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008bfc:	ea59 0303 	orrs.w	r3, r9, r3
 8008c00:	d102      	bne.n	8008c08 <_printf_float+0x28c>
 8008c02:	6823      	ldr	r3, [r4, #0]
 8008c04:	07d9      	lsls	r1, r3, #31
 8008c06:	d5d7      	bpl.n	8008bb8 <_printf_float+0x23c>
 8008c08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c0c:	4631      	mov	r1, r6
 8008c0e:	4628      	mov	r0, r5
 8008c10:	47b8      	blx	r7
 8008c12:	3001      	adds	r0, #1
 8008c14:	f43f af0d 	beq.w	8008a32 <_printf_float+0xb6>
 8008c18:	f04f 0a00 	mov.w	sl, #0
 8008c1c:	f104 0b1a 	add.w	fp, r4, #26
 8008c20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c22:	425b      	negs	r3, r3
 8008c24:	4553      	cmp	r3, sl
 8008c26:	dc01      	bgt.n	8008c2c <_printf_float+0x2b0>
 8008c28:	464b      	mov	r3, r9
 8008c2a:	e793      	b.n	8008b54 <_printf_float+0x1d8>
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	465a      	mov	r2, fp
 8008c30:	4631      	mov	r1, r6
 8008c32:	4628      	mov	r0, r5
 8008c34:	47b8      	blx	r7
 8008c36:	3001      	adds	r0, #1
 8008c38:	f43f aefb 	beq.w	8008a32 <_printf_float+0xb6>
 8008c3c:	f10a 0a01 	add.w	sl, sl, #1
 8008c40:	e7ee      	b.n	8008c20 <_printf_float+0x2a4>
 8008c42:	bf00      	nop
 8008c44:	7fefffff 	.word	0x7fefffff
 8008c48:	0800dbb0 	.word	0x0800dbb0
 8008c4c:	0800dbac 	.word	0x0800dbac
 8008c50:	0800dbb8 	.word	0x0800dbb8
 8008c54:	0800dbb4 	.word	0x0800dbb4
 8008c58:	0800dcf2 	.word	0x0800dcf2
 8008c5c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008c5e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008c62:	4553      	cmp	r3, sl
 8008c64:	bfa8      	it	ge
 8008c66:	4653      	movge	r3, sl
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	4699      	mov	r9, r3
 8008c6c:	dc36      	bgt.n	8008cdc <_printf_float+0x360>
 8008c6e:	f04f 0b00 	mov.w	fp, #0
 8008c72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c76:	f104 021a 	add.w	r2, r4, #26
 8008c7a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008c7c:	9306      	str	r3, [sp, #24]
 8008c7e:	eba3 0309 	sub.w	r3, r3, r9
 8008c82:	455b      	cmp	r3, fp
 8008c84:	dc31      	bgt.n	8008cea <_printf_float+0x36e>
 8008c86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c88:	459a      	cmp	sl, r3
 8008c8a:	dc3a      	bgt.n	8008d02 <_printf_float+0x386>
 8008c8c:	6823      	ldr	r3, [r4, #0]
 8008c8e:	07da      	lsls	r2, r3, #31
 8008c90:	d437      	bmi.n	8008d02 <_printf_float+0x386>
 8008c92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c94:	ebaa 0903 	sub.w	r9, sl, r3
 8008c98:	9b06      	ldr	r3, [sp, #24]
 8008c9a:	ebaa 0303 	sub.w	r3, sl, r3
 8008c9e:	4599      	cmp	r9, r3
 8008ca0:	bfa8      	it	ge
 8008ca2:	4699      	movge	r9, r3
 8008ca4:	f1b9 0f00 	cmp.w	r9, #0
 8008ca8:	dc33      	bgt.n	8008d12 <_printf_float+0x396>
 8008caa:	f04f 0800 	mov.w	r8, #0
 8008cae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008cb2:	f104 0b1a 	add.w	fp, r4, #26
 8008cb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cb8:	ebaa 0303 	sub.w	r3, sl, r3
 8008cbc:	eba3 0309 	sub.w	r3, r3, r9
 8008cc0:	4543      	cmp	r3, r8
 8008cc2:	f77f af79 	ble.w	8008bb8 <_printf_float+0x23c>
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	465a      	mov	r2, fp
 8008cca:	4631      	mov	r1, r6
 8008ccc:	4628      	mov	r0, r5
 8008cce:	47b8      	blx	r7
 8008cd0:	3001      	adds	r0, #1
 8008cd2:	f43f aeae 	beq.w	8008a32 <_printf_float+0xb6>
 8008cd6:	f108 0801 	add.w	r8, r8, #1
 8008cda:	e7ec      	b.n	8008cb6 <_printf_float+0x33a>
 8008cdc:	4642      	mov	r2, r8
 8008cde:	4631      	mov	r1, r6
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	47b8      	blx	r7
 8008ce4:	3001      	adds	r0, #1
 8008ce6:	d1c2      	bne.n	8008c6e <_printf_float+0x2f2>
 8008ce8:	e6a3      	b.n	8008a32 <_printf_float+0xb6>
 8008cea:	2301      	movs	r3, #1
 8008cec:	4631      	mov	r1, r6
 8008cee:	4628      	mov	r0, r5
 8008cf0:	9206      	str	r2, [sp, #24]
 8008cf2:	47b8      	blx	r7
 8008cf4:	3001      	adds	r0, #1
 8008cf6:	f43f ae9c 	beq.w	8008a32 <_printf_float+0xb6>
 8008cfa:	9a06      	ldr	r2, [sp, #24]
 8008cfc:	f10b 0b01 	add.w	fp, fp, #1
 8008d00:	e7bb      	b.n	8008c7a <_printf_float+0x2fe>
 8008d02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d06:	4631      	mov	r1, r6
 8008d08:	4628      	mov	r0, r5
 8008d0a:	47b8      	blx	r7
 8008d0c:	3001      	adds	r0, #1
 8008d0e:	d1c0      	bne.n	8008c92 <_printf_float+0x316>
 8008d10:	e68f      	b.n	8008a32 <_printf_float+0xb6>
 8008d12:	9a06      	ldr	r2, [sp, #24]
 8008d14:	464b      	mov	r3, r9
 8008d16:	4442      	add	r2, r8
 8008d18:	4631      	mov	r1, r6
 8008d1a:	4628      	mov	r0, r5
 8008d1c:	47b8      	blx	r7
 8008d1e:	3001      	adds	r0, #1
 8008d20:	d1c3      	bne.n	8008caa <_printf_float+0x32e>
 8008d22:	e686      	b.n	8008a32 <_printf_float+0xb6>
 8008d24:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008d28:	f1ba 0f01 	cmp.w	sl, #1
 8008d2c:	dc01      	bgt.n	8008d32 <_printf_float+0x3b6>
 8008d2e:	07db      	lsls	r3, r3, #31
 8008d30:	d536      	bpl.n	8008da0 <_printf_float+0x424>
 8008d32:	2301      	movs	r3, #1
 8008d34:	4642      	mov	r2, r8
 8008d36:	4631      	mov	r1, r6
 8008d38:	4628      	mov	r0, r5
 8008d3a:	47b8      	blx	r7
 8008d3c:	3001      	adds	r0, #1
 8008d3e:	f43f ae78 	beq.w	8008a32 <_printf_float+0xb6>
 8008d42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d46:	4631      	mov	r1, r6
 8008d48:	4628      	mov	r0, r5
 8008d4a:	47b8      	blx	r7
 8008d4c:	3001      	adds	r0, #1
 8008d4e:	f43f ae70 	beq.w	8008a32 <_printf_float+0xb6>
 8008d52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008d56:	2200      	movs	r2, #0
 8008d58:	2300      	movs	r3, #0
 8008d5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d5e:	f7f7 feb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d62:	b9c0      	cbnz	r0, 8008d96 <_printf_float+0x41a>
 8008d64:	4653      	mov	r3, sl
 8008d66:	f108 0201 	add.w	r2, r8, #1
 8008d6a:	4631      	mov	r1, r6
 8008d6c:	4628      	mov	r0, r5
 8008d6e:	47b8      	blx	r7
 8008d70:	3001      	adds	r0, #1
 8008d72:	d10c      	bne.n	8008d8e <_printf_float+0x412>
 8008d74:	e65d      	b.n	8008a32 <_printf_float+0xb6>
 8008d76:	2301      	movs	r3, #1
 8008d78:	465a      	mov	r2, fp
 8008d7a:	4631      	mov	r1, r6
 8008d7c:	4628      	mov	r0, r5
 8008d7e:	47b8      	blx	r7
 8008d80:	3001      	adds	r0, #1
 8008d82:	f43f ae56 	beq.w	8008a32 <_printf_float+0xb6>
 8008d86:	f108 0801 	add.w	r8, r8, #1
 8008d8a:	45d0      	cmp	r8, sl
 8008d8c:	dbf3      	blt.n	8008d76 <_printf_float+0x3fa>
 8008d8e:	464b      	mov	r3, r9
 8008d90:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008d94:	e6df      	b.n	8008b56 <_printf_float+0x1da>
 8008d96:	f04f 0800 	mov.w	r8, #0
 8008d9a:	f104 0b1a 	add.w	fp, r4, #26
 8008d9e:	e7f4      	b.n	8008d8a <_printf_float+0x40e>
 8008da0:	2301      	movs	r3, #1
 8008da2:	4642      	mov	r2, r8
 8008da4:	e7e1      	b.n	8008d6a <_printf_float+0x3ee>
 8008da6:	2301      	movs	r3, #1
 8008da8:	464a      	mov	r2, r9
 8008daa:	4631      	mov	r1, r6
 8008dac:	4628      	mov	r0, r5
 8008dae:	47b8      	blx	r7
 8008db0:	3001      	adds	r0, #1
 8008db2:	f43f ae3e 	beq.w	8008a32 <_printf_float+0xb6>
 8008db6:	f108 0801 	add.w	r8, r8, #1
 8008dba:	68e3      	ldr	r3, [r4, #12]
 8008dbc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008dbe:	1a5b      	subs	r3, r3, r1
 8008dc0:	4543      	cmp	r3, r8
 8008dc2:	dcf0      	bgt.n	8008da6 <_printf_float+0x42a>
 8008dc4:	e6fc      	b.n	8008bc0 <_printf_float+0x244>
 8008dc6:	f04f 0800 	mov.w	r8, #0
 8008dca:	f104 0919 	add.w	r9, r4, #25
 8008dce:	e7f4      	b.n	8008dba <_printf_float+0x43e>

08008dd0 <_printf_common>:
 8008dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dd4:	4616      	mov	r6, r2
 8008dd6:	4698      	mov	r8, r3
 8008dd8:	688a      	ldr	r2, [r1, #8]
 8008dda:	690b      	ldr	r3, [r1, #16]
 8008ddc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008de0:	4293      	cmp	r3, r2
 8008de2:	bfb8      	it	lt
 8008de4:	4613      	movlt	r3, r2
 8008de6:	6033      	str	r3, [r6, #0]
 8008de8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008dec:	4607      	mov	r7, r0
 8008dee:	460c      	mov	r4, r1
 8008df0:	b10a      	cbz	r2, 8008df6 <_printf_common+0x26>
 8008df2:	3301      	adds	r3, #1
 8008df4:	6033      	str	r3, [r6, #0]
 8008df6:	6823      	ldr	r3, [r4, #0]
 8008df8:	0699      	lsls	r1, r3, #26
 8008dfa:	bf42      	ittt	mi
 8008dfc:	6833      	ldrmi	r3, [r6, #0]
 8008dfe:	3302      	addmi	r3, #2
 8008e00:	6033      	strmi	r3, [r6, #0]
 8008e02:	6825      	ldr	r5, [r4, #0]
 8008e04:	f015 0506 	ands.w	r5, r5, #6
 8008e08:	d106      	bne.n	8008e18 <_printf_common+0x48>
 8008e0a:	f104 0a19 	add.w	sl, r4, #25
 8008e0e:	68e3      	ldr	r3, [r4, #12]
 8008e10:	6832      	ldr	r2, [r6, #0]
 8008e12:	1a9b      	subs	r3, r3, r2
 8008e14:	42ab      	cmp	r3, r5
 8008e16:	dc26      	bgt.n	8008e66 <_printf_common+0x96>
 8008e18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008e1c:	6822      	ldr	r2, [r4, #0]
 8008e1e:	3b00      	subs	r3, #0
 8008e20:	bf18      	it	ne
 8008e22:	2301      	movne	r3, #1
 8008e24:	0692      	lsls	r2, r2, #26
 8008e26:	d42b      	bmi.n	8008e80 <_printf_common+0xb0>
 8008e28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008e2c:	4641      	mov	r1, r8
 8008e2e:	4638      	mov	r0, r7
 8008e30:	47c8      	blx	r9
 8008e32:	3001      	adds	r0, #1
 8008e34:	d01e      	beq.n	8008e74 <_printf_common+0xa4>
 8008e36:	6823      	ldr	r3, [r4, #0]
 8008e38:	6922      	ldr	r2, [r4, #16]
 8008e3a:	f003 0306 	and.w	r3, r3, #6
 8008e3e:	2b04      	cmp	r3, #4
 8008e40:	bf02      	ittt	eq
 8008e42:	68e5      	ldreq	r5, [r4, #12]
 8008e44:	6833      	ldreq	r3, [r6, #0]
 8008e46:	1aed      	subeq	r5, r5, r3
 8008e48:	68a3      	ldr	r3, [r4, #8]
 8008e4a:	bf0c      	ite	eq
 8008e4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e50:	2500      	movne	r5, #0
 8008e52:	4293      	cmp	r3, r2
 8008e54:	bfc4      	itt	gt
 8008e56:	1a9b      	subgt	r3, r3, r2
 8008e58:	18ed      	addgt	r5, r5, r3
 8008e5a:	2600      	movs	r6, #0
 8008e5c:	341a      	adds	r4, #26
 8008e5e:	42b5      	cmp	r5, r6
 8008e60:	d11a      	bne.n	8008e98 <_printf_common+0xc8>
 8008e62:	2000      	movs	r0, #0
 8008e64:	e008      	b.n	8008e78 <_printf_common+0xa8>
 8008e66:	2301      	movs	r3, #1
 8008e68:	4652      	mov	r2, sl
 8008e6a:	4641      	mov	r1, r8
 8008e6c:	4638      	mov	r0, r7
 8008e6e:	47c8      	blx	r9
 8008e70:	3001      	adds	r0, #1
 8008e72:	d103      	bne.n	8008e7c <_printf_common+0xac>
 8008e74:	f04f 30ff 	mov.w	r0, #4294967295
 8008e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e7c:	3501      	adds	r5, #1
 8008e7e:	e7c6      	b.n	8008e0e <_printf_common+0x3e>
 8008e80:	18e1      	adds	r1, r4, r3
 8008e82:	1c5a      	adds	r2, r3, #1
 8008e84:	2030      	movs	r0, #48	@ 0x30
 8008e86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008e8a:	4422      	add	r2, r4
 8008e8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008e90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008e94:	3302      	adds	r3, #2
 8008e96:	e7c7      	b.n	8008e28 <_printf_common+0x58>
 8008e98:	2301      	movs	r3, #1
 8008e9a:	4622      	mov	r2, r4
 8008e9c:	4641      	mov	r1, r8
 8008e9e:	4638      	mov	r0, r7
 8008ea0:	47c8      	blx	r9
 8008ea2:	3001      	adds	r0, #1
 8008ea4:	d0e6      	beq.n	8008e74 <_printf_common+0xa4>
 8008ea6:	3601      	adds	r6, #1
 8008ea8:	e7d9      	b.n	8008e5e <_printf_common+0x8e>
	...

08008eac <_printf_i>:
 8008eac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008eb0:	7e0f      	ldrb	r7, [r1, #24]
 8008eb2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008eb4:	2f78      	cmp	r7, #120	@ 0x78
 8008eb6:	4691      	mov	r9, r2
 8008eb8:	4680      	mov	r8, r0
 8008eba:	460c      	mov	r4, r1
 8008ebc:	469a      	mov	sl, r3
 8008ebe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008ec2:	d807      	bhi.n	8008ed4 <_printf_i+0x28>
 8008ec4:	2f62      	cmp	r7, #98	@ 0x62
 8008ec6:	d80a      	bhi.n	8008ede <_printf_i+0x32>
 8008ec8:	2f00      	cmp	r7, #0
 8008eca:	f000 80d1 	beq.w	8009070 <_printf_i+0x1c4>
 8008ece:	2f58      	cmp	r7, #88	@ 0x58
 8008ed0:	f000 80b8 	beq.w	8009044 <_printf_i+0x198>
 8008ed4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ed8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008edc:	e03a      	b.n	8008f54 <_printf_i+0xa8>
 8008ede:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008ee2:	2b15      	cmp	r3, #21
 8008ee4:	d8f6      	bhi.n	8008ed4 <_printf_i+0x28>
 8008ee6:	a101      	add	r1, pc, #4	@ (adr r1, 8008eec <_printf_i+0x40>)
 8008ee8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008eec:	08008f45 	.word	0x08008f45
 8008ef0:	08008f59 	.word	0x08008f59
 8008ef4:	08008ed5 	.word	0x08008ed5
 8008ef8:	08008ed5 	.word	0x08008ed5
 8008efc:	08008ed5 	.word	0x08008ed5
 8008f00:	08008ed5 	.word	0x08008ed5
 8008f04:	08008f59 	.word	0x08008f59
 8008f08:	08008ed5 	.word	0x08008ed5
 8008f0c:	08008ed5 	.word	0x08008ed5
 8008f10:	08008ed5 	.word	0x08008ed5
 8008f14:	08008ed5 	.word	0x08008ed5
 8008f18:	08009057 	.word	0x08009057
 8008f1c:	08008f83 	.word	0x08008f83
 8008f20:	08009011 	.word	0x08009011
 8008f24:	08008ed5 	.word	0x08008ed5
 8008f28:	08008ed5 	.word	0x08008ed5
 8008f2c:	08009079 	.word	0x08009079
 8008f30:	08008ed5 	.word	0x08008ed5
 8008f34:	08008f83 	.word	0x08008f83
 8008f38:	08008ed5 	.word	0x08008ed5
 8008f3c:	08008ed5 	.word	0x08008ed5
 8008f40:	08009019 	.word	0x08009019
 8008f44:	6833      	ldr	r3, [r6, #0]
 8008f46:	1d1a      	adds	r2, r3, #4
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	6032      	str	r2, [r6, #0]
 8008f4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008f54:	2301      	movs	r3, #1
 8008f56:	e09c      	b.n	8009092 <_printf_i+0x1e6>
 8008f58:	6833      	ldr	r3, [r6, #0]
 8008f5a:	6820      	ldr	r0, [r4, #0]
 8008f5c:	1d19      	adds	r1, r3, #4
 8008f5e:	6031      	str	r1, [r6, #0]
 8008f60:	0606      	lsls	r6, r0, #24
 8008f62:	d501      	bpl.n	8008f68 <_printf_i+0xbc>
 8008f64:	681d      	ldr	r5, [r3, #0]
 8008f66:	e003      	b.n	8008f70 <_printf_i+0xc4>
 8008f68:	0645      	lsls	r5, r0, #25
 8008f6a:	d5fb      	bpl.n	8008f64 <_printf_i+0xb8>
 8008f6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008f70:	2d00      	cmp	r5, #0
 8008f72:	da03      	bge.n	8008f7c <_printf_i+0xd0>
 8008f74:	232d      	movs	r3, #45	@ 0x2d
 8008f76:	426d      	negs	r5, r5
 8008f78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f7c:	4858      	ldr	r0, [pc, #352]	@ (80090e0 <_printf_i+0x234>)
 8008f7e:	230a      	movs	r3, #10
 8008f80:	e011      	b.n	8008fa6 <_printf_i+0xfa>
 8008f82:	6821      	ldr	r1, [r4, #0]
 8008f84:	6833      	ldr	r3, [r6, #0]
 8008f86:	0608      	lsls	r0, r1, #24
 8008f88:	f853 5b04 	ldr.w	r5, [r3], #4
 8008f8c:	d402      	bmi.n	8008f94 <_printf_i+0xe8>
 8008f8e:	0649      	lsls	r1, r1, #25
 8008f90:	bf48      	it	mi
 8008f92:	b2ad      	uxthmi	r5, r5
 8008f94:	2f6f      	cmp	r7, #111	@ 0x6f
 8008f96:	4852      	ldr	r0, [pc, #328]	@ (80090e0 <_printf_i+0x234>)
 8008f98:	6033      	str	r3, [r6, #0]
 8008f9a:	bf14      	ite	ne
 8008f9c:	230a      	movne	r3, #10
 8008f9e:	2308      	moveq	r3, #8
 8008fa0:	2100      	movs	r1, #0
 8008fa2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008fa6:	6866      	ldr	r6, [r4, #4]
 8008fa8:	60a6      	str	r6, [r4, #8]
 8008faa:	2e00      	cmp	r6, #0
 8008fac:	db05      	blt.n	8008fba <_printf_i+0x10e>
 8008fae:	6821      	ldr	r1, [r4, #0]
 8008fb0:	432e      	orrs	r6, r5
 8008fb2:	f021 0104 	bic.w	r1, r1, #4
 8008fb6:	6021      	str	r1, [r4, #0]
 8008fb8:	d04b      	beq.n	8009052 <_printf_i+0x1a6>
 8008fba:	4616      	mov	r6, r2
 8008fbc:	fbb5 f1f3 	udiv	r1, r5, r3
 8008fc0:	fb03 5711 	mls	r7, r3, r1, r5
 8008fc4:	5dc7      	ldrb	r7, [r0, r7]
 8008fc6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008fca:	462f      	mov	r7, r5
 8008fcc:	42bb      	cmp	r3, r7
 8008fce:	460d      	mov	r5, r1
 8008fd0:	d9f4      	bls.n	8008fbc <_printf_i+0x110>
 8008fd2:	2b08      	cmp	r3, #8
 8008fd4:	d10b      	bne.n	8008fee <_printf_i+0x142>
 8008fd6:	6823      	ldr	r3, [r4, #0]
 8008fd8:	07df      	lsls	r7, r3, #31
 8008fda:	d508      	bpl.n	8008fee <_printf_i+0x142>
 8008fdc:	6923      	ldr	r3, [r4, #16]
 8008fde:	6861      	ldr	r1, [r4, #4]
 8008fe0:	4299      	cmp	r1, r3
 8008fe2:	bfde      	ittt	le
 8008fe4:	2330      	movle	r3, #48	@ 0x30
 8008fe6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008fea:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008fee:	1b92      	subs	r2, r2, r6
 8008ff0:	6122      	str	r2, [r4, #16]
 8008ff2:	f8cd a000 	str.w	sl, [sp]
 8008ff6:	464b      	mov	r3, r9
 8008ff8:	aa03      	add	r2, sp, #12
 8008ffa:	4621      	mov	r1, r4
 8008ffc:	4640      	mov	r0, r8
 8008ffe:	f7ff fee7 	bl	8008dd0 <_printf_common>
 8009002:	3001      	adds	r0, #1
 8009004:	d14a      	bne.n	800909c <_printf_i+0x1f0>
 8009006:	f04f 30ff 	mov.w	r0, #4294967295
 800900a:	b004      	add	sp, #16
 800900c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009010:	6823      	ldr	r3, [r4, #0]
 8009012:	f043 0320 	orr.w	r3, r3, #32
 8009016:	6023      	str	r3, [r4, #0]
 8009018:	4832      	ldr	r0, [pc, #200]	@ (80090e4 <_printf_i+0x238>)
 800901a:	2778      	movs	r7, #120	@ 0x78
 800901c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009020:	6823      	ldr	r3, [r4, #0]
 8009022:	6831      	ldr	r1, [r6, #0]
 8009024:	061f      	lsls	r7, r3, #24
 8009026:	f851 5b04 	ldr.w	r5, [r1], #4
 800902a:	d402      	bmi.n	8009032 <_printf_i+0x186>
 800902c:	065f      	lsls	r7, r3, #25
 800902e:	bf48      	it	mi
 8009030:	b2ad      	uxthmi	r5, r5
 8009032:	6031      	str	r1, [r6, #0]
 8009034:	07d9      	lsls	r1, r3, #31
 8009036:	bf44      	itt	mi
 8009038:	f043 0320 	orrmi.w	r3, r3, #32
 800903c:	6023      	strmi	r3, [r4, #0]
 800903e:	b11d      	cbz	r5, 8009048 <_printf_i+0x19c>
 8009040:	2310      	movs	r3, #16
 8009042:	e7ad      	b.n	8008fa0 <_printf_i+0xf4>
 8009044:	4826      	ldr	r0, [pc, #152]	@ (80090e0 <_printf_i+0x234>)
 8009046:	e7e9      	b.n	800901c <_printf_i+0x170>
 8009048:	6823      	ldr	r3, [r4, #0]
 800904a:	f023 0320 	bic.w	r3, r3, #32
 800904e:	6023      	str	r3, [r4, #0]
 8009050:	e7f6      	b.n	8009040 <_printf_i+0x194>
 8009052:	4616      	mov	r6, r2
 8009054:	e7bd      	b.n	8008fd2 <_printf_i+0x126>
 8009056:	6833      	ldr	r3, [r6, #0]
 8009058:	6825      	ldr	r5, [r4, #0]
 800905a:	6961      	ldr	r1, [r4, #20]
 800905c:	1d18      	adds	r0, r3, #4
 800905e:	6030      	str	r0, [r6, #0]
 8009060:	062e      	lsls	r6, r5, #24
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	d501      	bpl.n	800906a <_printf_i+0x1be>
 8009066:	6019      	str	r1, [r3, #0]
 8009068:	e002      	b.n	8009070 <_printf_i+0x1c4>
 800906a:	0668      	lsls	r0, r5, #25
 800906c:	d5fb      	bpl.n	8009066 <_printf_i+0x1ba>
 800906e:	8019      	strh	r1, [r3, #0]
 8009070:	2300      	movs	r3, #0
 8009072:	6123      	str	r3, [r4, #16]
 8009074:	4616      	mov	r6, r2
 8009076:	e7bc      	b.n	8008ff2 <_printf_i+0x146>
 8009078:	6833      	ldr	r3, [r6, #0]
 800907a:	1d1a      	adds	r2, r3, #4
 800907c:	6032      	str	r2, [r6, #0]
 800907e:	681e      	ldr	r6, [r3, #0]
 8009080:	6862      	ldr	r2, [r4, #4]
 8009082:	2100      	movs	r1, #0
 8009084:	4630      	mov	r0, r6
 8009086:	f7f7 f8a3 	bl	80001d0 <memchr>
 800908a:	b108      	cbz	r0, 8009090 <_printf_i+0x1e4>
 800908c:	1b80      	subs	r0, r0, r6
 800908e:	6060      	str	r0, [r4, #4]
 8009090:	6863      	ldr	r3, [r4, #4]
 8009092:	6123      	str	r3, [r4, #16]
 8009094:	2300      	movs	r3, #0
 8009096:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800909a:	e7aa      	b.n	8008ff2 <_printf_i+0x146>
 800909c:	6923      	ldr	r3, [r4, #16]
 800909e:	4632      	mov	r2, r6
 80090a0:	4649      	mov	r1, r9
 80090a2:	4640      	mov	r0, r8
 80090a4:	47d0      	blx	sl
 80090a6:	3001      	adds	r0, #1
 80090a8:	d0ad      	beq.n	8009006 <_printf_i+0x15a>
 80090aa:	6823      	ldr	r3, [r4, #0]
 80090ac:	079b      	lsls	r3, r3, #30
 80090ae:	d413      	bmi.n	80090d8 <_printf_i+0x22c>
 80090b0:	68e0      	ldr	r0, [r4, #12]
 80090b2:	9b03      	ldr	r3, [sp, #12]
 80090b4:	4298      	cmp	r0, r3
 80090b6:	bfb8      	it	lt
 80090b8:	4618      	movlt	r0, r3
 80090ba:	e7a6      	b.n	800900a <_printf_i+0x15e>
 80090bc:	2301      	movs	r3, #1
 80090be:	4632      	mov	r2, r6
 80090c0:	4649      	mov	r1, r9
 80090c2:	4640      	mov	r0, r8
 80090c4:	47d0      	blx	sl
 80090c6:	3001      	adds	r0, #1
 80090c8:	d09d      	beq.n	8009006 <_printf_i+0x15a>
 80090ca:	3501      	adds	r5, #1
 80090cc:	68e3      	ldr	r3, [r4, #12]
 80090ce:	9903      	ldr	r1, [sp, #12]
 80090d0:	1a5b      	subs	r3, r3, r1
 80090d2:	42ab      	cmp	r3, r5
 80090d4:	dcf2      	bgt.n	80090bc <_printf_i+0x210>
 80090d6:	e7eb      	b.n	80090b0 <_printf_i+0x204>
 80090d8:	2500      	movs	r5, #0
 80090da:	f104 0619 	add.w	r6, r4, #25
 80090de:	e7f5      	b.n	80090cc <_printf_i+0x220>
 80090e0:	0800dbbc 	.word	0x0800dbbc
 80090e4:	0800dbcd 	.word	0x0800dbcd

080090e8 <_scanf_float>:
 80090e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ec:	b087      	sub	sp, #28
 80090ee:	4691      	mov	r9, r2
 80090f0:	9303      	str	r3, [sp, #12]
 80090f2:	688b      	ldr	r3, [r1, #8]
 80090f4:	1e5a      	subs	r2, r3, #1
 80090f6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80090fa:	bf81      	itttt	hi
 80090fc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009100:	eb03 0b05 	addhi.w	fp, r3, r5
 8009104:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009108:	608b      	strhi	r3, [r1, #8]
 800910a:	680b      	ldr	r3, [r1, #0]
 800910c:	460a      	mov	r2, r1
 800910e:	f04f 0500 	mov.w	r5, #0
 8009112:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009116:	f842 3b1c 	str.w	r3, [r2], #28
 800911a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800911e:	4680      	mov	r8, r0
 8009120:	460c      	mov	r4, r1
 8009122:	bf98      	it	ls
 8009124:	f04f 0b00 	movls.w	fp, #0
 8009128:	9201      	str	r2, [sp, #4]
 800912a:	4616      	mov	r6, r2
 800912c:	46aa      	mov	sl, r5
 800912e:	462f      	mov	r7, r5
 8009130:	9502      	str	r5, [sp, #8]
 8009132:	68a2      	ldr	r2, [r4, #8]
 8009134:	b15a      	cbz	r2, 800914e <_scanf_float+0x66>
 8009136:	f8d9 3000 	ldr.w	r3, [r9]
 800913a:	781b      	ldrb	r3, [r3, #0]
 800913c:	2b4e      	cmp	r3, #78	@ 0x4e
 800913e:	d863      	bhi.n	8009208 <_scanf_float+0x120>
 8009140:	2b40      	cmp	r3, #64	@ 0x40
 8009142:	d83b      	bhi.n	80091bc <_scanf_float+0xd4>
 8009144:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009148:	b2c8      	uxtb	r0, r1
 800914a:	280e      	cmp	r0, #14
 800914c:	d939      	bls.n	80091c2 <_scanf_float+0xda>
 800914e:	b11f      	cbz	r7, 8009158 <_scanf_float+0x70>
 8009150:	6823      	ldr	r3, [r4, #0]
 8009152:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009156:	6023      	str	r3, [r4, #0]
 8009158:	f10a 3aff 	add.w	sl, sl, #4294967295
 800915c:	f1ba 0f01 	cmp.w	sl, #1
 8009160:	f200 8114 	bhi.w	800938c <_scanf_float+0x2a4>
 8009164:	9b01      	ldr	r3, [sp, #4]
 8009166:	429e      	cmp	r6, r3
 8009168:	f200 8105 	bhi.w	8009376 <_scanf_float+0x28e>
 800916c:	2001      	movs	r0, #1
 800916e:	b007      	add	sp, #28
 8009170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009174:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009178:	2a0d      	cmp	r2, #13
 800917a:	d8e8      	bhi.n	800914e <_scanf_float+0x66>
 800917c:	a101      	add	r1, pc, #4	@ (adr r1, 8009184 <_scanf_float+0x9c>)
 800917e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009182:	bf00      	nop
 8009184:	080092cd 	.word	0x080092cd
 8009188:	0800914f 	.word	0x0800914f
 800918c:	0800914f 	.word	0x0800914f
 8009190:	0800914f 	.word	0x0800914f
 8009194:	08009329 	.word	0x08009329
 8009198:	08009303 	.word	0x08009303
 800919c:	0800914f 	.word	0x0800914f
 80091a0:	0800914f 	.word	0x0800914f
 80091a4:	080092db 	.word	0x080092db
 80091a8:	0800914f 	.word	0x0800914f
 80091ac:	0800914f 	.word	0x0800914f
 80091b0:	0800914f 	.word	0x0800914f
 80091b4:	0800914f 	.word	0x0800914f
 80091b8:	08009297 	.word	0x08009297
 80091bc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80091c0:	e7da      	b.n	8009178 <_scanf_float+0x90>
 80091c2:	290e      	cmp	r1, #14
 80091c4:	d8c3      	bhi.n	800914e <_scanf_float+0x66>
 80091c6:	a001      	add	r0, pc, #4	@ (adr r0, 80091cc <_scanf_float+0xe4>)
 80091c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80091cc:	08009287 	.word	0x08009287
 80091d0:	0800914f 	.word	0x0800914f
 80091d4:	08009287 	.word	0x08009287
 80091d8:	08009317 	.word	0x08009317
 80091dc:	0800914f 	.word	0x0800914f
 80091e0:	08009229 	.word	0x08009229
 80091e4:	0800926d 	.word	0x0800926d
 80091e8:	0800926d 	.word	0x0800926d
 80091ec:	0800926d 	.word	0x0800926d
 80091f0:	0800926d 	.word	0x0800926d
 80091f4:	0800926d 	.word	0x0800926d
 80091f8:	0800926d 	.word	0x0800926d
 80091fc:	0800926d 	.word	0x0800926d
 8009200:	0800926d 	.word	0x0800926d
 8009204:	0800926d 	.word	0x0800926d
 8009208:	2b6e      	cmp	r3, #110	@ 0x6e
 800920a:	d809      	bhi.n	8009220 <_scanf_float+0x138>
 800920c:	2b60      	cmp	r3, #96	@ 0x60
 800920e:	d8b1      	bhi.n	8009174 <_scanf_float+0x8c>
 8009210:	2b54      	cmp	r3, #84	@ 0x54
 8009212:	d07b      	beq.n	800930c <_scanf_float+0x224>
 8009214:	2b59      	cmp	r3, #89	@ 0x59
 8009216:	d19a      	bne.n	800914e <_scanf_float+0x66>
 8009218:	2d07      	cmp	r5, #7
 800921a:	d198      	bne.n	800914e <_scanf_float+0x66>
 800921c:	2508      	movs	r5, #8
 800921e:	e02f      	b.n	8009280 <_scanf_float+0x198>
 8009220:	2b74      	cmp	r3, #116	@ 0x74
 8009222:	d073      	beq.n	800930c <_scanf_float+0x224>
 8009224:	2b79      	cmp	r3, #121	@ 0x79
 8009226:	e7f6      	b.n	8009216 <_scanf_float+0x12e>
 8009228:	6821      	ldr	r1, [r4, #0]
 800922a:	05c8      	lsls	r0, r1, #23
 800922c:	d51e      	bpl.n	800926c <_scanf_float+0x184>
 800922e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009232:	6021      	str	r1, [r4, #0]
 8009234:	3701      	adds	r7, #1
 8009236:	f1bb 0f00 	cmp.w	fp, #0
 800923a:	d003      	beq.n	8009244 <_scanf_float+0x15c>
 800923c:	3201      	adds	r2, #1
 800923e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009242:	60a2      	str	r2, [r4, #8]
 8009244:	68a3      	ldr	r3, [r4, #8]
 8009246:	3b01      	subs	r3, #1
 8009248:	60a3      	str	r3, [r4, #8]
 800924a:	6923      	ldr	r3, [r4, #16]
 800924c:	3301      	adds	r3, #1
 800924e:	6123      	str	r3, [r4, #16]
 8009250:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009254:	3b01      	subs	r3, #1
 8009256:	2b00      	cmp	r3, #0
 8009258:	f8c9 3004 	str.w	r3, [r9, #4]
 800925c:	f340 8082 	ble.w	8009364 <_scanf_float+0x27c>
 8009260:	f8d9 3000 	ldr.w	r3, [r9]
 8009264:	3301      	adds	r3, #1
 8009266:	f8c9 3000 	str.w	r3, [r9]
 800926a:	e762      	b.n	8009132 <_scanf_float+0x4a>
 800926c:	eb1a 0105 	adds.w	r1, sl, r5
 8009270:	f47f af6d 	bne.w	800914e <_scanf_float+0x66>
 8009274:	6822      	ldr	r2, [r4, #0]
 8009276:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800927a:	6022      	str	r2, [r4, #0]
 800927c:	460d      	mov	r5, r1
 800927e:	468a      	mov	sl, r1
 8009280:	f806 3b01 	strb.w	r3, [r6], #1
 8009284:	e7de      	b.n	8009244 <_scanf_float+0x15c>
 8009286:	6822      	ldr	r2, [r4, #0]
 8009288:	0610      	lsls	r0, r2, #24
 800928a:	f57f af60 	bpl.w	800914e <_scanf_float+0x66>
 800928e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009292:	6022      	str	r2, [r4, #0]
 8009294:	e7f4      	b.n	8009280 <_scanf_float+0x198>
 8009296:	f1ba 0f00 	cmp.w	sl, #0
 800929a:	d10c      	bne.n	80092b6 <_scanf_float+0x1ce>
 800929c:	b977      	cbnz	r7, 80092bc <_scanf_float+0x1d4>
 800929e:	6822      	ldr	r2, [r4, #0]
 80092a0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80092a4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80092a8:	d108      	bne.n	80092bc <_scanf_float+0x1d4>
 80092aa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80092ae:	6022      	str	r2, [r4, #0]
 80092b0:	f04f 0a01 	mov.w	sl, #1
 80092b4:	e7e4      	b.n	8009280 <_scanf_float+0x198>
 80092b6:	f1ba 0f02 	cmp.w	sl, #2
 80092ba:	d050      	beq.n	800935e <_scanf_float+0x276>
 80092bc:	2d01      	cmp	r5, #1
 80092be:	d002      	beq.n	80092c6 <_scanf_float+0x1de>
 80092c0:	2d04      	cmp	r5, #4
 80092c2:	f47f af44 	bne.w	800914e <_scanf_float+0x66>
 80092c6:	3501      	adds	r5, #1
 80092c8:	b2ed      	uxtb	r5, r5
 80092ca:	e7d9      	b.n	8009280 <_scanf_float+0x198>
 80092cc:	f1ba 0f01 	cmp.w	sl, #1
 80092d0:	f47f af3d 	bne.w	800914e <_scanf_float+0x66>
 80092d4:	f04f 0a02 	mov.w	sl, #2
 80092d8:	e7d2      	b.n	8009280 <_scanf_float+0x198>
 80092da:	b975      	cbnz	r5, 80092fa <_scanf_float+0x212>
 80092dc:	2f00      	cmp	r7, #0
 80092de:	f47f af37 	bne.w	8009150 <_scanf_float+0x68>
 80092e2:	6822      	ldr	r2, [r4, #0]
 80092e4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80092e8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80092ec:	f040 8103 	bne.w	80094f6 <_scanf_float+0x40e>
 80092f0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80092f4:	6022      	str	r2, [r4, #0]
 80092f6:	2501      	movs	r5, #1
 80092f8:	e7c2      	b.n	8009280 <_scanf_float+0x198>
 80092fa:	2d03      	cmp	r5, #3
 80092fc:	d0e3      	beq.n	80092c6 <_scanf_float+0x1de>
 80092fe:	2d05      	cmp	r5, #5
 8009300:	e7df      	b.n	80092c2 <_scanf_float+0x1da>
 8009302:	2d02      	cmp	r5, #2
 8009304:	f47f af23 	bne.w	800914e <_scanf_float+0x66>
 8009308:	2503      	movs	r5, #3
 800930a:	e7b9      	b.n	8009280 <_scanf_float+0x198>
 800930c:	2d06      	cmp	r5, #6
 800930e:	f47f af1e 	bne.w	800914e <_scanf_float+0x66>
 8009312:	2507      	movs	r5, #7
 8009314:	e7b4      	b.n	8009280 <_scanf_float+0x198>
 8009316:	6822      	ldr	r2, [r4, #0]
 8009318:	0591      	lsls	r1, r2, #22
 800931a:	f57f af18 	bpl.w	800914e <_scanf_float+0x66>
 800931e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009322:	6022      	str	r2, [r4, #0]
 8009324:	9702      	str	r7, [sp, #8]
 8009326:	e7ab      	b.n	8009280 <_scanf_float+0x198>
 8009328:	6822      	ldr	r2, [r4, #0]
 800932a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800932e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009332:	d005      	beq.n	8009340 <_scanf_float+0x258>
 8009334:	0550      	lsls	r0, r2, #21
 8009336:	f57f af0a 	bpl.w	800914e <_scanf_float+0x66>
 800933a:	2f00      	cmp	r7, #0
 800933c:	f000 80db 	beq.w	80094f6 <_scanf_float+0x40e>
 8009340:	0591      	lsls	r1, r2, #22
 8009342:	bf58      	it	pl
 8009344:	9902      	ldrpl	r1, [sp, #8]
 8009346:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800934a:	bf58      	it	pl
 800934c:	1a79      	subpl	r1, r7, r1
 800934e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009352:	bf58      	it	pl
 8009354:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009358:	6022      	str	r2, [r4, #0]
 800935a:	2700      	movs	r7, #0
 800935c:	e790      	b.n	8009280 <_scanf_float+0x198>
 800935e:	f04f 0a03 	mov.w	sl, #3
 8009362:	e78d      	b.n	8009280 <_scanf_float+0x198>
 8009364:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009368:	4649      	mov	r1, r9
 800936a:	4640      	mov	r0, r8
 800936c:	4798      	blx	r3
 800936e:	2800      	cmp	r0, #0
 8009370:	f43f aedf 	beq.w	8009132 <_scanf_float+0x4a>
 8009374:	e6eb      	b.n	800914e <_scanf_float+0x66>
 8009376:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800937a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800937e:	464a      	mov	r2, r9
 8009380:	4640      	mov	r0, r8
 8009382:	4798      	blx	r3
 8009384:	6923      	ldr	r3, [r4, #16]
 8009386:	3b01      	subs	r3, #1
 8009388:	6123      	str	r3, [r4, #16]
 800938a:	e6eb      	b.n	8009164 <_scanf_float+0x7c>
 800938c:	1e6b      	subs	r3, r5, #1
 800938e:	2b06      	cmp	r3, #6
 8009390:	d824      	bhi.n	80093dc <_scanf_float+0x2f4>
 8009392:	2d02      	cmp	r5, #2
 8009394:	d836      	bhi.n	8009404 <_scanf_float+0x31c>
 8009396:	9b01      	ldr	r3, [sp, #4]
 8009398:	429e      	cmp	r6, r3
 800939a:	f67f aee7 	bls.w	800916c <_scanf_float+0x84>
 800939e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80093a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80093a6:	464a      	mov	r2, r9
 80093a8:	4640      	mov	r0, r8
 80093aa:	4798      	blx	r3
 80093ac:	6923      	ldr	r3, [r4, #16]
 80093ae:	3b01      	subs	r3, #1
 80093b0:	6123      	str	r3, [r4, #16]
 80093b2:	e7f0      	b.n	8009396 <_scanf_float+0x2ae>
 80093b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80093b8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80093bc:	464a      	mov	r2, r9
 80093be:	4640      	mov	r0, r8
 80093c0:	4798      	blx	r3
 80093c2:	6923      	ldr	r3, [r4, #16]
 80093c4:	3b01      	subs	r3, #1
 80093c6:	6123      	str	r3, [r4, #16]
 80093c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80093cc:	fa5f fa8a 	uxtb.w	sl, sl
 80093d0:	f1ba 0f02 	cmp.w	sl, #2
 80093d4:	d1ee      	bne.n	80093b4 <_scanf_float+0x2cc>
 80093d6:	3d03      	subs	r5, #3
 80093d8:	b2ed      	uxtb	r5, r5
 80093da:	1b76      	subs	r6, r6, r5
 80093dc:	6823      	ldr	r3, [r4, #0]
 80093de:	05da      	lsls	r2, r3, #23
 80093e0:	d530      	bpl.n	8009444 <_scanf_float+0x35c>
 80093e2:	055b      	lsls	r3, r3, #21
 80093e4:	d511      	bpl.n	800940a <_scanf_float+0x322>
 80093e6:	9b01      	ldr	r3, [sp, #4]
 80093e8:	429e      	cmp	r6, r3
 80093ea:	f67f aebf 	bls.w	800916c <_scanf_float+0x84>
 80093ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80093f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80093f6:	464a      	mov	r2, r9
 80093f8:	4640      	mov	r0, r8
 80093fa:	4798      	blx	r3
 80093fc:	6923      	ldr	r3, [r4, #16]
 80093fe:	3b01      	subs	r3, #1
 8009400:	6123      	str	r3, [r4, #16]
 8009402:	e7f0      	b.n	80093e6 <_scanf_float+0x2fe>
 8009404:	46aa      	mov	sl, r5
 8009406:	46b3      	mov	fp, r6
 8009408:	e7de      	b.n	80093c8 <_scanf_float+0x2e0>
 800940a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800940e:	6923      	ldr	r3, [r4, #16]
 8009410:	2965      	cmp	r1, #101	@ 0x65
 8009412:	f103 33ff 	add.w	r3, r3, #4294967295
 8009416:	f106 35ff 	add.w	r5, r6, #4294967295
 800941a:	6123      	str	r3, [r4, #16]
 800941c:	d00c      	beq.n	8009438 <_scanf_float+0x350>
 800941e:	2945      	cmp	r1, #69	@ 0x45
 8009420:	d00a      	beq.n	8009438 <_scanf_float+0x350>
 8009422:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009426:	464a      	mov	r2, r9
 8009428:	4640      	mov	r0, r8
 800942a:	4798      	blx	r3
 800942c:	6923      	ldr	r3, [r4, #16]
 800942e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009432:	3b01      	subs	r3, #1
 8009434:	1eb5      	subs	r5, r6, #2
 8009436:	6123      	str	r3, [r4, #16]
 8009438:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800943c:	464a      	mov	r2, r9
 800943e:	4640      	mov	r0, r8
 8009440:	4798      	blx	r3
 8009442:	462e      	mov	r6, r5
 8009444:	6822      	ldr	r2, [r4, #0]
 8009446:	f012 0210 	ands.w	r2, r2, #16
 800944a:	d001      	beq.n	8009450 <_scanf_float+0x368>
 800944c:	2000      	movs	r0, #0
 800944e:	e68e      	b.n	800916e <_scanf_float+0x86>
 8009450:	7032      	strb	r2, [r6, #0]
 8009452:	6823      	ldr	r3, [r4, #0]
 8009454:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009458:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800945c:	d125      	bne.n	80094aa <_scanf_float+0x3c2>
 800945e:	9b02      	ldr	r3, [sp, #8]
 8009460:	429f      	cmp	r7, r3
 8009462:	d00a      	beq.n	800947a <_scanf_float+0x392>
 8009464:	1bda      	subs	r2, r3, r7
 8009466:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800946a:	429e      	cmp	r6, r3
 800946c:	bf28      	it	cs
 800946e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009472:	4922      	ldr	r1, [pc, #136]	@ (80094fc <_scanf_float+0x414>)
 8009474:	4630      	mov	r0, r6
 8009476:	f000 fa61 	bl	800993c <siprintf>
 800947a:	9901      	ldr	r1, [sp, #4]
 800947c:	2200      	movs	r2, #0
 800947e:	4640      	mov	r0, r8
 8009480:	f002 fe0e 	bl	800c0a0 <_strtod_r>
 8009484:	9b03      	ldr	r3, [sp, #12]
 8009486:	6821      	ldr	r1, [r4, #0]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f011 0f02 	tst.w	r1, #2
 800948e:	ec57 6b10 	vmov	r6, r7, d0
 8009492:	f103 0204 	add.w	r2, r3, #4
 8009496:	d015      	beq.n	80094c4 <_scanf_float+0x3dc>
 8009498:	9903      	ldr	r1, [sp, #12]
 800949a:	600a      	str	r2, [r1, #0]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	e9c3 6700 	strd	r6, r7, [r3]
 80094a2:	68e3      	ldr	r3, [r4, #12]
 80094a4:	3301      	adds	r3, #1
 80094a6:	60e3      	str	r3, [r4, #12]
 80094a8:	e7d0      	b.n	800944c <_scanf_float+0x364>
 80094aa:	9b04      	ldr	r3, [sp, #16]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d0e4      	beq.n	800947a <_scanf_float+0x392>
 80094b0:	9905      	ldr	r1, [sp, #20]
 80094b2:	230a      	movs	r3, #10
 80094b4:	3101      	adds	r1, #1
 80094b6:	4640      	mov	r0, r8
 80094b8:	f002 fe72 	bl	800c1a0 <_strtol_r>
 80094bc:	9b04      	ldr	r3, [sp, #16]
 80094be:	9e05      	ldr	r6, [sp, #20]
 80094c0:	1ac2      	subs	r2, r0, r3
 80094c2:	e7d0      	b.n	8009466 <_scanf_float+0x37e>
 80094c4:	f011 0f04 	tst.w	r1, #4
 80094c8:	9903      	ldr	r1, [sp, #12]
 80094ca:	600a      	str	r2, [r1, #0]
 80094cc:	d1e6      	bne.n	800949c <_scanf_float+0x3b4>
 80094ce:	681d      	ldr	r5, [r3, #0]
 80094d0:	4632      	mov	r2, r6
 80094d2:	463b      	mov	r3, r7
 80094d4:	4630      	mov	r0, r6
 80094d6:	4639      	mov	r1, r7
 80094d8:	f7f7 fb28 	bl	8000b2c <__aeabi_dcmpun>
 80094dc:	b128      	cbz	r0, 80094ea <_scanf_float+0x402>
 80094de:	4808      	ldr	r0, [pc, #32]	@ (8009500 <_scanf_float+0x418>)
 80094e0:	f000 fbd4 	bl	8009c8c <nanf>
 80094e4:	ed85 0a00 	vstr	s0, [r5]
 80094e8:	e7db      	b.n	80094a2 <_scanf_float+0x3ba>
 80094ea:	4630      	mov	r0, r6
 80094ec:	4639      	mov	r1, r7
 80094ee:	f7f7 fb7b 	bl	8000be8 <__aeabi_d2f>
 80094f2:	6028      	str	r0, [r5, #0]
 80094f4:	e7d5      	b.n	80094a2 <_scanf_float+0x3ba>
 80094f6:	2700      	movs	r7, #0
 80094f8:	e62e      	b.n	8009158 <_scanf_float+0x70>
 80094fa:	bf00      	nop
 80094fc:	0800dbde 	.word	0x0800dbde
 8009500:	0800dd3a 	.word	0x0800dd3a

08009504 <std>:
 8009504:	2300      	movs	r3, #0
 8009506:	b510      	push	{r4, lr}
 8009508:	4604      	mov	r4, r0
 800950a:	e9c0 3300 	strd	r3, r3, [r0]
 800950e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009512:	6083      	str	r3, [r0, #8]
 8009514:	8181      	strh	r1, [r0, #12]
 8009516:	6643      	str	r3, [r0, #100]	@ 0x64
 8009518:	81c2      	strh	r2, [r0, #14]
 800951a:	6183      	str	r3, [r0, #24]
 800951c:	4619      	mov	r1, r3
 800951e:	2208      	movs	r2, #8
 8009520:	305c      	adds	r0, #92	@ 0x5c
 8009522:	f000 fb33 	bl	8009b8c <memset>
 8009526:	4b0d      	ldr	r3, [pc, #52]	@ (800955c <std+0x58>)
 8009528:	6263      	str	r3, [r4, #36]	@ 0x24
 800952a:	4b0d      	ldr	r3, [pc, #52]	@ (8009560 <std+0x5c>)
 800952c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800952e:	4b0d      	ldr	r3, [pc, #52]	@ (8009564 <std+0x60>)
 8009530:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009532:	4b0d      	ldr	r3, [pc, #52]	@ (8009568 <std+0x64>)
 8009534:	6323      	str	r3, [r4, #48]	@ 0x30
 8009536:	4b0d      	ldr	r3, [pc, #52]	@ (800956c <std+0x68>)
 8009538:	6224      	str	r4, [r4, #32]
 800953a:	429c      	cmp	r4, r3
 800953c:	d006      	beq.n	800954c <std+0x48>
 800953e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009542:	4294      	cmp	r4, r2
 8009544:	d002      	beq.n	800954c <std+0x48>
 8009546:	33d0      	adds	r3, #208	@ 0xd0
 8009548:	429c      	cmp	r4, r3
 800954a:	d105      	bne.n	8009558 <std+0x54>
 800954c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009554:	f000 bb96 	b.w	8009c84 <__retarget_lock_init_recursive>
 8009558:	bd10      	pop	{r4, pc}
 800955a:	bf00      	nop
 800955c:	080099d9 	.word	0x080099d9
 8009560:	080099ff 	.word	0x080099ff
 8009564:	08009a37 	.word	0x08009a37
 8009568:	08009a5b 	.word	0x08009a5b
 800956c:	20000580 	.word	0x20000580

08009570 <stdio_exit_handler>:
 8009570:	4a02      	ldr	r2, [pc, #8]	@ (800957c <stdio_exit_handler+0xc>)
 8009572:	4903      	ldr	r1, [pc, #12]	@ (8009580 <stdio_exit_handler+0x10>)
 8009574:	4803      	ldr	r0, [pc, #12]	@ (8009584 <stdio_exit_handler+0x14>)
 8009576:	f000 b869 	b.w	800964c <_fwalk_sglue>
 800957a:	bf00      	nop
 800957c:	2000000c 	.word	0x2000000c
 8009580:	0800ce1d 	.word	0x0800ce1d
 8009584:	2000001c 	.word	0x2000001c

08009588 <cleanup_stdio>:
 8009588:	6841      	ldr	r1, [r0, #4]
 800958a:	4b0c      	ldr	r3, [pc, #48]	@ (80095bc <cleanup_stdio+0x34>)
 800958c:	4299      	cmp	r1, r3
 800958e:	b510      	push	{r4, lr}
 8009590:	4604      	mov	r4, r0
 8009592:	d001      	beq.n	8009598 <cleanup_stdio+0x10>
 8009594:	f003 fc42 	bl	800ce1c <_fflush_r>
 8009598:	68a1      	ldr	r1, [r4, #8]
 800959a:	4b09      	ldr	r3, [pc, #36]	@ (80095c0 <cleanup_stdio+0x38>)
 800959c:	4299      	cmp	r1, r3
 800959e:	d002      	beq.n	80095a6 <cleanup_stdio+0x1e>
 80095a0:	4620      	mov	r0, r4
 80095a2:	f003 fc3b 	bl	800ce1c <_fflush_r>
 80095a6:	68e1      	ldr	r1, [r4, #12]
 80095a8:	4b06      	ldr	r3, [pc, #24]	@ (80095c4 <cleanup_stdio+0x3c>)
 80095aa:	4299      	cmp	r1, r3
 80095ac:	d004      	beq.n	80095b8 <cleanup_stdio+0x30>
 80095ae:	4620      	mov	r0, r4
 80095b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095b4:	f003 bc32 	b.w	800ce1c <_fflush_r>
 80095b8:	bd10      	pop	{r4, pc}
 80095ba:	bf00      	nop
 80095bc:	20000580 	.word	0x20000580
 80095c0:	200005e8 	.word	0x200005e8
 80095c4:	20000650 	.word	0x20000650

080095c8 <global_stdio_init.part.0>:
 80095c8:	b510      	push	{r4, lr}
 80095ca:	4b0b      	ldr	r3, [pc, #44]	@ (80095f8 <global_stdio_init.part.0+0x30>)
 80095cc:	4c0b      	ldr	r4, [pc, #44]	@ (80095fc <global_stdio_init.part.0+0x34>)
 80095ce:	4a0c      	ldr	r2, [pc, #48]	@ (8009600 <global_stdio_init.part.0+0x38>)
 80095d0:	601a      	str	r2, [r3, #0]
 80095d2:	4620      	mov	r0, r4
 80095d4:	2200      	movs	r2, #0
 80095d6:	2104      	movs	r1, #4
 80095d8:	f7ff ff94 	bl	8009504 <std>
 80095dc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80095e0:	2201      	movs	r2, #1
 80095e2:	2109      	movs	r1, #9
 80095e4:	f7ff ff8e 	bl	8009504 <std>
 80095e8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80095ec:	2202      	movs	r2, #2
 80095ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095f2:	2112      	movs	r1, #18
 80095f4:	f7ff bf86 	b.w	8009504 <std>
 80095f8:	200006b8 	.word	0x200006b8
 80095fc:	20000580 	.word	0x20000580
 8009600:	08009571 	.word	0x08009571

08009604 <__sfp_lock_acquire>:
 8009604:	4801      	ldr	r0, [pc, #4]	@ (800960c <__sfp_lock_acquire+0x8>)
 8009606:	f000 bb3e 	b.w	8009c86 <__retarget_lock_acquire_recursive>
 800960a:	bf00      	nop
 800960c:	200006c1 	.word	0x200006c1

08009610 <__sfp_lock_release>:
 8009610:	4801      	ldr	r0, [pc, #4]	@ (8009618 <__sfp_lock_release+0x8>)
 8009612:	f000 bb39 	b.w	8009c88 <__retarget_lock_release_recursive>
 8009616:	bf00      	nop
 8009618:	200006c1 	.word	0x200006c1

0800961c <__sinit>:
 800961c:	b510      	push	{r4, lr}
 800961e:	4604      	mov	r4, r0
 8009620:	f7ff fff0 	bl	8009604 <__sfp_lock_acquire>
 8009624:	6a23      	ldr	r3, [r4, #32]
 8009626:	b11b      	cbz	r3, 8009630 <__sinit+0x14>
 8009628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800962c:	f7ff bff0 	b.w	8009610 <__sfp_lock_release>
 8009630:	4b04      	ldr	r3, [pc, #16]	@ (8009644 <__sinit+0x28>)
 8009632:	6223      	str	r3, [r4, #32]
 8009634:	4b04      	ldr	r3, [pc, #16]	@ (8009648 <__sinit+0x2c>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d1f5      	bne.n	8009628 <__sinit+0xc>
 800963c:	f7ff ffc4 	bl	80095c8 <global_stdio_init.part.0>
 8009640:	e7f2      	b.n	8009628 <__sinit+0xc>
 8009642:	bf00      	nop
 8009644:	08009589 	.word	0x08009589
 8009648:	200006b8 	.word	0x200006b8

0800964c <_fwalk_sglue>:
 800964c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009650:	4607      	mov	r7, r0
 8009652:	4688      	mov	r8, r1
 8009654:	4614      	mov	r4, r2
 8009656:	2600      	movs	r6, #0
 8009658:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800965c:	f1b9 0901 	subs.w	r9, r9, #1
 8009660:	d505      	bpl.n	800966e <_fwalk_sglue+0x22>
 8009662:	6824      	ldr	r4, [r4, #0]
 8009664:	2c00      	cmp	r4, #0
 8009666:	d1f7      	bne.n	8009658 <_fwalk_sglue+0xc>
 8009668:	4630      	mov	r0, r6
 800966a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800966e:	89ab      	ldrh	r3, [r5, #12]
 8009670:	2b01      	cmp	r3, #1
 8009672:	d907      	bls.n	8009684 <_fwalk_sglue+0x38>
 8009674:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009678:	3301      	adds	r3, #1
 800967a:	d003      	beq.n	8009684 <_fwalk_sglue+0x38>
 800967c:	4629      	mov	r1, r5
 800967e:	4638      	mov	r0, r7
 8009680:	47c0      	blx	r8
 8009682:	4306      	orrs	r6, r0
 8009684:	3568      	adds	r5, #104	@ 0x68
 8009686:	e7e9      	b.n	800965c <_fwalk_sglue+0x10>

08009688 <iprintf>:
 8009688:	b40f      	push	{r0, r1, r2, r3}
 800968a:	b507      	push	{r0, r1, r2, lr}
 800968c:	4906      	ldr	r1, [pc, #24]	@ (80096a8 <iprintf+0x20>)
 800968e:	ab04      	add	r3, sp, #16
 8009690:	6808      	ldr	r0, [r1, #0]
 8009692:	f853 2b04 	ldr.w	r2, [r3], #4
 8009696:	6881      	ldr	r1, [r0, #8]
 8009698:	9301      	str	r3, [sp, #4]
 800969a:	f003 f8d5 	bl	800c848 <_vfiprintf_r>
 800969e:	b003      	add	sp, #12
 80096a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80096a4:	b004      	add	sp, #16
 80096a6:	4770      	bx	lr
 80096a8:	20000018 	.word	0x20000018

080096ac <_puts_r>:
 80096ac:	6a03      	ldr	r3, [r0, #32]
 80096ae:	b570      	push	{r4, r5, r6, lr}
 80096b0:	6884      	ldr	r4, [r0, #8]
 80096b2:	4605      	mov	r5, r0
 80096b4:	460e      	mov	r6, r1
 80096b6:	b90b      	cbnz	r3, 80096bc <_puts_r+0x10>
 80096b8:	f7ff ffb0 	bl	800961c <__sinit>
 80096bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80096be:	07db      	lsls	r3, r3, #31
 80096c0:	d405      	bmi.n	80096ce <_puts_r+0x22>
 80096c2:	89a3      	ldrh	r3, [r4, #12]
 80096c4:	0598      	lsls	r0, r3, #22
 80096c6:	d402      	bmi.n	80096ce <_puts_r+0x22>
 80096c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096ca:	f000 fadc 	bl	8009c86 <__retarget_lock_acquire_recursive>
 80096ce:	89a3      	ldrh	r3, [r4, #12]
 80096d0:	0719      	lsls	r1, r3, #28
 80096d2:	d502      	bpl.n	80096da <_puts_r+0x2e>
 80096d4:	6923      	ldr	r3, [r4, #16]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d135      	bne.n	8009746 <_puts_r+0x9a>
 80096da:	4621      	mov	r1, r4
 80096dc:	4628      	mov	r0, r5
 80096de:	f000 f9ff 	bl	8009ae0 <__swsetup_r>
 80096e2:	b380      	cbz	r0, 8009746 <_puts_r+0x9a>
 80096e4:	f04f 35ff 	mov.w	r5, #4294967295
 80096e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80096ea:	07da      	lsls	r2, r3, #31
 80096ec:	d405      	bmi.n	80096fa <_puts_r+0x4e>
 80096ee:	89a3      	ldrh	r3, [r4, #12]
 80096f0:	059b      	lsls	r3, r3, #22
 80096f2:	d402      	bmi.n	80096fa <_puts_r+0x4e>
 80096f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096f6:	f000 fac7 	bl	8009c88 <__retarget_lock_release_recursive>
 80096fa:	4628      	mov	r0, r5
 80096fc:	bd70      	pop	{r4, r5, r6, pc}
 80096fe:	2b00      	cmp	r3, #0
 8009700:	da04      	bge.n	800970c <_puts_r+0x60>
 8009702:	69a2      	ldr	r2, [r4, #24]
 8009704:	429a      	cmp	r2, r3
 8009706:	dc17      	bgt.n	8009738 <_puts_r+0x8c>
 8009708:	290a      	cmp	r1, #10
 800970a:	d015      	beq.n	8009738 <_puts_r+0x8c>
 800970c:	6823      	ldr	r3, [r4, #0]
 800970e:	1c5a      	adds	r2, r3, #1
 8009710:	6022      	str	r2, [r4, #0]
 8009712:	7019      	strb	r1, [r3, #0]
 8009714:	68a3      	ldr	r3, [r4, #8]
 8009716:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800971a:	3b01      	subs	r3, #1
 800971c:	60a3      	str	r3, [r4, #8]
 800971e:	2900      	cmp	r1, #0
 8009720:	d1ed      	bne.n	80096fe <_puts_r+0x52>
 8009722:	2b00      	cmp	r3, #0
 8009724:	da11      	bge.n	800974a <_puts_r+0x9e>
 8009726:	4622      	mov	r2, r4
 8009728:	210a      	movs	r1, #10
 800972a:	4628      	mov	r0, r5
 800972c:	f000 f999 	bl	8009a62 <__swbuf_r>
 8009730:	3001      	adds	r0, #1
 8009732:	d0d7      	beq.n	80096e4 <_puts_r+0x38>
 8009734:	250a      	movs	r5, #10
 8009736:	e7d7      	b.n	80096e8 <_puts_r+0x3c>
 8009738:	4622      	mov	r2, r4
 800973a:	4628      	mov	r0, r5
 800973c:	f000 f991 	bl	8009a62 <__swbuf_r>
 8009740:	3001      	adds	r0, #1
 8009742:	d1e7      	bne.n	8009714 <_puts_r+0x68>
 8009744:	e7ce      	b.n	80096e4 <_puts_r+0x38>
 8009746:	3e01      	subs	r6, #1
 8009748:	e7e4      	b.n	8009714 <_puts_r+0x68>
 800974a:	6823      	ldr	r3, [r4, #0]
 800974c:	1c5a      	adds	r2, r3, #1
 800974e:	6022      	str	r2, [r4, #0]
 8009750:	220a      	movs	r2, #10
 8009752:	701a      	strb	r2, [r3, #0]
 8009754:	e7ee      	b.n	8009734 <_puts_r+0x88>
	...

08009758 <puts>:
 8009758:	4b02      	ldr	r3, [pc, #8]	@ (8009764 <puts+0xc>)
 800975a:	4601      	mov	r1, r0
 800975c:	6818      	ldr	r0, [r3, #0]
 800975e:	f7ff bfa5 	b.w	80096ac <_puts_r>
 8009762:	bf00      	nop
 8009764:	20000018 	.word	0x20000018

08009768 <setvbuf>:
 8009768:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800976c:	461d      	mov	r5, r3
 800976e:	4b57      	ldr	r3, [pc, #348]	@ (80098cc <setvbuf+0x164>)
 8009770:	681f      	ldr	r7, [r3, #0]
 8009772:	4604      	mov	r4, r0
 8009774:	460e      	mov	r6, r1
 8009776:	4690      	mov	r8, r2
 8009778:	b127      	cbz	r7, 8009784 <setvbuf+0x1c>
 800977a:	6a3b      	ldr	r3, [r7, #32]
 800977c:	b913      	cbnz	r3, 8009784 <setvbuf+0x1c>
 800977e:	4638      	mov	r0, r7
 8009780:	f7ff ff4c 	bl	800961c <__sinit>
 8009784:	f1b8 0f02 	cmp.w	r8, #2
 8009788:	d006      	beq.n	8009798 <setvbuf+0x30>
 800978a:	f1b8 0f01 	cmp.w	r8, #1
 800978e:	f200 809a 	bhi.w	80098c6 <setvbuf+0x15e>
 8009792:	2d00      	cmp	r5, #0
 8009794:	f2c0 8097 	blt.w	80098c6 <setvbuf+0x15e>
 8009798:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800979a:	07d9      	lsls	r1, r3, #31
 800979c:	d405      	bmi.n	80097aa <setvbuf+0x42>
 800979e:	89a3      	ldrh	r3, [r4, #12]
 80097a0:	059a      	lsls	r2, r3, #22
 80097a2:	d402      	bmi.n	80097aa <setvbuf+0x42>
 80097a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80097a6:	f000 fa6e 	bl	8009c86 <__retarget_lock_acquire_recursive>
 80097aa:	4621      	mov	r1, r4
 80097ac:	4638      	mov	r0, r7
 80097ae:	f003 fb35 	bl	800ce1c <_fflush_r>
 80097b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80097b4:	b141      	cbz	r1, 80097c8 <setvbuf+0x60>
 80097b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80097ba:	4299      	cmp	r1, r3
 80097bc:	d002      	beq.n	80097c4 <setvbuf+0x5c>
 80097be:	4638      	mov	r0, r7
 80097c0:	f001 f8c2 	bl	800a948 <_free_r>
 80097c4:	2300      	movs	r3, #0
 80097c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80097c8:	2300      	movs	r3, #0
 80097ca:	61a3      	str	r3, [r4, #24]
 80097cc:	6063      	str	r3, [r4, #4]
 80097ce:	89a3      	ldrh	r3, [r4, #12]
 80097d0:	061b      	lsls	r3, r3, #24
 80097d2:	d503      	bpl.n	80097dc <setvbuf+0x74>
 80097d4:	6921      	ldr	r1, [r4, #16]
 80097d6:	4638      	mov	r0, r7
 80097d8:	f001 f8b6 	bl	800a948 <_free_r>
 80097dc:	89a3      	ldrh	r3, [r4, #12]
 80097de:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 80097e2:	f023 0303 	bic.w	r3, r3, #3
 80097e6:	f1b8 0f02 	cmp.w	r8, #2
 80097ea:	81a3      	strh	r3, [r4, #12]
 80097ec:	d061      	beq.n	80098b2 <setvbuf+0x14a>
 80097ee:	ab01      	add	r3, sp, #4
 80097f0:	466a      	mov	r2, sp
 80097f2:	4621      	mov	r1, r4
 80097f4:	4638      	mov	r0, r7
 80097f6:	f003 fb39 	bl	800ce6c <__swhatbuf_r>
 80097fa:	89a3      	ldrh	r3, [r4, #12]
 80097fc:	4318      	orrs	r0, r3
 80097fe:	81a0      	strh	r0, [r4, #12]
 8009800:	bb2d      	cbnz	r5, 800984e <setvbuf+0xe6>
 8009802:	9d00      	ldr	r5, [sp, #0]
 8009804:	4628      	mov	r0, r5
 8009806:	f001 f8e9 	bl	800a9dc <malloc>
 800980a:	4606      	mov	r6, r0
 800980c:	2800      	cmp	r0, #0
 800980e:	d152      	bne.n	80098b6 <setvbuf+0x14e>
 8009810:	f8dd 9000 	ldr.w	r9, [sp]
 8009814:	45a9      	cmp	r9, r5
 8009816:	d140      	bne.n	800989a <setvbuf+0x132>
 8009818:	f04f 35ff 	mov.w	r5, #4294967295
 800981c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009820:	f043 0202 	orr.w	r2, r3, #2
 8009824:	81a2      	strh	r2, [r4, #12]
 8009826:	2200      	movs	r2, #0
 8009828:	60a2      	str	r2, [r4, #8]
 800982a:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800982e:	6022      	str	r2, [r4, #0]
 8009830:	6122      	str	r2, [r4, #16]
 8009832:	2201      	movs	r2, #1
 8009834:	6162      	str	r2, [r4, #20]
 8009836:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009838:	07d6      	lsls	r6, r2, #31
 800983a:	d404      	bmi.n	8009846 <setvbuf+0xde>
 800983c:	0598      	lsls	r0, r3, #22
 800983e:	d402      	bmi.n	8009846 <setvbuf+0xde>
 8009840:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009842:	f000 fa21 	bl	8009c88 <__retarget_lock_release_recursive>
 8009846:	4628      	mov	r0, r5
 8009848:	b003      	add	sp, #12
 800984a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800984e:	2e00      	cmp	r6, #0
 8009850:	d0d8      	beq.n	8009804 <setvbuf+0x9c>
 8009852:	6a3b      	ldr	r3, [r7, #32]
 8009854:	b913      	cbnz	r3, 800985c <setvbuf+0xf4>
 8009856:	4638      	mov	r0, r7
 8009858:	f7ff fee0 	bl	800961c <__sinit>
 800985c:	f1b8 0f01 	cmp.w	r8, #1
 8009860:	bf08      	it	eq
 8009862:	89a3      	ldrheq	r3, [r4, #12]
 8009864:	6026      	str	r6, [r4, #0]
 8009866:	bf04      	itt	eq
 8009868:	f043 0301 	orreq.w	r3, r3, #1
 800986c:	81a3      	strheq	r3, [r4, #12]
 800986e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009872:	f013 0208 	ands.w	r2, r3, #8
 8009876:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800987a:	d01e      	beq.n	80098ba <setvbuf+0x152>
 800987c:	07d9      	lsls	r1, r3, #31
 800987e:	bf41      	itttt	mi
 8009880:	2200      	movmi	r2, #0
 8009882:	426d      	negmi	r5, r5
 8009884:	60a2      	strmi	r2, [r4, #8]
 8009886:	61a5      	strmi	r5, [r4, #24]
 8009888:	bf58      	it	pl
 800988a:	60a5      	strpl	r5, [r4, #8]
 800988c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800988e:	07d2      	lsls	r2, r2, #31
 8009890:	d401      	bmi.n	8009896 <setvbuf+0x12e>
 8009892:	059b      	lsls	r3, r3, #22
 8009894:	d513      	bpl.n	80098be <setvbuf+0x156>
 8009896:	2500      	movs	r5, #0
 8009898:	e7d5      	b.n	8009846 <setvbuf+0xde>
 800989a:	4648      	mov	r0, r9
 800989c:	f001 f89e 	bl	800a9dc <malloc>
 80098a0:	4606      	mov	r6, r0
 80098a2:	2800      	cmp	r0, #0
 80098a4:	d0b8      	beq.n	8009818 <setvbuf+0xb0>
 80098a6:	89a3      	ldrh	r3, [r4, #12]
 80098a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098ac:	81a3      	strh	r3, [r4, #12]
 80098ae:	464d      	mov	r5, r9
 80098b0:	e7cf      	b.n	8009852 <setvbuf+0xea>
 80098b2:	2500      	movs	r5, #0
 80098b4:	e7b2      	b.n	800981c <setvbuf+0xb4>
 80098b6:	46a9      	mov	r9, r5
 80098b8:	e7f5      	b.n	80098a6 <setvbuf+0x13e>
 80098ba:	60a2      	str	r2, [r4, #8]
 80098bc:	e7e6      	b.n	800988c <setvbuf+0x124>
 80098be:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098c0:	f000 f9e2 	bl	8009c88 <__retarget_lock_release_recursive>
 80098c4:	e7e7      	b.n	8009896 <setvbuf+0x12e>
 80098c6:	f04f 35ff 	mov.w	r5, #4294967295
 80098ca:	e7bc      	b.n	8009846 <setvbuf+0xde>
 80098cc:	20000018 	.word	0x20000018

080098d0 <sniprintf>:
 80098d0:	b40c      	push	{r2, r3}
 80098d2:	b530      	push	{r4, r5, lr}
 80098d4:	4b18      	ldr	r3, [pc, #96]	@ (8009938 <sniprintf+0x68>)
 80098d6:	1e0c      	subs	r4, r1, #0
 80098d8:	681d      	ldr	r5, [r3, #0]
 80098da:	b09d      	sub	sp, #116	@ 0x74
 80098dc:	da08      	bge.n	80098f0 <sniprintf+0x20>
 80098de:	238b      	movs	r3, #139	@ 0x8b
 80098e0:	602b      	str	r3, [r5, #0]
 80098e2:	f04f 30ff 	mov.w	r0, #4294967295
 80098e6:	b01d      	add	sp, #116	@ 0x74
 80098e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098ec:	b002      	add	sp, #8
 80098ee:	4770      	bx	lr
 80098f0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80098f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80098f8:	f04f 0300 	mov.w	r3, #0
 80098fc:	931b      	str	r3, [sp, #108]	@ 0x6c
 80098fe:	bf14      	ite	ne
 8009900:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009904:	4623      	moveq	r3, r4
 8009906:	9304      	str	r3, [sp, #16]
 8009908:	9307      	str	r3, [sp, #28]
 800990a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800990e:	9002      	str	r0, [sp, #8]
 8009910:	9006      	str	r0, [sp, #24]
 8009912:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009916:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009918:	ab21      	add	r3, sp, #132	@ 0x84
 800991a:	a902      	add	r1, sp, #8
 800991c:	4628      	mov	r0, r5
 800991e:	9301      	str	r3, [sp, #4]
 8009920:	f002 fc9c 	bl	800c25c <_svfiprintf_r>
 8009924:	1c43      	adds	r3, r0, #1
 8009926:	bfbc      	itt	lt
 8009928:	238b      	movlt	r3, #139	@ 0x8b
 800992a:	602b      	strlt	r3, [r5, #0]
 800992c:	2c00      	cmp	r4, #0
 800992e:	d0da      	beq.n	80098e6 <sniprintf+0x16>
 8009930:	9b02      	ldr	r3, [sp, #8]
 8009932:	2200      	movs	r2, #0
 8009934:	701a      	strb	r2, [r3, #0]
 8009936:	e7d6      	b.n	80098e6 <sniprintf+0x16>
 8009938:	20000018 	.word	0x20000018

0800993c <siprintf>:
 800993c:	b40e      	push	{r1, r2, r3}
 800993e:	b510      	push	{r4, lr}
 8009940:	b09d      	sub	sp, #116	@ 0x74
 8009942:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009944:	9002      	str	r0, [sp, #8]
 8009946:	9006      	str	r0, [sp, #24]
 8009948:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800994c:	480a      	ldr	r0, [pc, #40]	@ (8009978 <siprintf+0x3c>)
 800994e:	9107      	str	r1, [sp, #28]
 8009950:	9104      	str	r1, [sp, #16]
 8009952:	490a      	ldr	r1, [pc, #40]	@ (800997c <siprintf+0x40>)
 8009954:	f853 2b04 	ldr.w	r2, [r3], #4
 8009958:	9105      	str	r1, [sp, #20]
 800995a:	2400      	movs	r4, #0
 800995c:	a902      	add	r1, sp, #8
 800995e:	6800      	ldr	r0, [r0, #0]
 8009960:	9301      	str	r3, [sp, #4]
 8009962:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009964:	f002 fc7a 	bl	800c25c <_svfiprintf_r>
 8009968:	9b02      	ldr	r3, [sp, #8]
 800996a:	701c      	strb	r4, [r3, #0]
 800996c:	b01d      	add	sp, #116	@ 0x74
 800996e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009972:	b003      	add	sp, #12
 8009974:	4770      	bx	lr
 8009976:	bf00      	nop
 8009978:	20000018 	.word	0x20000018
 800997c:	ffff0208 	.word	0xffff0208

08009980 <siscanf>:
 8009980:	b40e      	push	{r1, r2, r3}
 8009982:	b570      	push	{r4, r5, r6, lr}
 8009984:	b09d      	sub	sp, #116	@ 0x74
 8009986:	ac21      	add	r4, sp, #132	@ 0x84
 8009988:	2500      	movs	r5, #0
 800998a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800998e:	f854 6b04 	ldr.w	r6, [r4], #4
 8009992:	f8ad 2014 	strh.w	r2, [sp, #20]
 8009996:	951b      	str	r5, [sp, #108]	@ 0x6c
 8009998:	9002      	str	r0, [sp, #8]
 800999a:	9006      	str	r0, [sp, #24]
 800999c:	f7f6 fc68 	bl	8000270 <strlen>
 80099a0:	4b0b      	ldr	r3, [pc, #44]	@ (80099d0 <siscanf+0x50>)
 80099a2:	9003      	str	r0, [sp, #12]
 80099a4:	9007      	str	r0, [sp, #28]
 80099a6:	480b      	ldr	r0, [pc, #44]	@ (80099d4 <siscanf+0x54>)
 80099a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80099aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80099ae:	f8ad 3016 	strh.w	r3, [sp, #22]
 80099b2:	4632      	mov	r2, r6
 80099b4:	4623      	mov	r3, r4
 80099b6:	a902      	add	r1, sp, #8
 80099b8:	6800      	ldr	r0, [r0, #0]
 80099ba:	950f      	str	r5, [sp, #60]	@ 0x3c
 80099bc:	9514      	str	r5, [sp, #80]	@ 0x50
 80099be:	9401      	str	r4, [sp, #4]
 80099c0:	f002 fda2 	bl	800c508 <__ssvfiscanf_r>
 80099c4:	b01d      	add	sp, #116	@ 0x74
 80099c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80099ca:	b003      	add	sp, #12
 80099cc:	4770      	bx	lr
 80099ce:	bf00      	nop
 80099d0:	080099fb 	.word	0x080099fb
 80099d4:	20000018 	.word	0x20000018

080099d8 <__sread>:
 80099d8:	b510      	push	{r4, lr}
 80099da:	460c      	mov	r4, r1
 80099dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099e0:	f000 f902 	bl	8009be8 <_read_r>
 80099e4:	2800      	cmp	r0, #0
 80099e6:	bfab      	itete	ge
 80099e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80099ea:	89a3      	ldrhlt	r3, [r4, #12]
 80099ec:	181b      	addge	r3, r3, r0
 80099ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80099f2:	bfac      	ite	ge
 80099f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80099f6:	81a3      	strhlt	r3, [r4, #12]
 80099f8:	bd10      	pop	{r4, pc}

080099fa <__seofread>:
 80099fa:	2000      	movs	r0, #0
 80099fc:	4770      	bx	lr

080099fe <__swrite>:
 80099fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a02:	461f      	mov	r7, r3
 8009a04:	898b      	ldrh	r3, [r1, #12]
 8009a06:	05db      	lsls	r3, r3, #23
 8009a08:	4605      	mov	r5, r0
 8009a0a:	460c      	mov	r4, r1
 8009a0c:	4616      	mov	r6, r2
 8009a0e:	d505      	bpl.n	8009a1c <__swrite+0x1e>
 8009a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a14:	2302      	movs	r3, #2
 8009a16:	2200      	movs	r2, #0
 8009a18:	f000 f8d4 	bl	8009bc4 <_lseek_r>
 8009a1c:	89a3      	ldrh	r3, [r4, #12]
 8009a1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009a26:	81a3      	strh	r3, [r4, #12]
 8009a28:	4632      	mov	r2, r6
 8009a2a:	463b      	mov	r3, r7
 8009a2c:	4628      	mov	r0, r5
 8009a2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a32:	f000 b8eb 	b.w	8009c0c <_write_r>

08009a36 <__sseek>:
 8009a36:	b510      	push	{r4, lr}
 8009a38:	460c      	mov	r4, r1
 8009a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a3e:	f000 f8c1 	bl	8009bc4 <_lseek_r>
 8009a42:	1c43      	adds	r3, r0, #1
 8009a44:	89a3      	ldrh	r3, [r4, #12]
 8009a46:	bf15      	itete	ne
 8009a48:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009a4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009a4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009a52:	81a3      	strheq	r3, [r4, #12]
 8009a54:	bf18      	it	ne
 8009a56:	81a3      	strhne	r3, [r4, #12]
 8009a58:	bd10      	pop	{r4, pc}

08009a5a <__sclose>:
 8009a5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a5e:	f000 b8a1 	b.w	8009ba4 <_close_r>

08009a62 <__swbuf_r>:
 8009a62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a64:	460e      	mov	r6, r1
 8009a66:	4614      	mov	r4, r2
 8009a68:	4605      	mov	r5, r0
 8009a6a:	b118      	cbz	r0, 8009a74 <__swbuf_r+0x12>
 8009a6c:	6a03      	ldr	r3, [r0, #32]
 8009a6e:	b90b      	cbnz	r3, 8009a74 <__swbuf_r+0x12>
 8009a70:	f7ff fdd4 	bl	800961c <__sinit>
 8009a74:	69a3      	ldr	r3, [r4, #24]
 8009a76:	60a3      	str	r3, [r4, #8]
 8009a78:	89a3      	ldrh	r3, [r4, #12]
 8009a7a:	071a      	lsls	r2, r3, #28
 8009a7c:	d501      	bpl.n	8009a82 <__swbuf_r+0x20>
 8009a7e:	6923      	ldr	r3, [r4, #16]
 8009a80:	b943      	cbnz	r3, 8009a94 <__swbuf_r+0x32>
 8009a82:	4621      	mov	r1, r4
 8009a84:	4628      	mov	r0, r5
 8009a86:	f000 f82b 	bl	8009ae0 <__swsetup_r>
 8009a8a:	b118      	cbz	r0, 8009a94 <__swbuf_r+0x32>
 8009a8c:	f04f 37ff 	mov.w	r7, #4294967295
 8009a90:	4638      	mov	r0, r7
 8009a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a94:	6823      	ldr	r3, [r4, #0]
 8009a96:	6922      	ldr	r2, [r4, #16]
 8009a98:	1a98      	subs	r0, r3, r2
 8009a9a:	6963      	ldr	r3, [r4, #20]
 8009a9c:	b2f6      	uxtb	r6, r6
 8009a9e:	4283      	cmp	r3, r0
 8009aa0:	4637      	mov	r7, r6
 8009aa2:	dc05      	bgt.n	8009ab0 <__swbuf_r+0x4e>
 8009aa4:	4621      	mov	r1, r4
 8009aa6:	4628      	mov	r0, r5
 8009aa8:	f003 f9b8 	bl	800ce1c <_fflush_r>
 8009aac:	2800      	cmp	r0, #0
 8009aae:	d1ed      	bne.n	8009a8c <__swbuf_r+0x2a>
 8009ab0:	68a3      	ldr	r3, [r4, #8]
 8009ab2:	3b01      	subs	r3, #1
 8009ab4:	60a3      	str	r3, [r4, #8]
 8009ab6:	6823      	ldr	r3, [r4, #0]
 8009ab8:	1c5a      	adds	r2, r3, #1
 8009aba:	6022      	str	r2, [r4, #0]
 8009abc:	701e      	strb	r6, [r3, #0]
 8009abe:	6962      	ldr	r2, [r4, #20]
 8009ac0:	1c43      	adds	r3, r0, #1
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d004      	beq.n	8009ad0 <__swbuf_r+0x6e>
 8009ac6:	89a3      	ldrh	r3, [r4, #12]
 8009ac8:	07db      	lsls	r3, r3, #31
 8009aca:	d5e1      	bpl.n	8009a90 <__swbuf_r+0x2e>
 8009acc:	2e0a      	cmp	r6, #10
 8009ace:	d1df      	bne.n	8009a90 <__swbuf_r+0x2e>
 8009ad0:	4621      	mov	r1, r4
 8009ad2:	4628      	mov	r0, r5
 8009ad4:	f003 f9a2 	bl	800ce1c <_fflush_r>
 8009ad8:	2800      	cmp	r0, #0
 8009ada:	d0d9      	beq.n	8009a90 <__swbuf_r+0x2e>
 8009adc:	e7d6      	b.n	8009a8c <__swbuf_r+0x2a>
	...

08009ae0 <__swsetup_r>:
 8009ae0:	b538      	push	{r3, r4, r5, lr}
 8009ae2:	4b29      	ldr	r3, [pc, #164]	@ (8009b88 <__swsetup_r+0xa8>)
 8009ae4:	4605      	mov	r5, r0
 8009ae6:	6818      	ldr	r0, [r3, #0]
 8009ae8:	460c      	mov	r4, r1
 8009aea:	b118      	cbz	r0, 8009af4 <__swsetup_r+0x14>
 8009aec:	6a03      	ldr	r3, [r0, #32]
 8009aee:	b90b      	cbnz	r3, 8009af4 <__swsetup_r+0x14>
 8009af0:	f7ff fd94 	bl	800961c <__sinit>
 8009af4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009af8:	0719      	lsls	r1, r3, #28
 8009afa:	d422      	bmi.n	8009b42 <__swsetup_r+0x62>
 8009afc:	06da      	lsls	r2, r3, #27
 8009afe:	d407      	bmi.n	8009b10 <__swsetup_r+0x30>
 8009b00:	2209      	movs	r2, #9
 8009b02:	602a      	str	r2, [r5, #0]
 8009b04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b08:	81a3      	strh	r3, [r4, #12]
 8009b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b0e:	e033      	b.n	8009b78 <__swsetup_r+0x98>
 8009b10:	0758      	lsls	r0, r3, #29
 8009b12:	d512      	bpl.n	8009b3a <__swsetup_r+0x5a>
 8009b14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b16:	b141      	cbz	r1, 8009b2a <__swsetup_r+0x4a>
 8009b18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b1c:	4299      	cmp	r1, r3
 8009b1e:	d002      	beq.n	8009b26 <__swsetup_r+0x46>
 8009b20:	4628      	mov	r0, r5
 8009b22:	f000 ff11 	bl	800a948 <_free_r>
 8009b26:	2300      	movs	r3, #0
 8009b28:	6363      	str	r3, [r4, #52]	@ 0x34
 8009b2a:	89a3      	ldrh	r3, [r4, #12]
 8009b2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009b30:	81a3      	strh	r3, [r4, #12]
 8009b32:	2300      	movs	r3, #0
 8009b34:	6063      	str	r3, [r4, #4]
 8009b36:	6923      	ldr	r3, [r4, #16]
 8009b38:	6023      	str	r3, [r4, #0]
 8009b3a:	89a3      	ldrh	r3, [r4, #12]
 8009b3c:	f043 0308 	orr.w	r3, r3, #8
 8009b40:	81a3      	strh	r3, [r4, #12]
 8009b42:	6923      	ldr	r3, [r4, #16]
 8009b44:	b94b      	cbnz	r3, 8009b5a <__swsetup_r+0x7a>
 8009b46:	89a3      	ldrh	r3, [r4, #12]
 8009b48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009b4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b50:	d003      	beq.n	8009b5a <__swsetup_r+0x7a>
 8009b52:	4621      	mov	r1, r4
 8009b54:	4628      	mov	r0, r5
 8009b56:	f003 f9af 	bl	800ceb8 <__smakebuf_r>
 8009b5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b5e:	f013 0201 	ands.w	r2, r3, #1
 8009b62:	d00a      	beq.n	8009b7a <__swsetup_r+0x9a>
 8009b64:	2200      	movs	r2, #0
 8009b66:	60a2      	str	r2, [r4, #8]
 8009b68:	6962      	ldr	r2, [r4, #20]
 8009b6a:	4252      	negs	r2, r2
 8009b6c:	61a2      	str	r2, [r4, #24]
 8009b6e:	6922      	ldr	r2, [r4, #16]
 8009b70:	b942      	cbnz	r2, 8009b84 <__swsetup_r+0xa4>
 8009b72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009b76:	d1c5      	bne.n	8009b04 <__swsetup_r+0x24>
 8009b78:	bd38      	pop	{r3, r4, r5, pc}
 8009b7a:	0799      	lsls	r1, r3, #30
 8009b7c:	bf58      	it	pl
 8009b7e:	6962      	ldrpl	r2, [r4, #20]
 8009b80:	60a2      	str	r2, [r4, #8]
 8009b82:	e7f4      	b.n	8009b6e <__swsetup_r+0x8e>
 8009b84:	2000      	movs	r0, #0
 8009b86:	e7f7      	b.n	8009b78 <__swsetup_r+0x98>
 8009b88:	20000018 	.word	0x20000018

08009b8c <memset>:
 8009b8c:	4402      	add	r2, r0
 8009b8e:	4603      	mov	r3, r0
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d100      	bne.n	8009b96 <memset+0xa>
 8009b94:	4770      	bx	lr
 8009b96:	f803 1b01 	strb.w	r1, [r3], #1
 8009b9a:	e7f9      	b.n	8009b90 <memset+0x4>

08009b9c <_localeconv_r>:
 8009b9c:	4800      	ldr	r0, [pc, #0]	@ (8009ba0 <_localeconv_r+0x4>)
 8009b9e:	4770      	bx	lr
 8009ba0:	20000158 	.word	0x20000158

08009ba4 <_close_r>:
 8009ba4:	b538      	push	{r3, r4, r5, lr}
 8009ba6:	4d06      	ldr	r5, [pc, #24]	@ (8009bc0 <_close_r+0x1c>)
 8009ba8:	2300      	movs	r3, #0
 8009baa:	4604      	mov	r4, r0
 8009bac:	4608      	mov	r0, r1
 8009bae:	602b      	str	r3, [r5, #0]
 8009bb0:	f7f8 fd78 	bl	80026a4 <_close>
 8009bb4:	1c43      	adds	r3, r0, #1
 8009bb6:	d102      	bne.n	8009bbe <_close_r+0x1a>
 8009bb8:	682b      	ldr	r3, [r5, #0]
 8009bba:	b103      	cbz	r3, 8009bbe <_close_r+0x1a>
 8009bbc:	6023      	str	r3, [r4, #0]
 8009bbe:	bd38      	pop	{r3, r4, r5, pc}
 8009bc0:	200006bc 	.word	0x200006bc

08009bc4 <_lseek_r>:
 8009bc4:	b538      	push	{r3, r4, r5, lr}
 8009bc6:	4d07      	ldr	r5, [pc, #28]	@ (8009be4 <_lseek_r+0x20>)
 8009bc8:	4604      	mov	r4, r0
 8009bca:	4608      	mov	r0, r1
 8009bcc:	4611      	mov	r1, r2
 8009bce:	2200      	movs	r2, #0
 8009bd0:	602a      	str	r2, [r5, #0]
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	f7f8 fd8d 	bl	80026f2 <_lseek>
 8009bd8:	1c43      	adds	r3, r0, #1
 8009bda:	d102      	bne.n	8009be2 <_lseek_r+0x1e>
 8009bdc:	682b      	ldr	r3, [r5, #0]
 8009bde:	b103      	cbz	r3, 8009be2 <_lseek_r+0x1e>
 8009be0:	6023      	str	r3, [r4, #0]
 8009be2:	bd38      	pop	{r3, r4, r5, pc}
 8009be4:	200006bc 	.word	0x200006bc

08009be8 <_read_r>:
 8009be8:	b538      	push	{r3, r4, r5, lr}
 8009bea:	4d07      	ldr	r5, [pc, #28]	@ (8009c08 <_read_r+0x20>)
 8009bec:	4604      	mov	r4, r0
 8009bee:	4608      	mov	r0, r1
 8009bf0:	4611      	mov	r1, r2
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	602a      	str	r2, [r5, #0]
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	f7f8 fd1b 	bl	8002632 <_read>
 8009bfc:	1c43      	adds	r3, r0, #1
 8009bfe:	d102      	bne.n	8009c06 <_read_r+0x1e>
 8009c00:	682b      	ldr	r3, [r5, #0]
 8009c02:	b103      	cbz	r3, 8009c06 <_read_r+0x1e>
 8009c04:	6023      	str	r3, [r4, #0]
 8009c06:	bd38      	pop	{r3, r4, r5, pc}
 8009c08:	200006bc 	.word	0x200006bc

08009c0c <_write_r>:
 8009c0c:	b538      	push	{r3, r4, r5, lr}
 8009c0e:	4d07      	ldr	r5, [pc, #28]	@ (8009c2c <_write_r+0x20>)
 8009c10:	4604      	mov	r4, r0
 8009c12:	4608      	mov	r0, r1
 8009c14:	4611      	mov	r1, r2
 8009c16:	2200      	movs	r2, #0
 8009c18:	602a      	str	r2, [r5, #0]
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	f7f8 fd26 	bl	800266c <_write>
 8009c20:	1c43      	adds	r3, r0, #1
 8009c22:	d102      	bne.n	8009c2a <_write_r+0x1e>
 8009c24:	682b      	ldr	r3, [r5, #0]
 8009c26:	b103      	cbz	r3, 8009c2a <_write_r+0x1e>
 8009c28:	6023      	str	r3, [r4, #0]
 8009c2a:	bd38      	pop	{r3, r4, r5, pc}
 8009c2c:	200006bc 	.word	0x200006bc

08009c30 <__errno>:
 8009c30:	4b01      	ldr	r3, [pc, #4]	@ (8009c38 <__errno+0x8>)
 8009c32:	6818      	ldr	r0, [r3, #0]
 8009c34:	4770      	bx	lr
 8009c36:	bf00      	nop
 8009c38:	20000018 	.word	0x20000018

08009c3c <__libc_init_array>:
 8009c3c:	b570      	push	{r4, r5, r6, lr}
 8009c3e:	4d0d      	ldr	r5, [pc, #52]	@ (8009c74 <__libc_init_array+0x38>)
 8009c40:	4c0d      	ldr	r4, [pc, #52]	@ (8009c78 <__libc_init_array+0x3c>)
 8009c42:	1b64      	subs	r4, r4, r5
 8009c44:	10a4      	asrs	r4, r4, #2
 8009c46:	2600      	movs	r6, #0
 8009c48:	42a6      	cmp	r6, r4
 8009c4a:	d109      	bne.n	8009c60 <__libc_init_array+0x24>
 8009c4c:	4d0b      	ldr	r5, [pc, #44]	@ (8009c7c <__libc_init_array+0x40>)
 8009c4e:	4c0c      	ldr	r4, [pc, #48]	@ (8009c80 <__libc_init_array+0x44>)
 8009c50:	f003 fee6 	bl	800da20 <_init>
 8009c54:	1b64      	subs	r4, r4, r5
 8009c56:	10a4      	asrs	r4, r4, #2
 8009c58:	2600      	movs	r6, #0
 8009c5a:	42a6      	cmp	r6, r4
 8009c5c:	d105      	bne.n	8009c6a <__libc_init_array+0x2e>
 8009c5e:	bd70      	pop	{r4, r5, r6, pc}
 8009c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c64:	4798      	blx	r3
 8009c66:	3601      	adds	r6, #1
 8009c68:	e7ee      	b.n	8009c48 <__libc_init_array+0xc>
 8009c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c6e:	4798      	blx	r3
 8009c70:	3601      	adds	r6, #1
 8009c72:	e7f2      	b.n	8009c5a <__libc_init_array+0x1e>
 8009c74:	0800dff4 	.word	0x0800dff4
 8009c78:	0800dff4 	.word	0x0800dff4
 8009c7c:	0800dff4 	.word	0x0800dff4
 8009c80:	0800dff8 	.word	0x0800dff8

08009c84 <__retarget_lock_init_recursive>:
 8009c84:	4770      	bx	lr

08009c86 <__retarget_lock_acquire_recursive>:
 8009c86:	4770      	bx	lr

08009c88 <__retarget_lock_release_recursive>:
 8009c88:	4770      	bx	lr
	...

08009c8c <nanf>:
 8009c8c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009c94 <nanf+0x8>
 8009c90:	4770      	bx	lr
 8009c92:	bf00      	nop
 8009c94:	7fc00000 	.word	0x7fc00000

08009c98 <quorem>:
 8009c98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c9c:	6903      	ldr	r3, [r0, #16]
 8009c9e:	690c      	ldr	r4, [r1, #16]
 8009ca0:	42a3      	cmp	r3, r4
 8009ca2:	4607      	mov	r7, r0
 8009ca4:	db7e      	blt.n	8009da4 <quorem+0x10c>
 8009ca6:	3c01      	subs	r4, #1
 8009ca8:	f101 0814 	add.w	r8, r1, #20
 8009cac:	00a3      	lsls	r3, r4, #2
 8009cae:	f100 0514 	add.w	r5, r0, #20
 8009cb2:	9300      	str	r3, [sp, #0]
 8009cb4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009cb8:	9301      	str	r3, [sp, #4]
 8009cba:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009cbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009cca:	fbb2 f6f3 	udiv	r6, r2, r3
 8009cce:	d32e      	bcc.n	8009d2e <quorem+0x96>
 8009cd0:	f04f 0a00 	mov.w	sl, #0
 8009cd4:	46c4      	mov	ip, r8
 8009cd6:	46ae      	mov	lr, r5
 8009cd8:	46d3      	mov	fp, sl
 8009cda:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009cde:	b298      	uxth	r0, r3
 8009ce0:	fb06 a000 	mla	r0, r6, r0, sl
 8009ce4:	0c02      	lsrs	r2, r0, #16
 8009ce6:	0c1b      	lsrs	r3, r3, #16
 8009ce8:	fb06 2303 	mla	r3, r6, r3, r2
 8009cec:	f8de 2000 	ldr.w	r2, [lr]
 8009cf0:	b280      	uxth	r0, r0
 8009cf2:	b292      	uxth	r2, r2
 8009cf4:	1a12      	subs	r2, r2, r0
 8009cf6:	445a      	add	r2, fp
 8009cf8:	f8de 0000 	ldr.w	r0, [lr]
 8009cfc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009d06:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009d0a:	b292      	uxth	r2, r2
 8009d0c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009d10:	45e1      	cmp	r9, ip
 8009d12:	f84e 2b04 	str.w	r2, [lr], #4
 8009d16:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009d1a:	d2de      	bcs.n	8009cda <quorem+0x42>
 8009d1c:	9b00      	ldr	r3, [sp, #0]
 8009d1e:	58eb      	ldr	r3, [r5, r3]
 8009d20:	b92b      	cbnz	r3, 8009d2e <quorem+0x96>
 8009d22:	9b01      	ldr	r3, [sp, #4]
 8009d24:	3b04      	subs	r3, #4
 8009d26:	429d      	cmp	r5, r3
 8009d28:	461a      	mov	r2, r3
 8009d2a:	d32f      	bcc.n	8009d8c <quorem+0xf4>
 8009d2c:	613c      	str	r4, [r7, #16]
 8009d2e:	4638      	mov	r0, r7
 8009d30:	f001 f9c6 	bl	800b0c0 <__mcmp>
 8009d34:	2800      	cmp	r0, #0
 8009d36:	db25      	blt.n	8009d84 <quorem+0xec>
 8009d38:	4629      	mov	r1, r5
 8009d3a:	2000      	movs	r0, #0
 8009d3c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009d40:	f8d1 c000 	ldr.w	ip, [r1]
 8009d44:	fa1f fe82 	uxth.w	lr, r2
 8009d48:	fa1f f38c 	uxth.w	r3, ip
 8009d4c:	eba3 030e 	sub.w	r3, r3, lr
 8009d50:	4403      	add	r3, r0
 8009d52:	0c12      	lsrs	r2, r2, #16
 8009d54:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009d58:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d62:	45c1      	cmp	r9, r8
 8009d64:	f841 3b04 	str.w	r3, [r1], #4
 8009d68:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009d6c:	d2e6      	bcs.n	8009d3c <quorem+0xa4>
 8009d6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d76:	b922      	cbnz	r2, 8009d82 <quorem+0xea>
 8009d78:	3b04      	subs	r3, #4
 8009d7a:	429d      	cmp	r5, r3
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	d30b      	bcc.n	8009d98 <quorem+0x100>
 8009d80:	613c      	str	r4, [r7, #16]
 8009d82:	3601      	adds	r6, #1
 8009d84:	4630      	mov	r0, r6
 8009d86:	b003      	add	sp, #12
 8009d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d8c:	6812      	ldr	r2, [r2, #0]
 8009d8e:	3b04      	subs	r3, #4
 8009d90:	2a00      	cmp	r2, #0
 8009d92:	d1cb      	bne.n	8009d2c <quorem+0x94>
 8009d94:	3c01      	subs	r4, #1
 8009d96:	e7c6      	b.n	8009d26 <quorem+0x8e>
 8009d98:	6812      	ldr	r2, [r2, #0]
 8009d9a:	3b04      	subs	r3, #4
 8009d9c:	2a00      	cmp	r2, #0
 8009d9e:	d1ef      	bne.n	8009d80 <quorem+0xe8>
 8009da0:	3c01      	subs	r4, #1
 8009da2:	e7ea      	b.n	8009d7a <quorem+0xe2>
 8009da4:	2000      	movs	r0, #0
 8009da6:	e7ee      	b.n	8009d86 <quorem+0xee>

08009da8 <_dtoa_r>:
 8009da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dac:	69c7      	ldr	r7, [r0, #28]
 8009dae:	b097      	sub	sp, #92	@ 0x5c
 8009db0:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009db4:	ec55 4b10 	vmov	r4, r5, d0
 8009db8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009dba:	9107      	str	r1, [sp, #28]
 8009dbc:	4681      	mov	r9, r0
 8009dbe:	920c      	str	r2, [sp, #48]	@ 0x30
 8009dc0:	9311      	str	r3, [sp, #68]	@ 0x44
 8009dc2:	b97f      	cbnz	r7, 8009de4 <_dtoa_r+0x3c>
 8009dc4:	2010      	movs	r0, #16
 8009dc6:	f000 fe09 	bl	800a9dc <malloc>
 8009dca:	4602      	mov	r2, r0
 8009dcc:	f8c9 001c 	str.w	r0, [r9, #28]
 8009dd0:	b920      	cbnz	r0, 8009ddc <_dtoa_r+0x34>
 8009dd2:	4ba9      	ldr	r3, [pc, #676]	@ (800a078 <_dtoa_r+0x2d0>)
 8009dd4:	21ef      	movs	r1, #239	@ 0xef
 8009dd6:	48a9      	ldr	r0, [pc, #676]	@ (800a07c <_dtoa_r+0x2d4>)
 8009dd8:	f003 f992 	bl	800d100 <__assert_func>
 8009ddc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009de0:	6007      	str	r7, [r0, #0]
 8009de2:	60c7      	str	r7, [r0, #12]
 8009de4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009de8:	6819      	ldr	r1, [r3, #0]
 8009dea:	b159      	cbz	r1, 8009e04 <_dtoa_r+0x5c>
 8009dec:	685a      	ldr	r2, [r3, #4]
 8009dee:	604a      	str	r2, [r1, #4]
 8009df0:	2301      	movs	r3, #1
 8009df2:	4093      	lsls	r3, r2
 8009df4:	608b      	str	r3, [r1, #8]
 8009df6:	4648      	mov	r0, r9
 8009df8:	f000 fee6 	bl	800abc8 <_Bfree>
 8009dfc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009e00:	2200      	movs	r2, #0
 8009e02:	601a      	str	r2, [r3, #0]
 8009e04:	1e2b      	subs	r3, r5, #0
 8009e06:	bfb9      	ittee	lt
 8009e08:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009e0c:	9305      	strlt	r3, [sp, #20]
 8009e0e:	2300      	movge	r3, #0
 8009e10:	6033      	strge	r3, [r6, #0]
 8009e12:	9f05      	ldr	r7, [sp, #20]
 8009e14:	4b9a      	ldr	r3, [pc, #616]	@ (800a080 <_dtoa_r+0x2d8>)
 8009e16:	bfbc      	itt	lt
 8009e18:	2201      	movlt	r2, #1
 8009e1a:	6032      	strlt	r2, [r6, #0]
 8009e1c:	43bb      	bics	r3, r7
 8009e1e:	d112      	bne.n	8009e46 <_dtoa_r+0x9e>
 8009e20:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009e22:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009e26:	6013      	str	r3, [r2, #0]
 8009e28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009e2c:	4323      	orrs	r3, r4
 8009e2e:	f000 855a 	beq.w	800a8e6 <_dtoa_r+0xb3e>
 8009e32:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009e34:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800a094 <_dtoa_r+0x2ec>
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	f000 855c 	beq.w	800a8f6 <_dtoa_r+0xb4e>
 8009e3e:	f10a 0303 	add.w	r3, sl, #3
 8009e42:	f000 bd56 	b.w	800a8f2 <_dtoa_r+0xb4a>
 8009e46:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	ec51 0b17 	vmov	r0, r1, d7
 8009e50:	2300      	movs	r3, #0
 8009e52:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009e56:	f7f6 fe37 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e5a:	4680      	mov	r8, r0
 8009e5c:	b158      	cbz	r0, 8009e76 <_dtoa_r+0xce>
 8009e5e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009e60:	2301      	movs	r3, #1
 8009e62:	6013      	str	r3, [r2, #0]
 8009e64:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009e66:	b113      	cbz	r3, 8009e6e <_dtoa_r+0xc6>
 8009e68:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009e6a:	4b86      	ldr	r3, [pc, #536]	@ (800a084 <_dtoa_r+0x2dc>)
 8009e6c:	6013      	str	r3, [r2, #0]
 8009e6e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800a098 <_dtoa_r+0x2f0>
 8009e72:	f000 bd40 	b.w	800a8f6 <_dtoa_r+0xb4e>
 8009e76:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8009e7a:	aa14      	add	r2, sp, #80	@ 0x50
 8009e7c:	a915      	add	r1, sp, #84	@ 0x54
 8009e7e:	4648      	mov	r0, r9
 8009e80:	f001 fa3e 	bl	800b300 <__d2b>
 8009e84:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009e88:	9002      	str	r0, [sp, #8]
 8009e8a:	2e00      	cmp	r6, #0
 8009e8c:	d078      	beq.n	8009f80 <_dtoa_r+0x1d8>
 8009e8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e90:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009e94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009e9c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009ea0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009ea4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	2200      	movs	r2, #0
 8009eac:	4b76      	ldr	r3, [pc, #472]	@ (800a088 <_dtoa_r+0x2e0>)
 8009eae:	f7f6 f9eb 	bl	8000288 <__aeabi_dsub>
 8009eb2:	a36b      	add	r3, pc, #428	@ (adr r3, 800a060 <_dtoa_r+0x2b8>)
 8009eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb8:	f7f6 fb9e 	bl	80005f8 <__aeabi_dmul>
 8009ebc:	a36a      	add	r3, pc, #424	@ (adr r3, 800a068 <_dtoa_r+0x2c0>)
 8009ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec2:	f7f6 f9e3 	bl	800028c <__adddf3>
 8009ec6:	4604      	mov	r4, r0
 8009ec8:	4630      	mov	r0, r6
 8009eca:	460d      	mov	r5, r1
 8009ecc:	f7f6 fb2a 	bl	8000524 <__aeabi_i2d>
 8009ed0:	a367      	add	r3, pc, #412	@ (adr r3, 800a070 <_dtoa_r+0x2c8>)
 8009ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed6:	f7f6 fb8f 	bl	80005f8 <__aeabi_dmul>
 8009eda:	4602      	mov	r2, r0
 8009edc:	460b      	mov	r3, r1
 8009ede:	4620      	mov	r0, r4
 8009ee0:	4629      	mov	r1, r5
 8009ee2:	f7f6 f9d3 	bl	800028c <__adddf3>
 8009ee6:	4604      	mov	r4, r0
 8009ee8:	460d      	mov	r5, r1
 8009eea:	f7f6 fe35 	bl	8000b58 <__aeabi_d2iz>
 8009eee:	2200      	movs	r2, #0
 8009ef0:	4607      	mov	r7, r0
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	4629      	mov	r1, r5
 8009ef8:	f7f6 fdf0 	bl	8000adc <__aeabi_dcmplt>
 8009efc:	b140      	cbz	r0, 8009f10 <_dtoa_r+0x168>
 8009efe:	4638      	mov	r0, r7
 8009f00:	f7f6 fb10 	bl	8000524 <__aeabi_i2d>
 8009f04:	4622      	mov	r2, r4
 8009f06:	462b      	mov	r3, r5
 8009f08:	f7f6 fdde 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f0c:	b900      	cbnz	r0, 8009f10 <_dtoa_r+0x168>
 8009f0e:	3f01      	subs	r7, #1
 8009f10:	2f16      	cmp	r7, #22
 8009f12:	d852      	bhi.n	8009fba <_dtoa_r+0x212>
 8009f14:	4b5d      	ldr	r3, [pc, #372]	@ (800a08c <_dtoa_r+0x2e4>)
 8009f16:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009f22:	f7f6 fddb 	bl	8000adc <__aeabi_dcmplt>
 8009f26:	2800      	cmp	r0, #0
 8009f28:	d049      	beq.n	8009fbe <_dtoa_r+0x216>
 8009f2a:	3f01      	subs	r7, #1
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009f30:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009f32:	1b9b      	subs	r3, r3, r6
 8009f34:	1e5a      	subs	r2, r3, #1
 8009f36:	bf45      	ittet	mi
 8009f38:	f1c3 0301 	rsbmi	r3, r3, #1
 8009f3c:	9300      	strmi	r3, [sp, #0]
 8009f3e:	2300      	movpl	r3, #0
 8009f40:	2300      	movmi	r3, #0
 8009f42:	9206      	str	r2, [sp, #24]
 8009f44:	bf54      	ite	pl
 8009f46:	9300      	strpl	r3, [sp, #0]
 8009f48:	9306      	strmi	r3, [sp, #24]
 8009f4a:	2f00      	cmp	r7, #0
 8009f4c:	db39      	blt.n	8009fc2 <_dtoa_r+0x21a>
 8009f4e:	9b06      	ldr	r3, [sp, #24]
 8009f50:	970d      	str	r7, [sp, #52]	@ 0x34
 8009f52:	443b      	add	r3, r7
 8009f54:	9306      	str	r3, [sp, #24]
 8009f56:	2300      	movs	r3, #0
 8009f58:	9308      	str	r3, [sp, #32]
 8009f5a:	9b07      	ldr	r3, [sp, #28]
 8009f5c:	2b09      	cmp	r3, #9
 8009f5e:	d863      	bhi.n	800a028 <_dtoa_r+0x280>
 8009f60:	2b05      	cmp	r3, #5
 8009f62:	bfc4      	itt	gt
 8009f64:	3b04      	subgt	r3, #4
 8009f66:	9307      	strgt	r3, [sp, #28]
 8009f68:	9b07      	ldr	r3, [sp, #28]
 8009f6a:	f1a3 0302 	sub.w	r3, r3, #2
 8009f6e:	bfcc      	ite	gt
 8009f70:	2400      	movgt	r4, #0
 8009f72:	2401      	movle	r4, #1
 8009f74:	2b03      	cmp	r3, #3
 8009f76:	d863      	bhi.n	800a040 <_dtoa_r+0x298>
 8009f78:	e8df f003 	tbb	[pc, r3]
 8009f7c:	2b375452 	.word	0x2b375452
 8009f80:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009f84:	441e      	add	r6, r3
 8009f86:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009f8a:	2b20      	cmp	r3, #32
 8009f8c:	bfc1      	itttt	gt
 8009f8e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009f92:	409f      	lslgt	r7, r3
 8009f94:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009f98:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009f9c:	bfd6      	itet	le
 8009f9e:	f1c3 0320 	rsble	r3, r3, #32
 8009fa2:	ea47 0003 	orrgt.w	r0, r7, r3
 8009fa6:	fa04 f003 	lslle.w	r0, r4, r3
 8009faa:	f7f6 faab 	bl	8000504 <__aeabi_ui2d>
 8009fae:	2201      	movs	r2, #1
 8009fb0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009fb4:	3e01      	subs	r6, #1
 8009fb6:	9212      	str	r2, [sp, #72]	@ 0x48
 8009fb8:	e776      	b.n	8009ea8 <_dtoa_r+0x100>
 8009fba:	2301      	movs	r3, #1
 8009fbc:	e7b7      	b.n	8009f2e <_dtoa_r+0x186>
 8009fbe:	9010      	str	r0, [sp, #64]	@ 0x40
 8009fc0:	e7b6      	b.n	8009f30 <_dtoa_r+0x188>
 8009fc2:	9b00      	ldr	r3, [sp, #0]
 8009fc4:	1bdb      	subs	r3, r3, r7
 8009fc6:	9300      	str	r3, [sp, #0]
 8009fc8:	427b      	negs	r3, r7
 8009fca:	9308      	str	r3, [sp, #32]
 8009fcc:	2300      	movs	r3, #0
 8009fce:	930d      	str	r3, [sp, #52]	@ 0x34
 8009fd0:	e7c3      	b.n	8009f5a <_dtoa_r+0x1b2>
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fd6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009fd8:	eb07 0b03 	add.w	fp, r7, r3
 8009fdc:	f10b 0301 	add.w	r3, fp, #1
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	9303      	str	r3, [sp, #12]
 8009fe4:	bfb8      	it	lt
 8009fe6:	2301      	movlt	r3, #1
 8009fe8:	e006      	b.n	8009ff8 <_dtoa_r+0x250>
 8009fea:	2301      	movs	r3, #1
 8009fec:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	dd28      	ble.n	800a046 <_dtoa_r+0x29e>
 8009ff4:	469b      	mov	fp, r3
 8009ff6:	9303      	str	r3, [sp, #12]
 8009ff8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009ffc:	2100      	movs	r1, #0
 8009ffe:	2204      	movs	r2, #4
 800a000:	f102 0514 	add.w	r5, r2, #20
 800a004:	429d      	cmp	r5, r3
 800a006:	d926      	bls.n	800a056 <_dtoa_r+0x2ae>
 800a008:	6041      	str	r1, [r0, #4]
 800a00a:	4648      	mov	r0, r9
 800a00c:	f000 fd9c 	bl	800ab48 <_Balloc>
 800a010:	4682      	mov	sl, r0
 800a012:	2800      	cmp	r0, #0
 800a014:	d142      	bne.n	800a09c <_dtoa_r+0x2f4>
 800a016:	4b1e      	ldr	r3, [pc, #120]	@ (800a090 <_dtoa_r+0x2e8>)
 800a018:	4602      	mov	r2, r0
 800a01a:	f240 11af 	movw	r1, #431	@ 0x1af
 800a01e:	e6da      	b.n	8009dd6 <_dtoa_r+0x2e>
 800a020:	2300      	movs	r3, #0
 800a022:	e7e3      	b.n	8009fec <_dtoa_r+0x244>
 800a024:	2300      	movs	r3, #0
 800a026:	e7d5      	b.n	8009fd4 <_dtoa_r+0x22c>
 800a028:	2401      	movs	r4, #1
 800a02a:	2300      	movs	r3, #0
 800a02c:	9307      	str	r3, [sp, #28]
 800a02e:	9409      	str	r4, [sp, #36]	@ 0x24
 800a030:	f04f 3bff 	mov.w	fp, #4294967295
 800a034:	2200      	movs	r2, #0
 800a036:	f8cd b00c 	str.w	fp, [sp, #12]
 800a03a:	2312      	movs	r3, #18
 800a03c:	920c      	str	r2, [sp, #48]	@ 0x30
 800a03e:	e7db      	b.n	8009ff8 <_dtoa_r+0x250>
 800a040:	2301      	movs	r3, #1
 800a042:	9309      	str	r3, [sp, #36]	@ 0x24
 800a044:	e7f4      	b.n	800a030 <_dtoa_r+0x288>
 800a046:	f04f 0b01 	mov.w	fp, #1
 800a04a:	f8cd b00c 	str.w	fp, [sp, #12]
 800a04e:	465b      	mov	r3, fp
 800a050:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800a054:	e7d0      	b.n	8009ff8 <_dtoa_r+0x250>
 800a056:	3101      	adds	r1, #1
 800a058:	0052      	lsls	r2, r2, #1
 800a05a:	e7d1      	b.n	800a000 <_dtoa_r+0x258>
 800a05c:	f3af 8000 	nop.w
 800a060:	636f4361 	.word	0x636f4361
 800a064:	3fd287a7 	.word	0x3fd287a7
 800a068:	8b60c8b3 	.word	0x8b60c8b3
 800a06c:	3fc68a28 	.word	0x3fc68a28
 800a070:	509f79fb 	.word	0x509f79fb
 800a074:	3fd34413 	.word	0x3fd34413
 800a078:	0800dbf0 	.word	0x0800dbf0
 800a07c:	0800dc07 	.word	0x0800dc07
 800a080:	7ff00000 	.word	0x7ff00000
 800a084:	0800dcf3 	.word	0x0800dcf3
 800a088:	3ff80000 	.word	0x3ff80000
 800a08c:	0800ddd0 	.word	0x0800ddd0
 800a090:	0800dc5f 	.word	0x0800dc5f
 800a094:	0800dbec 	.word	0x0800dbec
 800a098:	0800dcf2 	.word	0x0800dcf2
 800a09c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a0a0:	6018      	str	r0, [r3, #0]
 800a0a2:	9b03      	ldr	r3, [sp, #12]
 800a0a4:	2b0e      	cmp	r3, #14
 800a0a6:	f200 80a1 	bhi.w	800a1ec <_dtoa_r+0x444>
 800a0aa:	2c00      	cmp	r4, #0
 800a0ac:	f000 809e 	beq.w	800a1ec <_dtoa_r+0x444>
 800a0b0:	2f00      	cmp	r7, #0
 800a0b2:	dd33      	ble.n	800a11c <_dtoa_r+0x374>
 800a0b4:	4b9c      	ldr	r3, [pc, #624]	@ (800a328 <_dtoa_r+0x580>)
 800a0b6:	f007 020f 	and.w	r2, r7, #15
 800a0ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0be:	ed93 7b00 	vldr	d7, [r3]
 800a0c2:	05f8      	lsls	r0, r7, #23
 800a0c4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800a0c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a0cc:	d516      	bpl.n	800a0fc <_dtoa_r+0x354>
 800a0ce:	4b97      	ldr	r3, [pc, #604]	@ (800a32c <_dtoa_r+0x584>)
 800a0d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a0d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a0d8:	f7f6 fbb8 	bl	800084c <__aeabi_ddiv>
 800a0dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a0e0:	f004 040f 	and.w	r4, r4, #15
 800a0e4:	2603      	movs	r6, #3
 800a0e6:	4d91      	ldr	r5, [pc, #580]	@ (800a32c <_dtoa_r+0x584>)
 800a0e8:	b954      	cbnz	r4, 800a100 <_dtoa_r+0x358>
 800a0ea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a0ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a0f2:	f7f6 fbab 	bl	800084c <__aeabi_ddiv>
 800a0f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a0fa:	e028      	b.n	800a14e <_dtoa_r+0x3a6>
 800a0fc:	2602      	movs	r6, #2
 800a0fe:	e7f2      	b.n	800a0e6 <_dtoa_r+0x33e>
 800a100:	07e1      	lsls	r1, r4, #31
 800a102:	d508      	bpl.n	800a116 <_dtoa_r+0x36e>
 800a104:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a108:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a10c:	f7f6 fa74 	bl	80005f8 <__aeabi_dmul>
 800a110:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a114:	3601      	adds	r6, #1
 800a116:	1064      	asrs	r4, r4, #1
 800a118:	3508      	adds	r5, #8
 800a11a:	e7e5      	b.n	800a0e8 <_dtoa_r+0x340>
 800a11c:	f000 80af 	beq.w	800a27e <_dtoa_r+0x4d6>
 800a120:	427c      	negs	r4, r7
 800a122:	4b81      	ldr	r3, [pc, #516]	@ (800a328 <_dtoa_r+0x580>)
 800a124:	4d81      	ldr	r5, [pc, #516]	@ (800a32c <_dtoa_r+0x584>)
 800a126:	f004 020f 	and.w	r2, r4, #15
 800a12a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a12e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a132:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a136:	f7f6 fa5f 	bl	80005f8 <__aeabi_dmul>
 800a13a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a13e:	1124      	asrs	r4, r4, #4
 800a140:	2300      	movs	r3, #0
 800a142:	2602      	movs	r6, #2
 800a144:	2c00      	cmp	r4, #0
 800a146:	f040 808f 	bne.w	800a268 <_dtoa_r+0x4c0>
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d1d3      	bne.n	800a0f6 <_dtoa_r+0x34e>
 800a14e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a150:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a154:	2b00      	cmp	r3, #0
 800a156:	f000 8094 	beq.w	800a282 <_dtoa_r+0x4da>
 800a15a:	4b75      	ldr	r3, [pc, #468]	@ (800a330 <_dtoa_r+0x588>)
 800a15c:	2200      	movs	r2, #0
 800a15e:	4620      	mov	r0, r4
 800a160:	4629      	mov	r1, r5
 800a162:	f7f6 fcbb 	bl	8000adc <__aeabi_dcmplt>
 800a166:	2800      	cmp	r0, #0
 800a168:	f000 808b 	beq.w	800a282 <_dtoa_r+0x4da>
 800a16c:	9b03      	ldr	r3, [sp, #12]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	f000 8087 	beq.w	800a282 <_dtoa_r+0x4da>
 800a174:	f1bb 0f00 	cmp.w	fp, #0
 800a178:	dd34      	ble.n	800a1e4 <_dtoa_r+0x43c>
 800a17a:	4620      	mov	r0, r4
 800a17c:	4b6d      	ldr	r3, [pc, #436]	@ (800a334 <_dtoa_r+0x58c>)
 800a17e:	2200      	movs	r2, #0
 800a180:	4629      	mov	r1, r5
 800a182:	f7f6 fa39 	bl	80005f8 <__aeabi_dmul>
 800a186:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a18a:	f107 38ff 	add.w	r8, r7, #4294967295
 800a18e:	3601      	adds	r6, #1
 800a190:	465c      	mov	r4, fp
 800a192:	4630      	mov	r0, r6
 800a194:	f7f6 f9c6 	bl	8000524 <__aeabi_i2d>
 800a198:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a19c:	f7f6 fa2c 	bl	80005f8 <__aeabi_dmul>
 800a1a0:	4b65      	ldr	r3, [pc, #404]	@ (800a338 <_dtoa_r+0x590>)
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	f7f6 f872 	bl	800028c <__adddf3>
 800a1a8:	4605      	mov	r5, r0
 800a1aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a1ae:	2c00      	cmp	r4, #0
 800a1b0:	d16a      	bne.n	800a288 <_dtoa_r+0x4e0>
 800a1b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1b6:	4b61      	ldr	r3, [pc, #388]	@ (800a33c <_dtoa_r+0x594>)
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	f7f6 f865 	bl	8000288 <__aeabi_dsub>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a1c6:	462a      	mov	r2, r5
 800a1c8:	4633      	mov	r3, r6
 800a1ca:	f7f6 fca5 	bl	8000b18 <__aeabi_dcmpgt>
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	f040 8298 	bne.w	800a704 <_dtoa_r+0x95c>
 800a1d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1d8:	462a      	mov	r2, r5
 800a1da:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a1de:	f7f6 fc7d 	bl	8000adc <__aeabi_dcmplt>
 800a1e2:	bb38      	cbnz	r0, 800a234 <_dtoa_r+0x48c>
 800a1e4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800a1e8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a1ec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	f2c0 8157 	blt.w	800a4a2 <_dtoa_r+0x6fa>
 800a1f4:	2f0e      	cmp	r7, #14
 800a1f6:	f300 8154 	bgt.w	800a4a2 <_dtoa_r+0x6fa>
 800a1fa:	4b4b      	ldr	r3, [pc, #300]	@ (800a328 <_dtoa_r+0x580>)
 800a1fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a200:	ed93 7b00 	vldr	d7, [r3]
 800a204:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a206:	2b00      	cmp	r3, #0
 800a208:	ed8d 7b00 	vstr	d7, [sp]
 800a20c:	f280 80e5 	bge.w	800a3da <_dtoa_r+0x632>
 800a210:	9b03      	ldr	r3, [sp, #12]
 800a212:	2b00      	cmp	r3, #0
 800a214:	f300 80e1 	bgt.w	800a3da <_dtoa_r+0x632>
 800a218:	d10c      	bne.n	800a234 <_dtoa_r+0x48c>
 800a21a:	4b48      	ldr	r3, [pc, #288]	@ (800a33c <_dtoa_r+0x594>)
 800a21c:	2200      	movs	r2, #0
 800a21e:	ec51 0b17 	vmov	r0, r1, d7
 800a222:	f7f6 f9e9 	bl	80005f8 <__aeabi_dmul>
 800a226:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a22a:	f7f6 fc6b 	bl	8000b04 <__aeabi_dcmpge>
 800a22e:	2800      	cmp	r0, #0
 800a230:	f000 8266 	beq.w	800a700 <_dtoa_r+0x958>
 800a234:	2400      	movs	r4, #0
 800a236:	4625      	mov	r5, r4
 800a238:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a23a:	4656      	mov	r6, sl
 800a23c:	ea6f 0803 	mvn.w	r8, r3
 800a240:	2700      	movs	r7, #0
 800a242:	4621      	mov	r1, r4
 800a244:	4648      	mov	r0, r9
 800a246:	f000 fcbf 	bl	800abc8 <_Bfree>
 800a24a:	2d00      	cmp	r5, #0
 800a24c:	f000 80bd 	beq.w	800a3ca <_dtoa_r+0x622>
 800a250:	b12f      	cbz	r7, 800a25e <_dtoa_r+0x4b6>
 800a252:	42af      	cmp	r7, r5
 800a254:	d003      	beq.n	800a25e <_dtoa_r+0x4b6>
 800a256:	4639      	mov	r1, r7
 800a258:	4648      	mov	r0, r9
 800a25a:	f000 fcb5 	bl	800abc8 <_Bfree>
 800a25e:	4629      	mov	r1, r5
 800a260:	4648      	mov	r0, r9
 800a262:	f000 fcb1 	bl	800abc8 <_Bfree>
 800a266:	e0b0      	b.n	800a3ca <_dtoa_r+0x622>
 800a268:	07e2      	lsls	r2, r4, #31
 800a26a:	d505      	bpl.n	800a278 <_dtoa_r+0x4d0>
 800a26c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a270:	f7f6 f9c2 	bl	80005f8 <__aeabi_dmul>
 800a274:	3601      	adds	r6, #1
 800a276:	2301      	movs	r3, #1
 800a278:	1064      	asrs	r4, r4, #1
 800a27a:	3508      	adds	r5, #8
 800a27c:	e762      	b.n	800a144 <_dtoa_r+0x39c>
 800a27e:	2602      	movs	r6, #2
 800a280:	e765      	b.n	800a14e <_dtoa_r+0x3a6>
 800a282:	9c03      	ldr	r4, [sp, #12]
 800a284:	46b8      	mov	r8, r7
 800a286:	e784      	b.n	800a192 <_dtoa_r+0x3ea>
 800a288:	4b27      	ldr	r3, [pc, #156]	@ (800a328 <_dtoa_r+0x580>)
 800a28a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a28c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a290:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a294:	4454      	add	r4, sl
 800a296:	2900      	cmp	r1, #0
 800a298:	d054      	beq.n	800a344 <_dtoa_r+0x59c>
 800a29a:	4929      	ldr	r1, [pc, #164]	@ (800a340 <_dtoa_r+0x598>)
 800a29c:	2000      	movs	r0, #0
 800a29e:	f7f6 fad5 	bl	800084c <__aeabi_ddiv>
 800a2a2:	4633      	mov	r3, r6
 800a2a4:	462a      	mov	r2, r5
 800a2a6:	f7f5 ffef 	bl	8000288 <__aeabi_dsub>
 800a2aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a2ae:	4656      	mov	r6, sl
 800a2b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2b4:	f7f6 fc50 	bl	8000b58 <__aeabi_d2iz>
 800a2b8:	4605      	mov	r5, r0
 800a2ba:	f7f6 f933 	bl	8000524 <__aeabi_i2d>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2c6:	f7f5 ffdf 	bl	8000288 <__aeabi_dsub>
 800a2ca:	3530      	adds	r5, #48	@ 0x30
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a2d4:	f806 5b01 	strb.w	r5, [r6], #1
 800a2d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a2dc:	f7f6 fbfe 	bl	8000adc <__aeabi_dcmplt>
 800a2e0:	2800      	cmp	r0, #0
 800a2e2:	d172      	bne.n	800a3ca <_dtoa_r+0x622>
 800a2e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2e8:	4911      	ldr	r1, [pc, #68]	@ (800a330 <_dtoa_r+0x588>)
 800a2ea:	2000      	movs	r0, #0
 800a2ec:	f7f5 ffcc 	bl	8000288 <__aeabi_dsub>
 800a2f0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a2f4:	f7f6 fbf2 	bl	8000adc <__aeabi_dcmplt>
 800a2f8:	2800      	cmp	r0, #0
 800a2fa:	f040 80b4 	bne.w	800a466 <_dtoa_r+0x6be>
 800a2fe:	42a6      	cmp	r6, r4
 800a300:	f43f af70 	beq.w	800a1e4 <_dtoa_r+0x43c>
 800a304:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a308:	4b0a      	ldr	r3, [pc, #40]	@ (800a334 <_dtoa_r+0x58c>)
 800a30a:	2200      	movs	r2, #0
 800a30c:	f7f6 f974 	bl	80005f8 <__aeabi_dmul>
 800a310:	4b08      	ldr	r3, [pc, #32]	@ (800a334 <_dtoa_r+0x58c>)
 800a312:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a316:	2200      	movs	r2, #0
 800a318:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a31c:	f7f6 f96c 	bl	80005f8 <__aeabi_dmul>
 800a320:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a324:	e7c4      	b.n	800a2b0 <_dtoa_r+0x508>
 800a326:	bf00      	nop
 800a328:	0800ddd0 	.word	0x0800ddd0
 800a32c:	0800dda8 	.word	0x0800dda8
 800a330:	3ff00000 	.word	0x3ff00000
 800a334:	40240000 	.word	0x40240000
 800a338:	401c0000 	.word	0x401c0000
 800a33c:	40140000 	.word	0x40140000
 800a340:	3fe00000 	.word	0x3fe00000
 800a344:	4631      	mov	r1, r6
 800a346:	4628      	mov	r0, r5
 800a348:	f7f6 f956 	bl	80005f8 <__aeabi_dmul>
 800a34c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a350:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a352:	4656      	mov	r6, sl
 800a354:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a358:	f7f6 fbfe 	bl	8000b58 <__aeabi_d2iz>
 800a35c:	4605      	mov	r5, r0
 800a35e:	f7f6 f8e1 	bl	8000524 <__aeabi_i2d>
 800a362:	4602      	mov	r2, r0
 800a364:	460b      	mov	r3, r1
 800a366:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a36a:	f7f5 ff8d 	bl	8000288 <__aeabi_dsub>
 800a36e:	3530      	adds	r5, #48	@ 0x30
 800a370:	f806 5b01 	strb.w	r5, [r6], #1
 800a374:	4602      	mov	r2, r0
 800a376:	460b      	mov	r3, r1
 800a378:	42a6      	cmp	r6, r4
 800a37a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a37e:	f04f 0200 	mov.w	r2, #0
 800a382:	d124      	bne.n	800a3ce <_dtoa_r+0x626>
 800a384:	4baf      	ldr	r3, [pc, #700]	@ (800a644 <_dtoa_r+0x89c>)
 800a386:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a38a:	f7f5 ff7f 	bl	800028c <__adddf3>
 800a38e:	4602      	mov	r2, r0
 800a390:	460b      	mov	r3, r1
 800a392:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a396:	f7f6 fbbf 	bl	8000b18 <__aeabi_dcmpgt>
 800a39a:	2800      	cmp	r0, #0
 800a39c:	d163      	bne.n	800a466 <_dtoa_r+0x6be>
 800a39e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a3a2:	49a8      	ldr	r1, [pc, #672]	@ (800a644 <_dtoa_r+0x89c>)
 800a3a4:	2000      	movs	r0, #0
 800a3a6:	f7f5 ff6f 	bl	8000288 <__aeabi_dsub>
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	460b      	mov	r3, r1
 800a3ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3b2:	f7f6 fb93 	bl	8000adc <__aeabi_dcmplt>
 800a3b6:	2800      	cmp	r0, #0
 800a3b8:	f43f af14 	beq.w	800a1e4 <_dtoa_r+0x43c>
 800a3bc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a3be:	1e73      	subs	r3, r6, #1
 800a3c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a3c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a3c6:	2b30      	cmp	r3, #48	@ 0x30
 800a3c8:	d0f8      	beq.n	800a3bc <_dtoa_r+0x614>
 800a3ca:	4647      	mov	r7, r8
 800a3cc:	e03b      	b.n	800a446 <_dtoa_r+0x69e>
 800a3ce:	4b9e      	ldr	r3, [pc, #632]	@ (800a648 <_dtoa_r+0x8a0>)
 800a3d0:	f7f6 f912 	bl	80005f8 <__aeabi_dmul>
 800a3d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a3d8:	e7bc      	b.n	800a354 <_dtoa_r+0x5ac>
 800a3da:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a3de:	4656      	mov	r6, sl
 800a3e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	4629      	mov	r1, r5
 800a3e8:	f7f6 fa30 	bl	800084c <__aeabi_ddiv>
 800a3ec:	f7f6 fbb4 	bl	8000b58 <__aeabi_d2iz>
 800a3f0:	4680      	mov	r8, r0
 800a3f2:	f7f6 f897 	bl	8000524 <__aeabi_i2d>
 800a3f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a3fa:	f7f6 f8fd 	bl	80005f8 <__aeabi_dmul>
 800a3fe:	4602      	mov	r2, r0
 800a400:	460b      	mov	r3, r1
 800a402:	4620      	mov	r0, r4
 800a404:	4629      	mov	r1, r5
 800a406:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a40a:	f7f5 ff3d 	bl	8000288 <__aeabi_dsub>
 800a40e:	f806 4b01 	strb.w	r4, [r6], #1
 800a412:	9d03      	ldr	r5, [sp, #12]
 800a414:	eba6 040a 	sub.w	r4, r6, sl
 800a418:	42a5      	cmp	r5, r4
 800a41a:	4602      	mov	r2, r0
 800a41c:	460b      	mov	r3, r1
 800a41e:	d133      	bne.n	800a488 <_dtoa_r+0x6e0>
 800a420:	f7f5 ff34 	bl	800028c <__adddf3>
 800a424:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a428:	4604      	mov	r4, r0
 800a42a:	460d      	mov	r5, r1
 800a42c:	f7f6 fb74 	bl	8000b18 <__aeabi_dcmpgt>
 800a430:	b9c0      	cbnz	r0, 800a464 <_dtoa_r+0x6bc>
 800a432:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a436:	4620      	mov	r0, r4
 800a438:	4629      	mov	r1, r5
 800a43a:	f7f6 fb45 	bl	8000ac8 <__aeabi_dcmpeq>
 800a43e:	b110      	cbz	r0, 800a446 <_dtoa_r+0x69e>
 800a440:	f018 0f01 	tst.w	r8, #1
 800a444:	d10e      	bne.n	800a464 <_dtoa_r+0x6bc>
 800a446:	9902      	ldr	r1, [sp, #8]
 800a448:	4648      	mov	r0, r9
 800a44a:	f000 fbbd 	bl	800abc8 <_Bfree>
 800a44e:	2300      	movs	r3, #0
 800a450:	7033      	strb	r3, [r6, #0]
 800a452:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a454:	3701      	adds	r7, #1
 800a456:	601f      	str	r7, [r3, #0]
 800a458:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	f000 824b 	beq.w	800a8f6 <_dtoa_r+0xb4e>
 800a460:	601e      	str	r6, [r3, #0]
 800a462:	e248      	b.n	800a8f6 <_dtoa_r+0xb4e>
 800a464:	46b8      	mov	r8, r7
 800a466:	4633      	mov	r3, r6
 800a468:	461e      	mov	r6, r3
 800a46a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a46e:	2a39      	cmp	r2, #57	@ 0x39
 800a470:	d106      	bne.n	800a480 <_dtoa_r+0x6d8>
 800a472:	459a      	cmp	sl, r3
 800a474:	d1f8      	bne.n	800a468 <_dtoa_r+0x6c0>
 800a476:	2230      	movs	r2, #48	@ 0x30
 800a478:	f108 0801 	add.w	r8, r8, #1
 800a47c:	f88a 2000 	strb.w	r2, [sl]
 800a480:	781a      	ldrb	r2, [r3, #0]
 800a482:	3201      	adds	r2, #1
 800a484:	701a      	strb	r2, [r3, #0]
 800a486:	e7a0      	b.n	800a3ca <_dtoa_r+0x622>
 800a488:	4b6f      	ldr	r3, [pc, #444]	@ (800a648 <_dtoa_r+0x8a0>)
 800a48a:	2200      	movs	r2, #0
 800a48c:	f7f6 f8b4 	bl	80005f8 <__aeabi_dmul>
 800a490:	2200      	movs	r2, #0
 800a492:	2300      	movs	r3, #0
 800a494:	4604      	mov	r4, r0
 800a496:	460d      	mov	r5, r1
 800a498:	f7f6 fb16 	bl	8000ac8 <__aeabi_dcmpeq>
 800a49c:	2800      	cmp	r0, #0
 800a49e:	d09f      	beq.n	800a3e0 <_dtoa_r+0x638>
 800a4a0:	e7d1      	b.n	800a446 <_dtoa_r+0x69e>
 800a4a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a4a4:	2a00      	cmp	r2, #0
 800a4a6:	f000 80ea 	beq.w	800a67e <_dtoa_r+0x8d6>
 800a4aa:	9a07      	ldr	r2, [sp, #28]
 800a4ac:	2a01      	cmp	r2, #1
 800a4ae:	f300 80cd 	bgt.w	800a64c <_dtoa_r+0x8a4>
 800a4b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a4b4:	2a00      	cmp	r2, #0
 800a4b6:	f000 80c1 	beq.w	800a63c <_dtoa_r+0x894>
 800a4ba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a4be:	9c08      	ldr	r4, [sp, #32]
 800a4c0:	9e00      	ldr	r6, [sp, #0]
 800a4c2:	9a00      	ldr	r2, [sp, #0]
 800a4c4:	441a      	add	r2, r3
 800a4c6:	9200      	str	r2, [sp, #0]
 800a4c8:	9a06      	ldr	r2, [sp, #24]
 800a4ca:	2101      	movs	r1, #1
 800a4cc:	441a      	add	r2, r3
 800a4ce:	4648      	mov	r0, r9
 800a4d0:	9206      	str	r2, [sp, #24]
 800a4d2:	f000 fc77 	bl	800adc4 <__i2b>
 800a4d6:	4605      	mov	r5, r0
 800a4d8:	b166      	cbz	r6, 800a4f4 <_dtoa_r+0x74c>
 800a4da:	9b06      	ldr	r3, [sp, #24]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	dd09      	ble.n	800a4f4 <_dtoa_r+0x74c>
 800a4e0:	42b3      	cmp	r3, r6
 800a4e2:	9a00      	ldr	r2, [sp, #0]
 800a4e4:	bfa8      	it	ge
 800a4e6:	4633      	movge	r3, r6
 800a4e8:	1ad2      	subs	r2, r2, r3
 800a4ea:	9200      	str	r2, [sp, #0]
 800a4ec:	9a06      	ldr	r2, [sp, #24]
 800a4ee:	1af6      	subs	r6, r6, r3
 800a4f0:	1ad3      	subs	r3, r2, r3
 800a4f2:	9306      	str	r3, [sp, #24]
 800a4f4:	9b08      	ldr	r3, [sp, #32]
 800a4f6:	b30b      	cbz	r3, 800a53c <_dtoa_r+0x794>
 800a4f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	f000 80c6 	beq.w	800a68c <_dtoa_r+0x8e4>
 800a500:	2c00      	cmp	r4, #0
 800a502:	f000 80c0 	beq.w	800a686 <_dtoa_r+0x8de>
 800a506:	4629      	mov	r1, r5
 800a508:	4622      	mov	r2, r4
 800a50a:	4648      	mov	r0, r9
 800a50c:	f000 fd12 	bl	800af34 <__pow5mult>
 800a510:	9a02      	ldr	r2, [sp, #8]
 800a512:	4601      	mov	r1, r0
 800a514:	4605      	mov	r5, r0
 800a516:	4648      	mov	r0, r9
 800a518:	f000 fc6a 	bl	800adf0 <__multiply>
 800a51c:	9902      	ldr	r1, [sp, #8]
 800a51e:	4680      	mov	r8, r0
 800a520:	4648      	mov	r0, r9
 800a522:	f000 fb51 	bl	800abc8 <_Bfree>
 800a526:	9b08      	ldr	r3, [sp, #32]
 800a528:	1b1b      	subs	r3, r3, r4
 800a52a:	9308      	str	r3, [sp, #32]
 800a52c:	f000 80b1 	beq.w	800a692 <_dtoa_r+0x8ea>
 800a530:	9a08      	ldr	r2, [sp, #32]
 800a532:	4641      	mov	r1, r8
 800a534:	4648      	mov	r0, r9
 800a536:	f000 fcfd 	bl	800af34 <__pow5mult>
 800a53a:	9002      	str	r0, [sp, #8]
 800a53c:	2101      	movs	r1, #1
 800a53e:	4648      	mov	r0, r9
 800a540:	f000 fc40 	bl	800adc4 <__i2b>
 800a544:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a546:	4604      	mov	r4, r0
 800a548:	2b00      	cmp	r3, #0
 800a54a:	f000 81d8 	beq.w	800a8fe <_dtoa_r+0xb56>
 800a54e:	461a      	mov	r2, r3
 800a550:	4601      	mov	r1, r0
 800a552:	4648      	mov	r0, r9
 800a554:	f000 fcee 	bl	800af34 <__pow5mult>
 800a558:	9b07      	ldr	r3, [sp, #28]
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	4604      	mov	r4, r0
 800a55e:	f300 809f 	bgt.w	800a6a0 <_dtoa_r+0x8f8>
 800a562:	9b04      	ldr	r3, [sp, #16]
 800a564:	2b00      	cmp	r3, #0
 800a566:	f040 8097 	bne.w	800a698 <_dtoa_r+0x8f0>
 800a56a:	9b05      	ldr	r3, [sp, #20]
 800a56c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a570:	2b00      	cmp	r3, #0
 800a572:	f040 8093 	bne.w	800a69c <_dtoa_r+0x8f4>
 800a576:	9b05      	ldr	r3, [sp, #20]
 800a578:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a57c:	0d1b      	lsrs	r3, r3, #20
 800a57e:	051b      	lsls	r3, r3, #20
 800a580:	b133      	cbz	r3, 800a590 <_dtoa_r+0x7e8>
 800a582:	9b00      	ldr	r3, [sp, #0]
 800a584:	3301      	adds	r3, #1
 800a586:	9300      	str	r3, [sp, #0]
 800a588:	9b06      	ldr	r3, [sp, #24]
 800a58a:	3301      	adds	r3, #1
 800a58c:	9306      	str	r3, [sp, #24]
 800a58e:	2301      	movs	r3, #1
 800a590:	9308      	str	r3, [sp, #32]
 800a592:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a594:	2b00      	cmp	r3, #0
 800a596:	f000 81b8 	beq.w	800a90a <_dtoa_r+0xb62>
 800a59a:	6923      	ldr	r3, [r4, #16]
 800a59c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a5a0:	6918      	ldr	r0, [r3, #16]
 800a5a2:	f000 fbc3 	bl	800ad2c <__hi0bits>
 800a5a6:	f1c0 0020 	rsb	r0, r0, #32
 800a5aa:	9b06      	ldr	r3, [sp, #24]
 800a5ac:	4418      	add	r0, r3
 800a5ae:	f010 001f 	ands.w	r0, r0, #31
 800a5b2:	f000 8082 	beq.w	800a6ba <_dtoa_r+0x912>
 800a5b6:	f1c0 0320 	rsb	r3, r0, #32
 800a5ba:	2b04      	cmp	r3, #4
 800a5bc:	dd73      	ble.n	800a6a6 <_dtoa_r+0x8fe>
 800a5be:	9b00      	ldr	r3, [sp, #0]
 800a5c0:	f1c0 001c 	rsb	r0, r0, #28
 800a5c4:	4403      	add	r3, r0
 800a5c6:	9300      	str	r3, [sp, #0]
 800a5c8:	9b06      	ldr	r3, [sp, #24]
 800a5ca:	4403      	add	r3, r0
 800a5cc:	4406      	add	r6, r0
 800a5ce:	9306      	str	r3, [sp, #24]
 800a5d0:	9b00      	ldr	r3, [sp, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	dd05      	ble.n	800a5e2 <_dtoa_r+0x83a>
 800a5d6:	9902      	ldr	r1, [sp, #8]
 800a5d8:	461a      	mov	r2, r3
 800a5da:	4648      	mov	r0, r9
 800a5dc:	f000 fd04 	bl	800afe8 <__lshift>
 800a5e0:	9002      	str	r0, [sp, #8]
 800a5e2:	9b06      	ldr	r3, [sp, #24]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	dd05      	ble.n	800a5f4 <_dtoa_r+0x84c>
 800a5e8:	4621      	mov	r1, r4
 800a5ea:	461a      	mov	r2, r3
 800a5ec:	4648      	mov	r0, r9
 800a5ee:	f000 fcfb 	bl	800afe8 <__lshift>
 800a5f2:	4604      	mov	r4, r0
 800a5f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d061      	beq.n	800a6be <_dtoa_r+0x916>
 800a5fa:	9802      	ldr	r0, [sp, #8]
 800a5fc:	4621      	mov	r1, r4
 800a5fe:	f000 fd5f 	bl	800b0c0 <__mcmp>
 800a602:	2800      	cmp	r0, #0
 800a604:	da5b      	bge.n	800a6be <_dtoa_r+0x916>
 800a606:	2300      	movs	r3, #0
 800a608:	9902      	ldr	r1, [sp, #8]
 800a60a:	220a      	movs	r2, #10
 800a60c:	4648      	mov	r0, r9
 800a60e:	f000 fafd 	bl	800ac0c <__multadd>
 800a612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a614:	9002      	str	r0, [sp, #8]
 800a616:	f107 38ff 	add.w	r8, r7, #4294967295
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	f000 8177 	beq.w	800a90e <_dtoa_r+0xb66>
 800a620:	4629      	mov	r1, r5
 800a622:	2300      	movs	r3, #0
 800a624:	220a      	movs	r2, #10
 800a626:	4648      	mov	r0, r9
 800a628:	f000 faf0 	bl	800ac0c <__multadd>
 800a62c:	f1bb 0f00 	cmp.w	fp, #0
 800a630:	4605      	mov	r5, r0
 800a632:	dc6f      	bgt.n	800a714 <_dtoa_r+0x96c>
 800a634:	9b07      	ldr	r3, [sp, #28]
 800a636:	2b02      	cmp	r3, #2
 800a638:	dc49      	bgt.n	800a6ce <_dtoa_r+0x926>
 800a63a:	e06b      	b.n	800a714 <_dtoa_r+0x96c>
 800a63c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a63e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a642:	e73c      	b.n	800a4be <_dtoa_r+0x716>
 800a644:	3fe00000 	.word	0x3fe00000
 800a648:	40240000 	.word	0x40240000
 800a64c:	9b03      	ldr	r3, [sp, #12]
 800a64e:	1e5c      	subs	r4, r3, #1
 800a650:	9b08      	ldr	r3, [sp, #32]
 800a652:	42a3      	cmp	r3, r4
 800a654:	db09      	blt.n	800a66a <_dtoa_r+0x8c2>
 800a656:	1b1c      	subs	r4, r3, r4
 800a658:	9b03      	ldr	r3, [sp, #12]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	f6bf af30 	bge.w	800a4c0 <_dtoa_r+0x718>
 800a660:	9b00      	ldr	r3, [sp, #0]
 800a662:	9a03      	ldr	r2, [sp, #12]
 800a664:	1a9e      	subs	r6, r3, r2
 800a666:	2300      	movs	r3, #0
 800a668:	e72b      	b.n	800a4c2 <_dtoa_r+0x71a>
 800a66a:	9b08      	ldr	r3, [sp, #32]
 800a66c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a66e:	9408      	str	r4, [sp, #32]
 800a670:	1ae3      	subs	r3, r4, r3
 800a672:	441a      	add	r2, r3
 800a674:	9e00      	ldr	r6, [sp, #0]
 800a676:	9b03      	ldr	r3, [sp, #12]
 800a678:	920d      	str	r2, [sp, #52]	@ 0x34
 800a67a:	2400      	movs	r4, #0
 800a67c:	e721      	b.n	800a4c2 <_dtoa_r+0x71a>
 800a67e:	9c08      	ldr	r4, [sp, #32]
 800a680:	9e00      	ldr	r6, [sp, #0]
 800a682:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800a684:	e728      	b.n	800a4d8 <_dtoa_r+0x730>
 800a686:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a68a:	e751      	b.n	800a530 <_dtoa_r+0x788>
 800a68c:	9a08      	ldr	r2, [sp, #32]
 800a68e:	9902      	ldr	r1, [sp, #8]
 800a690:	e750      	b.n	800a534 <_dtoa_r+0x78c>
 800a692:	f8cd 8008 	str.w	r8, [sp, #8]
 800a696:	e751      	b.n	800a53c <_dtoa_r+0x794>
 800a698:	2300      	movs	r3, #0
 800a69a:	e779      	b.n	800a590 <_dtoa_r+0x7e8>
 800a69c:	9b04      	ldr	r3, [sp, #16]
 800a69e:	e777      	b.n	800a590 <_dtoa_r+0x7e8>
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	9308      	str	r3, [sp, #32]
 800a6a4:	e779      	b.n	800a59a <_dtoa_r+0x7f2>
 800a6a6:	d093      	beq.n	800a5d0 <_dtoa_r+0x828>
 800a6a8:	9a00      	ldr	r2, [sp, #0]
 800a6aa:	331c      	adds	r3, #28
 800a6ac:	441a      	add	r2, r3
 800a6ae:	9200      	str	r2, [sp, #0]
 800a6b0:	9a06      	ldr	r2, [sp, #24]
 800a6b2:	441a      	add	r2, r3
 800a6b4:	441e      	add	r6, r3
 800a6b6:	9206      	str	r2, [sp, #24]
 800a6b8:	e78a      	b.n	800a5d0 <_dtoa_r+0x828>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	e7f4      	b.n	800a6a8 <_dtoa_r+0x900>
 800a6be:	9b03      	ldr	r3, [sp, #12]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	46b8      	mov	r8, r7
 800a6c4:	dc20      	bgt.n	800a708 <_dtoa_r+0x960>
 800a6c6:	469b      	mov	fp, r3
 800a6c8:	9b07      	ldr	r3, [sp, #28]
 800a6ca:	2b02      	cmp	r3, #2
 800a6cc:	dd1e      	ble.n	800a70c <_dtoa_r+0x964>
 800a6ce:	f1bb 0f00 	cmp.w	fp, #0
 800a6d2:	f47f adb1 	bne.w	800a238 <_dtoa_r+0x490>
 800a6d6:	4621      	mov	r1, r4
 800a6d8:	465b      	mov	r3, fp
 800a6da:	2205      	movs	r2, #5
 800a6dc:	4648      	mov	r0, r9
 800a6de:	f000 fa95 	bl	800ac0c <__multadd>
 800a6e2:	4601      	mov	r1, r0
 800a6e4:	4604      	mov	r4, r0
 800a6e6:	9802      	ldr	r0, [sp, #8]
 800a6e8:	f000 fcea 	bl	800b0c0 <__mcmp>
 800a6ec:	2800      	cmp	r0, #0
 800a6ee:	f77f ada3 	ble.w	800a238 <_dtoa_r+0x490>
 800a6f2:	4656      	mov	r6, sl
 800a6f4:	2331      	movs	r3, #49	@ 0x31
 800a6f6:	f806 3b01 	strb.w	r3, [r6], #1
 800a6fa:	f108 0801 	add.w	r8, r8, #1
 800a6fe:	e59f      	b.n	800a240 <_dtoa_r+0x498>
 800a700:	9c03      	ldr	r4, [sp, #12]
 800a702:	46b8      	mov	r8, r7
 800a704:	4625      	mov	r5, r4
 800a706:	e7f4      	b.n	800a6f2 <_dtoa_r+0x94a>
 800a708:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a70c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a70e:	2b00      	cmp	r3, #0
 800a710:	f000 8101 	beq.w	800a916 <_dtoa_r+0xb6e>
 800a714:	2e00      	cmp	r6, #0
 800a716:	dd05      	ble.n	800a724 <_dtoa_r+0x97c>
 800a718:	4629      	mov	r1, r5
 800a71a:	4632      	mov	r2, r6
 800a71c:	4648      	mov	r0, r9
 800a71e:	f000 fc63 	bl	800afe8 <__lshift>
 800a722:	4605      	mov	r5, r0
 800a724:	9b08      	ldr	r3, [sp, #32]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d05c      	beq.n	800a7e4 <_dtoa_r+0xa3c>
 800a72a:	6869      	ldr	r1, [r5, #4]
 800a72c:	4648      	mov	r0, r9
 800a72e:	f000 fa0b 	bl	800ab48 <_Balloc>
 800a732:	4606      	mov	r6, r0
 800a734:	b928      	cbnz	r0, 800a742 <_dtoa_r+0x99a>
 800a736:	4b82      	ldr	r3, [pc, #520]	@ (800a940 <_dtoa_r+0xb98>)
 800a738:	4602      	mov	r2, r0
 800a73a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a73e:	f7ff bb4a 	b.w	8009dd6 <_dtoa_r+0x2e>
 800a742:	692a      	ldr	r2, [r5, #16]
 800a744:	3202      	adds	r2, #2
 800a746:	0092      	lsls	r2, r2, #2
 800a748:	f105 010c 	add.w	r1, r5, #12
 800a74c:	300c      	adds	r0, #12
 800a74e:	f002 fcc1 	bl	800d0d4 <memcpy>
 800a752:	2201      	movs	r2, #1
 800a754:	4631      	mov	r1, r6
 800a756:	4648      	mov	r0, r9
 800a758:	f000 fc46 	bl	800afe8 <__lshift>
 800a75c:	f10a 0301 	add.w	r3, sl, #1
 800a760:	9300      	str	r3, [sp, #0]
 800a762:	eb0a 030b 	add.w	r3, sl, fp
 800a766:	9308      	str	r3, [sp, #32]
 800a768:	9b04      	ldr	r3, [sp, #16]
 800a76a:	f003 0301 	and.w	r3, r3, #1
 800a76e:	462f      	mov	r7, r5
 800a770:	9306      	str	r3, [sp, #24]
 800a772:	4605      	mov	r5, r0
 800a774:	9b00      	ldr	r3, [sp, #0]
 800a776:	9802      	ldr	r0, [sp, #8]
 800a778:	4621      	mov	r1, r4
 800a77a:	f103 3bff 	add.w	fp, r3, #4294967295
 800a77e:	f7ff fa8b 	bl	8009c98 <quorem>
 800a782:	4603      	mov	r3, r0
 800a784:	3330      	adds	r3, #48	@ 0x30
 800a786:	9003      	str	r0, [sp, #12]
 800a788:	4639      	mov	r1, r7
 800a78a:	9802      	ldr	r0, [sp, #8]
 800a78c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a78e:	f000 fc97 	bl	800b0c0 <__mcmp>
 800a792:	462a      	mov	r2, r5
 800a794:	9004      	str	r0, [sp, #16]
 800a796:	4621      	mov	r1, r4
 800a798:	4648      	mov	r0, r9
 800a79a:	f000 fcad 	bl	800b0f8 <__mdiff>
 800a79e:	68c2      	ldr	r2, [r0, #12]
 800a7a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7a2:	4606      	mov	r6, r0
 800a7a4:	bb02      	cbnz	r2, 800a7e8 <_dtoa_r+0xa40>
 800a7a6:	4601      	mov	r1, r0
 800a7a8:	9802      	ldr	r0, [sp, #8]
 800a7aa:	f000 fc89 	bl	800b0c0 <__mcmp>
 800a7ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	4631      	mov	r1, r6
 800a7b4:	4648      	mov	r0, r9
 800a7b6:	920c      	str	r2, [sp, #48]	@ 0x30
 800a7b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7ba:	f000 fa05 	bl	800abc8 <_Bfree>
 800a7be:	9b07      	ldr	r3, [sp, #28]
 800a7c0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a7c2:	9e00      	ldr	r6, [sp, #0]
 800a7c4:	ea42 0103 	orr.w	r1, r2, r3
 800a7c8:	9b06      	ldr	r3, [sp, #24]
 800a7ca:	4319      	orrs	r1, r3
 800a7cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7ce:	d10d      	bne.n	800a7ec <_dtoa_r+0xa44>
 800a7d0:	2b39      	cmp	r3, #57	@ 0x39
 800a7d2:	d027      	beq.n	800a824 <_dtoa_r+0xa7c>
 800a7d4:	9a04      	ldr	r2, [sp, #16]
 800a7d6:	2a00      	cmp	r2, #0
 800a7d8:	dd01      	ble.n	800a7de <_dtoa_r+0xa36>
 800a7da:	9b03      	ldr	r3, [sp, #12]
 800a7dc:	3331      	adds	r3, #49	@ 0x31
 800a7de:	f88b 3000 	strb.w	r3, [fp]
 800a7e2:	e52e      	b.n	800a242 <_dtoa_r+0x49a>
 800a7e4:	4628      	mov	r0, r5
 800a7e6:	e7b9      	b.n	800a75c <_dtoa_r+0x9b4>
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	e7e2      	b.n	800a7b2 <_dtoa_r+0xa0a>
 800a7ec:	9904      	ldr	r1, [sp, #16]
 800a7ee:	2900      	cmp	r1, #0
 800a7f0:	db04      	blt.n	800a7fc <_dtoa_r+0xa54>
 800a7f2:	9807      	ldr	r0, [sp, #28]
 800a7f4:	4301      	orrs	r1, r0
 800a7f6:	9806      	ldr	r0, [sp, #24]
 800a7f8:	4301      	orrs	r1, r0
 800a7fa:	d120      	bne.n	800a83e <_dtoa_r+0xa96>
 800a7fc:	2a00      	cmp	r2, #0
 800a7fe:	ddee      	ble.n	800a7de <_dtoa_r+0xa36>
 800a800:	9902      	ldr	r1, [sp, #8]
 800a802:	9300      	str	r3, [sp, #0]
 800a804:	2201      	movs	r2, #1
 800a806:	4648      	mov	r0, r9
 800a808:	f000 fbee 	bl	800afe8 <__lshift>
 800a80c:	4621      	mov	r1, r4
 800a80e:	9002      	str	r0, [sp, #8]
 800a810:	f000 fc56 	bl	800b0c0 <__mcmp>
 800a814:	2800      	cmp	r0, #0
 800a816:	9b00      	ldr	r3, [sp, #0]
 800a818:	dc02      	bgt.n	800a820 <_dtoa_r+0xa78>
 800a81a:	d1e0      	bne.n	800a7de <_dtoa_r+0xa36>
 800a81c:	07da      	lsls	r2, r3, #31
 800a81e:	d5de      	bpl.n	800a7de <_dtoa_r+0xa36>
 800a820:	2b39      	cmp	r3, #57	@ 0x39
 800a822:	d1da      	bne.n	800a7da <_dtoa_r+0xa32>
 800a824:	2339      	movs	r3, #57	@ 0x39
 800a826:	f88b 3000 	strb.w	r3, [fp]
 800a82a:	4633      	mov	r3, r6
 800a82c:	461e      	mov	r6, r3
 800a82e:	3b01      	subs	r3, #1
 800a830:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a834:	2a39      	cmp	r2, #57	@ 0x39
 800a836:	d04e      	beq.n	800a8d6 <_dtoa_r+0xb2e>
 800a838:	3201      	adds	r2, #1
 800a83a:	701a      	strb	r2, [r3, #0]
 800a83c:	e501      	b.n	800a242 <_dtoa_r+0x49a>
 800a83e:	2a00      	cmp	r2, #0
 800a840:	dd03      	ble.n	800a84a <_dtoa_r+0xaa2>
 800a842:	2b39      	cmp	r3, #57	@ 0x39
 800a844:	d0ee      	beq.n	800a824 <_dtoa_r+0xa7c>
 800a846:	3301      	adds	r3, #1
 800a848:	e7c9      	b.n	800a7de <_dtoa_r+0xa36>
 800a84a:	9a00      	ldr	r2, [sp, #0]
 800a84c:	9908      	ldr	r1, [sp, #32]
 800a84e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a852:	428a      	cmp	r2, r1
 800a854:	d028      	beq.n	800a8a8 <_dtoa_r+0xb00>
 800a856:	9902      	ldr	r1, [sp, #8]
 800a858:	2300      	movs	r3, #0
 800a85a:	220a      	movs	r2, #10
 800a85c:	4648      	mov	r0, r9
 800a85e:	f000 f9d5 	bl	800ac0c <__multadd>
 800a862:	42af      	cmp	r7, r5
 800a864:	9002      	str	r0, [sp, #8]
 800a866:	f04f 0300 	mov.w	r3, #0
 800a86a:	f04f 020a 	mov.w	r2, #10
 800a86e:	4639      	mov	r1, r7
 800a870:	4648      	mov	r0, r9
 800a872:	d107      	bne.n	800a884 <_dtoa_r+0xadc>
 800a874:	f000 f9ca 	bl	800ac0c <__multadd>
 800a878:	4607      	mov	r7, r0
 800a87a:	4605      	mov	r5, r0
 800a87c:	9b00      	ldr	r3, [sp, #0]
 800a87e:	3301      	adds	r3, #1
 800a880:	9300      	str	r3, [sp, #0]
 800a882:	e777      	b.n	800a774 <_dtoa_r+0x9cc>
 800a884:	f000 f9c2 	bl	800ac0c <__multadd>
 800a888:	4629      	mov	r1, r5
 800a88a:	4607      	mov	r7, r0
 800a88c:	2300      	movs	r3, #0
 800a88e:	220a      	movs	r2, #10
 800a890:	4648      	mov	r0, r9
 800a892:	f000 f9bb 	bl	800ac0c <__multadd>
 800a896:	4605      	mov	r5, r0
 800a898:	e7f0      	b.n	800a87c <_dtoa_r+0xad4>
 800a89a:	f1bb 0f00 	cmp.w	fp, #0
 800a89e:	bfcc      	ite	gt
 800a8a0:	465e      	movgt	r6, fp
 800a8a2:	2601      	movle	r6, #1
 800a8a4:	4456      	add	r6, sl
 800a8a6:	2700      	movs	r7, #0
 800a8a8:	9902      	ldr	r1, [sp, #8]
 800a8aa:	9300      	str	r3, [sp, #0]
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	4648      	mov	r0, r9
 800a8b0:	f000 fb9a 	bl	800afe8 <__lshift>
 800a8b4:	4621      	mov	r1, r4
 800a8b6:	9002      	str	r0, [sp, #8]
 800a8b8:	f000 fc02 	bl	800b0c0 <__mcmp>
 800a8bc:	2800      	cmp	r0, #0
 800a8be:	dcb4      	bgt.n	800a82a <_dtoa_r+0xa82>
 800a8c0:	d102      	bne.n	800a8c8 <_dtoa_r+0xb20>
 800a8c2:	9b00      	ldr	r3, [sp, #0]
 800a8c4:	07db      	lsls	r3, r3, #31
 800a8c6:	d4b0      	bmi.n	800a82a <_dtoa_r+0xa82>
 800a8c8:	4633      	mov	r3, r6
 800a8ca:	461e      	mov	r6, r3
 800a8cc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a8d0:	2a30      	cmp	r2, #48	@ 0x30
 800a8d2:	d0fa      	beq.n	800a8ca <_dtoa_r+0xb22>
 800a8d4:	e4b5      	b.n	800a242 <_dtoa_r+0x49a>
 800a8d6:	459a      	cmp	sl, r3
 800a8d8:	d1a8      	bne.n	800a82c <_dtoa_r+0xa84>
 800a8da:	2331      	movs	r3, #49	@ 0x31
 800a8dc:	f108 0801 	add.w	r8, r8, #1
 800a8e0:	f88a 3000 	strb.w	r3, [sl]
 800a8e4:	e4ad      	b.n	800a242 <_dtoa_r+0x49a>
 800a8e6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a8e8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a944 <_dtoa_r+0xb9c>
 800a8ec:	b11b      	cbz	r3, 800a8f6 <_dtoa_r+0xb4e>
 800a8ee:	f10a 0308 	add.w	r3, sl, #8
 800a8f2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a8f4:	6013      	str	r3, [r2, #0]
 800a8f6:	4650      	mov	r0, sl
 800a8f8:	b017      	add	sp, #92	@ 0x5c
 800a8fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8fe:	9b07      	ldr	r3, [sp, #28]
 800a900:	2b01      	cmp	r3, #1
 800a902:	f77f ae2e 	ble.w	800a562 <_dtoa_r+0x7ba>
 800a906:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a908:	9308      	str	r3, [sp, #32]
 800a90a:	2001      	movs	r0, #1
 800a90c:	e64d      	b.n	800a5aa <_dtoa_r+0x802>
 800a90e:	f1bb 0f00 	cmp.w	fp, #0
 800a912:	f77f aed9 	ble.w	800a6c8 <_dtoa_r+0x920>
 800a916:	4656      	mov	r6, sl
 800a918:	9802      	ldr	r0, [sp, #8]
 800a91a:	4621      	mov	r1, r4
 800a91c:	f7ff f9bc 	bl	8009c98 <quorem>
 800a920:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a924:	f806 3b01 	strb.w	r3, [r6], #1
 800a928:	eba6 020a 	sub.w	r2, r6, sl
 800a92c:	4593      	cmp	fp, r2
 800a92e:	ddb4      	ble.n	800a89a <_dtoa_r+0xaf2>
 800a930:	9902      	ldr	r1, [sp, #8]
 800a932:	2300      	movs	r3, #0
 800a934:	220a      	movs	r2, #10
 800a936:	4648      	mov	r0, r9
 800a938:	f000 f968 	bl	800ac0c <__multadd>
 800a93c:	9002      	str	r0, [sp, #8]
 800a93e:	e7eb      	b.n	800a918 <_dtoa_r+0xb70>
 800a940:	0800dc5f 	.word	0x0800dc5f
 800a944:	0800dbe3 	.word	0x0800dbe3

0800a948 <_free_r>:
 800a948:	b538      	push	{r3, r4, r5, lr}
 800a94a:	4605      	mov	r5, r0
 800a94c:	2900      	cmp	r1, #0
 800a94e:	d041      	beq.n	800a9d4 <_free_r+0x8c>
 800a950:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a954:	1f0c      	subs	r4, r1, #4
 800a956:	2b00      	cmp	r3, #0
 800a958:	bfb8      	it	lt
 800a95a:	18e4      	addlt	r4, r4, r3
 800a95c:	f000 f8e8 	bl	800ab30 <__malloc_lock>
 800a960:	4a1d      	ldr	r2, [pc, #116]	@ (800a9d8 <_free_r+0x90>)
 800a962:	6813      	ldr	r3, [r2, #0]
 800a964:	b933      	cbnz	r3, 800a974 <_free_r+0x2c>
 800a966:	6063      	str	r3, [r4, #4]
 800a968:	6014      	str	r4, [r2, #0]
 800a96a:	4628      	mov	r0, r5
 800a96c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a970:	f000 b8e4 	b.w	800ab3c <__malloc_unlock>
 800a974:	42a3      	cmp	r3, r4
 800a976:	d908      	bls.n	800a98a <_free_r+0x42>
 800a978:	6820      	ldr	r0, [r4, #0]
 800a97a:	1821      	adds	r1, r4, r0
 800a97c:	428b      	cmp	r3, r1
 800a97e:	bf01      	itttt	eq
 800a980:	6819      	ldreq	r1, [r3, #0]
 800a982:	685b      	ldreq	r3, [r3, #4]
 800a984:	1809      	addeq	r1, r1, r0
 800a986:	6021      	streq	r1, [r4, #0]
 800a988:	e7ed      	b.n	800a966 <_free_r+0x1e>
 800a98a:	461a      	mov	r2, r3
 800a98c:	685b      	ldr	r3, [r3, #4]
 800a98e:	b10b      	cbz	r3, 800a994 <_free_r+0x4c>
 800a990:	42a3      	cmp	r3, r4
 800a992:	d9fa      	bls.n	800a98a <_free_r+0x42>
 800a994:	6811      	ldr	r1, [r2, #0]
 800a996:	1850      	adds	r0, r2, r1
 800a998:	42a0      	cmp	r0, r4
 800a99a:	d10b      	bne.n	800a9b4 <_free_r+0x6c>
 800a99c:	6820      	ldr	r0, [r4, #0]
 800a99e:	4401      	add	r1, r0
 800a9a0:	1850      	adds	r0, r2, r1
 800a9a2:	4283      	cmp	r3, r0
 800a9a4:	6011      	str	r1, [r2, #0]
 800a9a6:	d1e0      	bne.n	800a96a <_free_r+0x22>
 800a9a8:	6818      	ldr	r0, [r3, #0]
 800a9aa:	685b      	ldr	r3, [r3, #4]
 800a9ac:	6053      	str	r3, [r2, #4]
 800a9ae:	4408      	add	r0, r1
 800a9b0:	6010      	str	r0, [r2, #0]
 800a9b2:	e7da      	b.n	800a96a <_free_r+0x22>
 800a9b4:	d902      	bls.n	800a9bc <_free_r+0x74>
 800a9b6:	230c      	movs	r3, #12
 800a9b8:	602b      	str	r3, [r5, #0]
 800a9ba:	e7d6      	b.n	800a96a <_free_r+0x22>
 800a9bc:	6820      	ldr	r0, [r4, #0]
 800a9be:	1821      	adds	r1, r4, r0
 800a9c0:	428b      	cmp	r3, r1
 800a9c2:	bf04      	itt	eq
 800a9c4:	6819      	ldreq	r1, [r3, #0]
 800a9c6:	685b      	ldreq	r3, [r3, #4]
 800a9c8:	6063      	str	r3, [r4, #4]
 800a9ca:	bf04      	itt	eq
 800a9cc:	1809      	addeq	r1, r1, r0
 800a9ce:	6021      	streq	r1, [r4, #0]
 800a9d0:	6054      	str	r4, [r2, #4]
 800a9d2:	e7ca      	b.n	800a96a <_free_r+0x22>
 800a9d4:	bd38      	pop	{r3, r4, r5, pc}
 800a9d6:	bf00      	nop
 800a9d8:	200006c8 	.word	0x200006c8

0800a9dc <malloc>:
 800a9dc:	4b02      	ldr	r3, [pc, #8]	@ (800a9e8 <malloc+0xc>)
 800a9de:	4601      	mov	r1, r0
 800a9e0:	6818      	ldr	r0, [r3, #0]
 800a9e2:	f000 b825 	b.w	800aa30 <_malloc_r>
 800a9e6:	bf00      	nop
 800a9e8:	20000018 	.word	0x20000018

0800a9ec <sbrk_aligned>:
 800a9ec:	b570      	push	{r4, r5, r6, lr}
 800a9ee:	4e0f      	ldr	r6, [pc, #60]	@ (800aa2c <sbrk_aligned+0x40>)
 800a9f0:	460c      	mov	r4, r1
 800a9f2:	6831      	ldr	r1, [r6, #0]
 800a9f4:	4605      	mov	r5, r0
 800a9f6:	b911      	cbnz	r1, 800a9fe <sbrk_aligned+0x12>
 800a9f8:	f002 fb5c 	bl	800d0b4 <_sbrk_r>
 800a9fc:	6030      	str	r0, [r6, #0]
 800a9fe:	4621      	mov	r1, r4
 800aa00:	4628      	mov	r0, r5
 800aa02:	f002 fb57 	bl	800d0b4 <_sbrk_r>
 800aa06:	1c43      	adds	r3, r0, #1
 800aa08:	d103      	bne.n	800aa12 <sbrk_aligned+0x26>
 800aa0a:	f04f 34ff 	mov.w	r4, #4294967295
 800aa0e:	4620      	mov	r0, r4
 800aa10:	bd70      	pop	{r4, r5, r6, pc}
 800aa12:	1cc4      	adds	r4, r0, #3
 800aa14:	f024 0403 	bic.w	r4, r4, #3
 800aa18:	42a0      	cmp	r0, r4
 800aa1a:	d0f8      	beq.n	800aa0e <sbrk_aligned+0x22>
 800aa1c:	1a21      	subs	r1, r4, r0
 800aa1e:	4628      	mov	r0, r5
 800aa20:	f002 fb48 	bl	800d0b4 <_sbrk_r>
 800aa24:	3001      	adds	r0, #1
 800aa26:	d1f2      	bne.n	800aa0e <sbrk_aligned+0x22>
 800aa28:	e7ef      	b.n	800aa0a <sbrk_aligned+0x1e>
 800aa2a:	bf00      	nop
 800aa2c:	200006c4 	.word	0x200006c4

0800aa30 <_malloc_r>:
 800aa30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa34:	1ccd      	adds	r5, r1, #3
 800aa36:	f025 0503 	bic.w	r5, r5, #3
 800aa3a:	3508      	adds	r5, #8
 800aa3c:	2d0c      	cmp	r5, #12
 800aa3e:	bf38      	it	cc
 800aa40:	250c      	movcc	r5, #12
 800aa42:	2d00      	cmp	r5, #0
 800aa44:	4606      	mov	r6, r0
 800aa46:	db01      	blt.n	800aa4c <_malloc_r+0x1c>
 800aa48:	42a9      	cmp	r1, r5
 800aa4a:	d904      	bls.n	800aa56 <_malloc_r+0x26>
 800aa4c:	230c      	movs	r3, #12
 800aa4e:	6033      	str	r3, [r6, #0]
 800aa50:	2000      	movs	r0, #0
 800aa52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ab2c <_malloc_r+0xfc>
 800aa5a:	f000 f869 	bl	800ab30 <__malloc_lock>
 800aa5e:	f8d8 3000 	ldr.w	r3, [r8]
 800aa62:	461c      	mov	r4, r3
 800aa64:	bb44      	cbnz	r4, 800aab8 <_malloc_r+0x88>
 800aa66:	4629      	mov	r1, r5
 800aa68:	4630      	mov	r0, r6
 800aa6a:	f7ff ffbf 	bl	800a9ec <sbrk_aligned>
 800aa6e:	1c43      	adds	r3, r0, #1
 800aa70:	4604      	mov	r4, r0
 800aa72:	d158      	bne.n	800ab26 <_malloc_r+0xf6>
 800aa74:	f8d8 4000 	ldr.w	r4, [r8]
 800aa78:	4627      	mov	r7, r4
 800aa7a:	2f00      	cmp	r7, #0
 800aa7c:	d143      	bne.n	800ab06 <_malloc_r+0xd6>
 800aa7e:	2c00      	cmp	r4, #0
 800aa80:	d04b      	beq.n	800ab1a <_malloc_r+0xea>
 800aa82:	6823      	ldr	r3, [r4, #0]
 800aa84:	4639      	mov	r1, r7
 800aa86:	4630      	mov	r0, r6
 800aa88:	eb04 0903 	add.w	r9, r4, r3
 800aa8c:	f002 fb12 	bl	800d0b4 <_sbrk_r>
 800aa90:	4581      	cmp	r9, r0
 800aa92:	d142      	bne.n	800ab1a <_malloc_r+0xea>
 800aa94:	6821      	ldr	r1, [r4, #0]
 800aa96:	1a6d      	subs	r5, r5, r1
 800aa98:	4629      	mov	r1, r5
 800aa9a:	4630      	mov	r0, r6
 800aa9c:	f7ff ffa6 	bl	800a9ec <sbrk_aligned>
 800aaa0:	3001      	adds	r0, #1
 800aaa2:	d03a      	beq.n	800ab1a <_malloc_r+0xea>
 800aaa4:	6823      	ldr	r3, [r4, #0]
 800aaa6:	442b      	add	r3, r5
 800aaa8:	6023      	str	r3, [r4, #0]
 800aaaa:	f8d8 3000 	ldr.w	r3, [r8]
 800aaae:	685a      	ldr	r2, [r3, #4]
 800aab0:	bb62      	cbnz	r2, 800ab0c <_malloc_r+0xdc>
 800aab2:	f8c8 7000 	str.w	r7, [r8]
 800aab6:	e00f      	b.n	800aad8 <_malloc_r+0xa8>
 800aab8:	6822      	ldr	r2, [r4, #0]
 800aaba:	1b52      	subs	r2, r2, r5
 800aabc:	d420      	bmi.n	800ab00 <_malloc_r+0xd0>
 800aabe:	2a0b      	cmp	r2, #11
 800aac0:	d917      	bls.n	800aaf2 <_malloc_r+0xc2>
 800aac2:	1961      	adds	r1, r4, r5
 800aac4:	42a3      	cmp	r3, r4
 800aac6:	6025      	str	r5, [r4, #0]
 800aac8:	bf18      	it	ne
 800aaca:	6059      	strne	r1, [r3, #4]
 800aacc:	6863      	ldr	r3, [r4, #4]
 800aace:	bf08      	it	eq
 800aad0:	f8c8 1000 	streq.w	r1, [r8]
 800aad4:	5162      	str	r2, [r4, r5]
 800aad6:	604b      	str	r3, [r1, #4]
 800aad8:	4630      	mov	r0, r6
 800aada:	f000 f82f 	bl	800ab3c <__malloc_unlock>
 800aade:	f104 000b 	add.w	r0, r4, #11
 800aae2:	1d23      	adds	r3, r4, #4
 800aae4:	f020 0007 	bic.w	r0, r0, #7
 800aae8:	1ac2      	subs	r2, r0, r3
 800aaea:	bf1c      	itt	ne
 800aaec:	1a1b      	subne	r3, r3, r0
 800aaee:	50a3      	strne	r3, [r4, r2]
 800aaf0:	e7af      	b.n	800aa52 <_malloc_r+0x22>
 800aaf2:	6862      	ldr	r2, [r4, #4]
 800aaf4:	42a3      	cmp	r3, r4
 800aaf6:	bf0c      	ite	eq
 800aaf8:	f8c8 2000 	streq.w	r2, [r8]
 800aafc:	605a      	strne	r2, [r3, #4]
 800aafe:	e7eb      	b.n	800aad8 <_malloc_r+0xa8>
 800ab00:	4623      	mov	r3, r4
 800ab02:	6864      	ldr	r4, [r4, #4]
 800ab04:	e7ae      	b.n	800aa64 <_malloc_r+0x34>
 800ab06:	463c      	mov	r4, r7
 800ab08:	687f      	ldr	r7, [r7, #4]
 800ab0a:	e7b6      	b.n	800aa7a <_malloc_r+0x4a>
 800ab0c:	461a      	mov	r2, r3
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	42a3      	cmp	r3, r4
 800ab12:	d1fb      	bne.n	800ab0c <_malloc_r+0xdc>
 800ab14:	2300      	movs	r3, #0
 800ab16:	6053      	str	r3, [r2, #4]
 800ab18:	e7de      	b.n	800aad8 <_malloc_r+0xa8>
 800ab1a:	230c      	movs	r3, #12
 800ab1c:	6033      	str	r3, [r6, #0]
 800ab1e:	4630      	mov	r0, r6
 800ab20:	f000 f80c 	bl	800ab3c <__malloc_unlock>
 800ab24:	e794      	b.n	800aa50 <_malloc_r+0x20>
 800ab26:	6005      	str	r5, [r0, #0]
 800ab28:	e7d6      	b.n	800aad8 <_malloc_r+0xa8>
 800ab2a:	bf00      	nop
 800ab2c:	200006c8 	.word	0x200006c8

0800ab30 <__malloc_lock>:
 800ab30:	4801      	ldr	r0, [pc, #4]	@ (800ab38 <__malloc_lock+0x8>)
 800ab32:	f7ff b8a8 	b.w	8009c86 <__retarget_lock_acquire_recursive>
 800ab36:	bf00      	nop
 800ab38:	200006c0 	.word	0x200006c0

0800ab3c <__malloc_unlock>:
 800ab3c:	4801      	ldr	r0, [pc, #4]	@ (800ab44 <__malloc_unlock+0x8>)
 800ab3e:	f7ff b8a3 	b.w	8009c88 <__retarget_lock_release_recursive>
 800ab42:	bf00      	nop
 800ab44:	200006c0 	.word	0x200006c0

0800ab48 <_Balloc>:
 800ab48:	b570      	push	{r4, r5, r6, lr}
 800ab4a:	69c6      	ldr	r6, [r0, #28]
 800ab4c:	4604      	mov	r4, r0
 800ab4e:	460d      	mov	r5, r1
 800ab50:	b976      	cbnz	r6, 800ab70 <_Balloc+0x28>
 800ab52:	2010      	movs	r0, #16
 800ab54:	f7ff ff42 	bl	800a9dc <malloc>
 800ab58:	4602      	mov	r2, r0
 800ab5a:	61e0      	str	r0, [r4, #28]
 800ab5c:	b920      	cbnz	r0, 800ab68 <_Balloc+0x20>
 800ab5e:	4b18      	ldr	r3, [pc, #96]	@ (800abc0 <_Balloc+0x78>)
 800ab60:	4818      	ldr	r0, [pc, #96]	@ (800abc4 <_Balloc+0x7c>)
 800ab62:	216b      	movs	r1, #107	@ 0x6b
 800ab64:	f002 facc 	bl	800d100 <__assert_func>
 800ab68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab6c:	6006      	str	r6, [r0, #0]
 800ab6e:	60c6      	str	r6, [r0, #12]
 800ab70:	69e6      	ldr	r6, [r4, #28]
 800ab72:	68f3      	ldr	r3, [r6, #12]
 800ab74:	b183      	cbz	r3, 800ab98 <_Balloc+0x50>
 800ab76:	69e3      	ldr	r3, [r4, #28]
 800ab78:	68db      	ldr	r3, [r3, #12]
 800ab7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ab7e:	b9b8      	cbnz	r0, 800abb0 <_Balloc+0x68>
 800ab80:	2101      	movs	r1, #1
 800ab82:	fa01 f605 	lsl.w	r6, r1, r5
 800ab86:	1d72      	adds	r2, r6, #5
 800ab88:	0092      	lsls	r2, r2, #2
 800ab8a:	4620      	mov	r0, r4
 800ab8c:	f002 fad6 	bl	800d13c <_calloc_r>
 800ab90:	b160      	cbz	r0, 800abac <_Balloc+0x64>
 800ab92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ab96:	e00e      	b.n	800abb6 <_Balloc+0x6e>
 800ab98:	2221      	movs	r2, #33	@ 0x21
 800ab9a:	2104      	movs	r1, #4
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	f002 facd 	bl	800d13c <_calloc_r>
 800aba2:	69e3      	ldr	r3, [r4, #28]
 800aba4:	60f0      	str	r0, [r6, #12]
 800aba6:	68db      	ldr	r3, [r3, #12]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d1e4      	bne.n	800ab76 <_Balloc+0x2e>
 800abac:	2000      	movs	r0, #0
 800abae:	bd70      	pop	{r4, r5, r6, pc}
 800abb0:	6802      	ldr	r2, [r0, #0]
 800abb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800abb6:	2300      	movs	r3, #0
 800abb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800abbc:	e7f7      	b.n	800abae <_Balloc+0x66>
 800abbe:	bf00      	nop
 800abc0:	0800dbf0 	.word	0x0800dbf0
 800abc4:	0800dc70 	.word	0x0800dc70

0800abc8 <_Bfree>:
 800abc8:	b570      	push	{r4, r5, r6, lr}
 800abca:	69c6      	ldr	r6, [r0, #28]
 800abcc:	4605      	mov	r5, r0
 800abce:	460c      	mov	r4, r1
 800abd0:	b976      	cbnz	r6, 800abf0 <_Bfree+0x28>
 800abd2:	2010      	movs	r0, #16
 800abd4:	f7ff ff02 	bl	800a9dc <malloc>
 800abd8:	4602      	mov	r2, r0
 800abda:	61e8      	str	r0, [r5, #28]
 800abdc:	b920      	cbnz	r0, 800abe8 <_Bfree+0x20>
 800abde:	4b09      	ldr	r3, [pc, #36]	@ (800ac04 <_Bfree+0x3c>)
 800abe0:	4809      	ldr	r0, [pc, #36]	@ (800ac08 <_Bfree+0x40>)
 800abe2:	218f      	movs	r1, #143	@ 0x8f
 800abe4:	f002 fa8c 	bl	800d100 <__assert_func>
 800abe8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800abec:	6006      	str	r6, [r0, #0]
 800abee:	60c6      	str	r6, [r0, #12]
 800abf0:	b13c      	cbz	r4, 800ac02 <_Bfree+0x3a>
 800abf2:	69eb      	ldr	r3, [r5, #28]
 800abf4:	6862      	ldr	r2, [r4, #4]
 800abf6:	68db      	ldr	r3, [r3, #12]
 800abf8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800abfc:	6021      	str	r1, [r4, #0]
 800abfe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ac02:	bd70      	pop	{r4, r5, r6, pc}
 800ac04:	0800dbf0 	.word	0x0800dbf0
 800ac08:	0800dc70 	.word	0x0800dc70

0800ac0c <__multadd>:
 800ac0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac10:	690d      	ldr	r5, [r1, #16]
 800ac12:	4607      	mov	r7, r0
 800ac14:	460c      	mov	r4, r1
 800ac16:	461e      	mov	r6, r3
 800ac18:	f101 0c14 	add.w	ip, r1, #20
 800ac1c:	2000      	movs	r0, #0
 800ac1e:	f8dc 3000 	ldr.w	r3, [ip]
 800ac22:	b299      	uxth	r1, r3
 800ac24:	fb02 6101 	mla	r1, r2, r1, r6
 800ac28:	0c1e      	lsrs	r6, r3, #16
 800ac2a:	0c0b      	lsrs	r3, r1, #16
 800ac2c:	fb02 3306 	mla	r3, r2, r6, r3
 800ac30:	b289      	uxth	r1, r1
 800ac32:	3001      	adds	r0, #1
 800ac34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ac38:	4285      	cmp	r5, r0
 800ac3a:	f84c 1b04 	str.w	r1, [ip], #4
 800ac3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ac42:	dcec      	bgt.n	800ac1e <__multadd+0x12>
 800ac44:	b30e      	cbz	r6, 800ac8a <__multadd+0x7e>
 800ac46:	68a3      	ldr	r3, [r4, #8]
 800ac48:	42ab      	cmp	r3, r5
 800ac4a:	dc19      	bgt.n	800ac80 <__multadd+0x74>
 800ac4c:	6861      	ldr	r1, [r4, #4]
 800ac4e:	4638      	mov	r0, r7
 800ac50:	3101      	adds	r1, #1
 800ac52:	f7ff ff79 	bl	800ab48 <_Balloc>
 800ac56:	4680      	mov	r8, r0
 800ac58:	b928      	cbnz	r0, 800ac66 <__multadd+0x5a>
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	4b0c      	ldr	r3, [pc, #48]	@ (800ac90 <__multadd+0x84>)
 800ac5e:	480d      	ldr	r0, [pc, #52]	@ (800ac94 <__multadd+0x88>)
 800ac60:	21ba      	movs	r1, #186	@ 0xba
 800ac62:	f002 fa4d 	bl	800d100 <__assert_func>
 800ac66:	6922      	ldr	r2, [r4, #16]
 800ac68:	3202      	adds	r2, #2
 800ac6a:	f104 010c 	add.w	r1, r4, #12
 800ac6e:	0092      	lsls	r2, r2, #2
 800ac70:	300c      	adds	r0, #12
 800ac72:	f002 fa2f 	bl	800d0d4 <memcpy>
 800ac76:	4621      	mov	r1, r4
 800ac78:	4638      	mov	r0, r7
 800ac7a:	f7ff ffa5 	bl	800abc8 <_Bfree>
 800ac7e:	4644      	mov	r4, r8
 800ac80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ac84:	3501      	adds	r5, #1
 800ac86:	615e      	str	r6, [r3, #20]
 800ac88:	6125      	str	r5, [r4, #16]
 800ac8a:	4620      	mov	r0, r4
 800ac8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac90:	0800dc5f 	.word	0x0800dc5f
 800ac94:	0800dc70 	.word	0x0800dc70

0800ac98 <__s2b>:
 800ac98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac9c:	460c      	mov	r4, r1
 800ac9e:	4615      	mov	r5, r2
 800aca0:	461f      	mov	r7, r3
 800aca2:	2209      	movs	r2, #9
 800aca4:	3308      	adds	r3, #8
 800aca6:	4606      	mov	r6, r0
 800aca8:	fb93 f3f2 	sdiv	r3, r3, r2
 800acac:	2100      	movs	r1, #0
 800acae:	2201      	movs	r2, #1
 800acb0:	429a      	cmp	r2, r3
 800acb2:	db09      	blt.n	800acc8 <__s2b+0x30>
 800acb4:	4630      	mov	r0, r6
 800acb6:	f7ff ff47 	bl	800ab48 <_Balloc>
 800acba:	b940      	cbnz	r0, 800acce <__s2b+0x36>
 800acbc:	4602      	mov	r2, r0
 800acbe:	4b19      	ldr	r3, [pc, #100]	@ (800ad24 <__s2b+0x8c>)
 800acc0:	4819      	ldr	r0, [pc, #100]	@ (800ad28 <__s2b+0x90>)
 800acc2:	21d3      	movs	r1, #211	@ 0xd3
 800acc4:	f002 fa1c 	bl	800d100 <__assert_func>
 800acc8:	0052      	lsls	r2, r2, #1
 800acca:	3101      	adds	r1, #1
 800accc:	e7f0      	b.n	800acb0 <__s2b+0x18>
 800acce:	9b08      	ldr	r3, [sp, #32]
 800acd0:	6143      	str	r3, [r0, #20]
 800acd2:	2d09      	cmp	r5, #9
 800acd4:	f04f 0301 	mov.w	r3, #1
 800acd8:	6103      	str	r3, [r0, #16]
 800acda:	dd16      	ble.n	800ad0a <__s2b+0x72>
 800acdc:	f104 0909 	add.w	r9, r4, #9
 800ace0:	46c8      	mov	r8, r9
 800ace2:	442c      	add	r4, r5
 800ace4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ace8:	4601      	mov	r1, r0
 800acea:	3b30      	subs	r3, #48	@ 0x30
 800acec:	220a      	movs	r2, #10
 800acee:	4630      	mov	r0, r6
 800acf0:	f7ff ff8c 	bl	800ac0c <__multadd>
 800acf4:	45a0      	cmp	r8, r4
 800acf6:	d1f5      	bne.n	800ace4 <__s2b+0x4c>
 800acf8:	f1a5 0408 	sub.w	r4, r5, #8
 800acfc:	444c      	add	r4, r9
 800acfe:	1b2d      	subs	r5, r5, r4
 800ad00:	1963      	adds	r3, r4, r5
 800ad02:	42bb      	cmp	r3, r7
 800ad04:	db04      	blt.n	800ad10 <__s2b+0x78>
 800ad06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad0a:	340a      	adds	r4, #10
 800ad0c:	2509      	movs	r5, #9
 800ad0e:	e7f6      	b.n	800acfe <__s2b+0x66>
 800ad10:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ad14:	4601      	mov	r1, r0
 800ad16:	3b30      	subs	r3, #48	@ 0x30
 800ad18:	220a      	movs	r2, #10
 800ad1a:	4630      	mov	r0, r6
 800ad1c:	f7ff ff76 	bl	800ac0c <__multadd>
 800ad20:	e7ee      	b.n	800ad00 <__s2b+0x68>
 800ad22:	bf00      	nop
 800ad24:	0800dc5f 	.word	0x0800dc5f
 800ad28:	0800dc70 	.word	0x0800dc70

0800ad2c <__hi0bits>:
 800ad2c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ad30:	4603      	mov	r3, r0
 800ad32:	bf36      	itet	cc
 800ad34:	0403      	lslcc	r3, r0, #16
 800ad36:	2000      	movcs	r0, #0
 800ad38:	2010      	movcc	r0, #16
 800ad3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ad3e:	bf3c      	itt	cc
 800ad40:	021b      	lslcc	r3, r3, #8
 800ad42:	3008      	addcc	r0, #8
 800ad44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad48:	bf3c      	itt	cc
 800ad4a:	011b      	lslcc	r3, r3, #4
 800ad4c:	3004      	addcc	r0, #4
 800ad4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ad52:	bf3c      	itt	cc
 800ad54:	009b      	lslcc	r3, r3, #2
 800ad56:	3002      	addcc	r0, #2
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	db05      	blt.n	800ad68 <__hi0bits+0x3c>
 800ad5c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ad60:	f100 0001 	add.w	r0, r0, #1
 800ad64:	bf08      	it	eq
 800ad66:	2020      	moveq	r0, #32
 800ad68:	4770      	bx	lr

0800ad6a <__lo0bits>:
 800ad6a:	6803      	ldr	r3, [r0, #0]
 800ad6c:	4602      	mov	r2, r0
 800ad6e:	f013 0007 	ands.w	r0, r3, #7
 800ad72:	d00b      	beq.n	800ad8c <__lo0bits+0x22>
 800ad74:	07d9      	lsls	r1, r3, #31
 800ad76:	d421      	bmi.n	800adbc <__lo0bits+0x52>
 800ad78:	0798      	lsls	r0, r3, #30
 800ad7a:	bf49      	itett	mi
 800ad7c:	085b      	lsrmi	r3, r3, #1
 800ad7e:	089b      	lsrpl	r3, r3, #2
 800ad80:	2001      	movmi	r0, #1
 800ad82:	6013      	strmi	r3, [r2, #0]
 800ad84:	bf5c      	itt	pl
 800ad86:	6013      	strpl	r3, [r2, #0]
 800ad88:	2002      	movpl	r0, #2
 800ad8a:	4770      	bx	lr
 800ad8c:	b299      	uxth	r1, r3
 800ad8e:	b909      	cbnz	r1, 800ad94 <__lo0bits+0x2a>
 800ad90:	0c1b      	lsrs	r3, r3, #16
 800ad92:	2010      	movs	r0, #16
 800ad94:	b2d9      	uxtb	r1, r3
 800ad96:	b909      	cbnz	r1, 800ad9c <__lo0bits+0x32>
 800ad98:	3008      	adds	r0, #8
 800ad9a:	0a1b      	lsrs	r3, r3, #8
 800ad9c:	0719      	lsls	r1, r3, #28
 800ad9e:	bf04      	itt	eq
 800ada0:	091b      	lsreq	r3, r3, #4
 800ada2:	3004      	addeq	r0, #4
 800ada4:	0799      	lsls	r1, r3, #30
 800ada6:	bf04      	itt	eq
 800ada8:	089b      	lsreq	r3, r3, #2
 800adaa:	3002      	addeq	r0, #2
 800adac:	07d9      	lsls	r1, r3, #31
 800adae:	d403      	bmi.n	800adb8 <__lo0bits+0x4e>
 800adb0:	085b      	lsrs	r3, r3, #1
 800adb2:	f100 0001 	add.w	r0, r0, #1
 800adb6:	d003      	beq.n	800adc0 <__lo0bits+0x56>
 800adb8:	6013      	str	r3, [r2, #0]
 800adba:	4770      	bx	lr
 800adbc:	2000      	movs	r0, #0
 800adbe:	4770      	bx	lr
 800adc0:	2020      	movs	r0, #32
 800adc2:	4770      	bx	lr

0800adc4 <__i2b>:
 800adc4:	b510      	push	{r4, lr}
 800adc6:	460c      	mov	r4, r1
 800adc8:	2101      	movs	r1, #1
 800adca:	f7ff febd 	bl	800ab48 <_Balloc>
 800adce:	4602      	mov	r2, r0
 800add0:	b928      	cbnz	r0, 800adde <__i2b+0x1a>
 800add2:	4b05      	ldr	r3, [pc, #20]	@ (800ade8 <__i2b+0x24>)
 800add4:	4805      	ldr	r0, [pc, #20]	@ (800adec <__i2b+0x28>)
 800add6:	f240 1145 	movw	r1, #325	@ 0x145
 800adda:	f002 f991 	bl	800d100 <__assert_func>
 800adde:	2301      	movs	r3, #1
 800ade0:	6144      	str	r4, [r0, #20]
 800ade2:	6103      	str	r3, [r0, #16]
 800ade4:	bd10      	pop	{r4, pc}
 800ade6:	bf00      	nop
 800ade8:	0800dc5f 	.word	0x0800dc5f
 800adec:	0800dc70 	.word	0x0800dc70

0800adf0 <__multiply>:
 800adf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adf4:	4617      	mov	r7, r2
 800adf6:	690a      	ldr	r2, [r1, #16]
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	429a      	cmp	r2, r3
 800adfc:	bfa8      	it	ge
 800adfe:	463b      	movge	r3, r7
 800ae00:	4689      	mov	r9, r1
 800ae02:	bfa4      	itt	ge
 800ae04:	460f      	movge	r7, r1
 800ae06:	4699      	movge	r9, r3
 800ae08:	693d      	ldr	r5, [r7, #16]
 800ae0a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	6879      	ldr	r1, [r7, #4]
 800ae12:	eb05 060a 	add.w	r6, r5, sl
 800ae16:	42b3      	cmp	r3, r6
 800ae18:	b085      	sub	sp, #20
 800ae1a:	bfb8      	it	lt
 800ae1c:	3101      	addlt	r1, #1
 800ae1e:	f7ff fe93 	bl	800ab48 <_Balloc>
 800ae22:	b930      	cbnz	r0, 800ae32 <__multiply+0x42>
 800ae24:	4602      	mov	r2, r0
 800ae26:	4b41      	ldr	r3, [pc, #260]	@ (800af2c <__multiply+0x13c>)
 800ae28:	4841      	ldr	r0, [pc, #260]	@ (800af30 <__multiply+0x140>)
 800ae2a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ae2e:	f002 f967 	bl	800d100 <__assert_func>
 800ae32:	f100 0414 	add.w	r4, r0, #20
 800ae36:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800ae3a:	4623      	mov	r3, r4
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	4573      	cmp	r3, lr
 800ae40:	d320      	bcc.n	800ae84 <__multiply+0x94>
 800ae42:	f107 0814 	add.w	r8, r7, #20
 800ae46:	f109 0114 	add.w	r1, r9, #20
 800ae4a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ae4e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800ae52:	9302      	str	r3, [sp, #8]
 800ae54:	1beb      	subs	r3, r5, r7
 800ae56:	3b15      	subs	r3, #21
 800ae58:	f023 0303 	bic.w	r3, r3, #3
 800ae5c:	3304      	adds	r3, #4
 800ae5e:	3715      	adds	r7, #21
 800ae60:	42bd      	cmp	r5, r7
 800ae62:	bf38      	it	cc
 800ae64:	2304      	movcc	r3, #4
 800ae66:	9301      	str	r3, [sp, #4]
 800ae68:	9b02      	ldr	r3, [sp, #8]
 800ae6a:	9103      	str	r1, [sp, #12]
 800ae6c:	428b      	cmp	r3, r1
 800ae6e:	d80c      	bhi.n	800ae8a <__multiply+0x9a>
 800ae70:	2e00      	cmp	r6, #0
 800ae72:	dd03      	ble.n	800ae7c <__multiply+0x8c>
 800ae74:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d055      	beq.n	800af28 <__multiply+0x138>
 800ae7c:	6106      	str	r6, [r0, #16]
 800ae7e:	b005      	add	sp, #20
 800ae80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae84:	f843 2b04 	str.w	r2, [r3], #4
 800ae88:	e7d9      	b.n	800ae3e <__multiply+0x4e>
 800ae8a:	f8b1 a000 	ldrh.w	sl, [r1]
 800ae8e:	f1ba 0f00 	cmp.w	sl, #0
 800ae92:	d01f      	beq.n	800aed4 <__multiply+0xe4>
 800ae94:	46c4      	mov	ip, r8
 800ae96:	46a1      	mov	r9, r4
 800ae98:	2700      	movs	r7, #0
 800ae9a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ae9e:	f8d9 3000 	ldr.w	r3, [r9]
 800aea2:	fa1f fb82 	uxth.w	fp, r2
 800aea6:	b29b      	uxth	r3, r3
 800aea8:	fb0a 330b 	mla	r3, sl, fp, r3
 800aeac:	443b      	add	r3, r7
 800aeae:	f8d9 7000 	ldr.w	r7, [r9]
 800aeb2:	0c12      	lsrs	r2, r2, #16
 800aeb4:	0c3f      	lsrs	r7, r7, #16
 800aeb6:	fb0a 7202 	mla	r2, sl, r2, r7
 800aeba:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800aebe:	b29b      	uxth	r3, r3
 800aec0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aec4:	4565      	cmp	r5, ip
 800aec6:	f849 3b04 	str.w	r3, [r9], #4
 800aeca:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800aece:	d8e4      	bhi.n	800ae9a <__multiply+0xaa>
 800aed0:	9b01      	ldr	r3, [sp, #4]
 800aed2:	50e7      	str	r7, [r4, r3]
 800aed4:	9b03      	ldr	r3, [sp, #12]
 800aed6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800aeda:	3104      	adds	r1, #4
 800aedc:	f1b9 0f00 	cmp.w	r9, #0
 800aee0:	d020      	beq.n	800af24 <__multiply+0x134>
 800aee2:	6823      	ldr	r3, [r4, #0]
 800aee4:	4647      	mov	r7, r8
 800aee6:	46a4      	mov	ip, r4
 800aee8:	f04f 0a00 	mov.w	sl, #0
 800aeec:	f8b7 b000 	ldrh.w	fp, [r7]
 800aef0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800aef4:	fb09 220b 	mla	r2, r9, fp, r2
 800aef8:	4452      	add	r2, sl
 800aefa:	b29b      	uxth	r3, r3
 800aefc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af00:	f84c 3b04 	str.w	r3, [ip], #4
 800af04:	f857 3b04 	ldr.w	r3, [r7], #4
 800af08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800af0c:	f8bc 3000 	ldrh.w	r3, [ip]
 800af10:	fb09 330a 	mla	r3, r9, sl, r3
 800af14:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800af18:	42bd      	cmp	r5, r7
 800af1a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800af1e:	d8e5      	bhi.n	800aeec <__multiply+0xfc>
 800af20:	9a01      	ldr	r2, [sp, #4]
 800af22:	50a3      	str	r3, [r4, r2]
 800af24:	3404      	adds	r4, #4
 800af26:	e79f      	b.n	800ae68 <__multiply+0x78>
 800af28:	3e01      	subs	r6, #1
 800af2a:	e7a1      	b.n	800ae70 <__multiply+0x80>
 800af2c:	0800dc5f 	.word	0x0800dc5f
 800af30:	0800dc70 	.word	0x0800dc70

0800af34 <__pow5mult>:
 800af34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af38:	4615      	mov	r5, r2
 800af3a:	f012 0203 	ands.w	r2, r2, #3
 800af3e:	4607      	mov	r7, r0
 800af40:	460e      	mov	r6, r1
 800af42:	d007      	beq.n	800af54 <__pow5mult+0x20>
 800af44:	4c25      	ldr	r4, [pc, #148]	@ (800afdc <__pow5mult+0xa8>)
 800af46:	3a01      	subs	r2, #1
 800af48:	2300      	movs	r3, #0
 800af4a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af4e:	f7ff fe5d 	bl	800ac0c <__multadd>
 800af52:	4606      	mov	r6, r0
 800af54:	10ad      	asrs	r5, r5, #2
 800af56:	d03d      	beq.n	800afd4 <__pow5mult+0xa0>
 800af58:	69fc      	ldr	r4, [r7, #28]
 800af5a:	b97c      	cbnz	r4, 800af7c <__pow5mult+0x48>
 800af5c:	2010      	movs	r0, #16
 800af5e:	f7ff fd3d 	bl	800a9dc <malloc>
 800af62:	4602      	mov	r2, r0
 800af64:	61f8      	str	r0, [r7, #28]
 800af66:	b928      	cbnz	r0, 800af74 <__pow5mult+0x40>
 800af68:	4b1d      	ldr	r3, [pc, #116]	@ (800afe0 <__pow5mult+0xac>)
 800af6a:	481e      	ldr	r0, [pc, #120]	@ (800afe4 <__pow5mult+0xb0>)
 800af6c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800af70:	f002 f8c6 	bl	800d100 <__assert_func>
 800af74:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af78:	6004      	str	r4, [r0, #0]
 800af7a:	60c4      	str	r4, [r0, #12]
 800af7c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800af80:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af84:	b94c      	cbnz	r4, 800af9a <__pow5mult+0x66>
 800af86:	f240 2171 	movw	r1, #625	@ 0x271
 800af8a:	4638      	mov	r0, r7
 800af8c:	f7ff ff1a 	bl	800adc4 <__i2b>
 800af90:	2300      	movs	r3, #0
 800af92:	f8c8 0008 	str.w	r0, [r8, #8]
 800af96:	4604      	mov	r4, r0
 800af98:	6003      	str	r3, [r0, #0]
 800af9a:	f04f 0900 	mov.w	r9, #0
 800af9e:	07eb      	lsls	r3, r5, #31
 800afa0:	d50a      	bpl.n	800afb8 <__pow5mult+0x84>
 800afa2:	4631      	mov	r1, r6
 800afa4:	4622      	mov	r2, r4
 800afa6:	4638      	mov	r0, r7
 800afa8:	f7ff ff22 	bl	800adf0 <__multiply>
 800afac:	4631      	mov	r1, r6
 800afae:	4680      	mov	r8, r0
 800afb0:	4638      	mov	r0, r7
 800afb2:	f7ff fe09 	bl	800abc8 <_Bfree>
 800afb6:	4646      	mov	r6, r8
 800afb8:	106d      	asrs	r5, r5, #1
 800afba:	d00b      	beq.n	800afd4 <__pow5mult+0xa0>
 800afbc:	6820      	ldr	r0, [r4, #0]
 800afbe:	b938      	cbnz	r0, 800afd0 <__pow5mult+0x9c>
 800afc0:	4622      	mov	r2, r4
 800afc2:	4621      	mov	r1, r4
 800afc4:	4638      	mov	r0, r7
 800afc6:	f7ff ff13 	bl	800adf0 <__multiply>
 800afca:	6020      	str	r0, [r4, #0]
 800afcc:	f8c0 9000 	str.w	r9, [r0]
 800afd0:	4604      	mov	r4, r0
 800afd2:	e7e4      	b.n	800af9e <__pow5mult+0x6a>
 800afd4:	4630      	mov	r0, r6
 800afd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afda:	bf00      	nop
 800afdc:	0800dd9c 	.word	0x0800dd9c
 800afe0:	0800dbf0 	.word	0x0800dbf0
 800afe4:	0800dc70 	.word	0x0800dc70

0800afe8 <__lshift>:
 800afe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afec:	460c      	mov	r4, r1
 800afee:	6849      	ldr	r1, [r1, #4]
 800aff0:	6923      	ldr	r3, [r4, #16]
 800aff2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aff6:	68a3      	ldr	r3, [r4, #8]
 800aff8:	4607      	mov	r7, r0
 800affa:	4691      	mov	r9, r2
 800affc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b000:	f108 0601 	add.w	r6, r8, #1
 800b004:	42b3      	cmp	r3, r6
 800b006:	db0b      	blt.n	800b020 <__lshift+0x38>
 800b008:	4638      	mov	r0, r7
 800b00a:	f7ff fd9d 	bl	800ab48 <_Balloc>
 800b00e:	4605      	mov	r5, r0
 800b010:	b948      	cbnz	r0, 800b026 <__lshift+0x3e>
 800b012:	4602      	mov	r2, r0
 800b014:	4b28      	ldr	r3, [pc, #160]	@ (800b0b8 <__lshift+0xd0>)
 800b016:	4829      	ldr	r0, [pc, #164]	@ (800b0bc <__lshift+0xd4>)
 800b018:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b01c:	f002 f870 	bl	800d100 <__assert_func>
 800b020:	3101      	adds	r1, #1
 800b022:	005b      	lsls	r3, r3, #1
 800b024:	e7ee      	b.n	800b004 <__lshift+0x1c>
 800b026:	2300      	movs	r3, #0
 800b028:	f100 0114 	add.w	r1, r0, #20
 800b02c:	f100 0210 	add.w	r2, r0, #16
 800b030:	4618      	mov	r0, r3
 800b032:	4553      	cmp	r3, sl
 800b034:	db33      	blt.n	800b09e <__lshift+0xb6>
 800b036:	6920      	ldr	r0, [r4, #16]
 800b038:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b03c:	f104 0314 	add.w	r3, r4, #20
 800b040:	f019 091f 	ands.w	r9, r9, #31
 800b044:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b048:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b04c:	d02b      	beq.n	800b0a6 <__lshift+0xbe>
 800b04e:	f1c9 0e20 	rsb	lr, r9, #32
 800b052:	468a      	mov	sl, r1
 800b054:	2200      	movs	r2, #0
 800b056:	6818      	ldr	r0, [r3, #0]
 800b058:	fa00 f009 	lsl.w	r0, r0, r9
 800b05c:	4310      	orrs	r0, r2
 800b05e:	f84a 0b04 	str.w	r0, [sl], #4
 800b062:	f853 2b04 	ldr.w	r2, [r3], #4
 800b066:	459c      	cmp	ip, r3
 800b068:	fa22 f20e 	lsr.w	r2, r2, lr
 800b06c:	d8f3      	bhi.n	800b056 <__lshift+0x6e>
 800b06e:	ebac 0304 	sub.w	r3, ip, r4
 800b072:	3b15      	subs	r3, #21
 800b074:	f023 0303 	bic.w	r3, r3, #3
 800b078:	3304      	adds	r3, #4
 800b07a:	f104 0015 	add.w	r0, r4, #21
 800b07e:	4560      	cmp	r0, ip
 800b080:	bf88      	it	hi
 800b082:	2304      	movhi	r3, #4
 800b084:	50ca      	str	r2, [r1, r3]
 800b086:	b10a      	cbz	r2, 800b08c <__lshift+0xa4>
 800b088:	f108 0602 	add.w	r6, r8, #2
 800b08c:	3e01      	subs	r6, #1
 800b08e:	4638      	mov	r0, r7
 800b090:	612e      	str	r6, [r5, #16]
 800b092:	4621      	mov	r1, r4
 800b094:	f7ff fd98 	bl	800abc8 <_Bfree>
 800b098:	4628      	mov	r0, r5
 800b09a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b09e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	e7c5      	b.n	800b032 <__lshift+0x4a>
 800b0a6:	3904      	subs	r1, #4
 800b0a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0ac:	f841 2f04 	str.w	r2, [r1, #4]!
 800b0b0:	459c      	cmp	ip, r3
 800b0b2:	d8f9      	bhi.n	800b0a8 <__lshift+0xc0>
 800b0b4:	e7ea      	b.n	800b08c <__lshift+0xa4>
 800b0b6:	bf00      	nop
 800b0b8:	0800dc5f 	.word	0x0800dc5f
 800b0bc:	0800dc70 	.word	0x0800dc70

0800b0c0 <__mcmp>:
 800b0c0:	690a      	ldr	r2, [r1, #16]
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	6900      	ldr	r0, [r0, #16]
 800b0c6:	1a80      	subs	r0, r0, r2
 800b0c8:	b530      	push	{r4, r5, lr}
 800b0ca:	d10e      	bne.n	800b0ea <__mcmp+0x2a>
 800b0cc:	3314      	adds	r3, #20
 800b0ce:	3114      	adds	r1, #20
 800b0d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b0d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b0d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b0dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b0e0:	4295      	cmp	r5, r2
 800b0e2:	d003      	beq.n	800b0ec <__mcmp+0x2c>
 800b0e4:	d205      	bcs.n	800b0f2 <__mcmp+0x32>
 800b0e6:	f04f 30ff 	mov.w	r0, #4294967295
 800b0ea:	bd30      	pop	{r4, r5, pc}
 800b0ec:	42a3      	cmp	r3, r4
 800b0ee:	d3f3      	bcc.n	800b0d8 <__mcmp+0x18>
 800b0f0:	e7fb      	b.n	800b0ea <__mcmp+0x2a>
 800b0f2:	2001      	movs	r0, #1
 800b0f4:	e7f9      	b.n	800b0ea <__mcmp+0x2a>
	...

0800b0f8 <__mdiff>:
 800b0f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0fc:	4689      	mov	r9, r1
 800b0fe:	4606      	mov	r6, r0
 800b100:	4611      	mov	r1, r2
 800b102:	4648      	mov	r0, r9
 800b104:	4614      	mov	r4, r2
 800b106:	f7ff ffdb 	bl	800b0c0 <__mcmp>
 800b10a:	1e05      	subs	r5, r0, #0
 800b10c:	d112      	bne.n	800b134 <__mdiff+0x3c>
 800b10e:	4629      	mov	r1, r5
 800b110:	4630      	mov	r0, r6
 800b112:	f7ff fd19 	bl	800ab48 <_Balloc>
 800b116:	4602      	mov	r2, r0
 800b118:	b928      	cbnz	r0, 800b126 <__mdiff+0x2e>
 800b11a:	4b3f      	ldr	r3, [pc, #252]	@ (800b218 <__mdiff+0x120>)
 800b11c:	f240 2137 	movw	r1, #567	@ 0x237
 800b120:	483e      	ldr	r0, [pc, #248]	@ (800b21c <__mdiff+0x124>)
 800b122:	f001 ffed 	bl	800d100 <__assert_func>
 800b126:	2301      	movs	r3, #1
 800b128:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b12c:	4610      	mov	r0, r2
 800b12e:	b003      	add	sp, #12
 800b130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b134:	bfbc      	itt	lt
 800b136:	464b      	movlt	r3, r9
 800b138:	46a1      	movlt	r9, r4
 800b13a:	4630      	mov	r0, r6
 800b13c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b140:	bfba      	itte	lt
 800b142:	461c      	movlt	r4, r3
 800b144:	2501      	movlt	r5, #1
 800b146:	2500      	movge	r5, #0
 800b148:	f7ff fcfe 	bl	800ab48 <_Balloc>
 800b14c:	4602      	mov	r2, r0
 800b14e:	b918      	cbnz	r0, 800b158 <__mdiff+0x60>
 800b150:	4b31      	ldr	r3, [pc, #196]	@ (800b218 <__mdiff+0x120>)
 800b152:	f240 2145 	movw	r1, #581	@ 0x245
 800b156:	e7e3      	b.n	800b120 <__mdiff+0x28>
 800b158:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b15c:	6926      	ldr	r6, [r4, #16]
 800b15e:	60c5      	str	r5, [r0, #12]
 800b160:	f109 0310 	add.w	r3, r9, #16
 800b164:	f109 0514 	add.w	r5, r9, #20
 800b168:	f104 0e14 	add.w	lr, r4, #20
 800b16c:	f100 0b14 	add.w	fp, r0, #20
 800b170:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b174:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b178:	9301      	str	r3, [sp, #4]
 800b17a:	46d9      	mov	r9, fp
 800b17c:	f04f 0c00 	mov.w	ip, #0
 800b180:	9b01      	ldr	r3, [sp, #4]
 800b182:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b186:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b18a:	9301      	str	r3, [sp, #4]
 800b18c:	fa1f f38a 	uxth.w	r3, sl
 800b190:	4619      	mov	r1, r3
 800b192:	b283      	uxth	r3, r0
 800b194:	1acb      	subs	r3, r1, r3
 800b196:	0c00      	lsrs	r0, r0, #16
 800b198:	4463      	add	r3, ip
 800b19a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b19e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b1a8:	4576      	cmp	r6, lr
 800b1aa:	f849 3b04 	str.w	r3, [r9], #4
 800b1ae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b1b2:	d8e5      	bhi.n	800b180 <__mdiff+0x88>
 800b1b4:	1b33      	subs	r3, r6, r4
 800b1b6:	3b15      	subs	r3, #21
 800b1b8:	f023 0303 	bic.w	r3, r3, #3
 800b1bc:	3415      	adds	r4, #21
 800b1be:	3304      	adds	r3, #4
 800b1c0:	42a6      	cmp	r6, r4
 800b1c2:	bf38      	it	cc
 800b1c4:	2304      	movcc	r3, #4
 800b1c6:	441d      	add	r5, r3
 800b1c8:	445b      	add	r3, fp
 800b1ca:	461e      	mov	r6, r3
 800b1cc:	462c      	mov	r4, r5
 800b1ce:	4544      	cmp	r4, r8
 800b1d0:	d30e      	bcc.n	800b1f0 <__mdiff+0xf8>
 800b1d2:	f108 0103 	add.w	r1, r8, #3
 800b1d6:	1b49      	subs	r1, r1, r5
 800b1d8:	f021 0103 	bic.w	r1, r1, #3
 800b1dc:	3d03      	subs	r5, #3
 800b1de:	45a8      	cmp	r8, r5
 800b1e0:	bf38      	it	cc
 800b1e2:	2100      	movcc	r1, #0
 800b1e4:	440b      	add	r3, r1
 800b1e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b1ea:	b191      	cbz	r1, 800b212 <__mdiff+0x11a>
 800b1ec:	6117      	str	r7, [r2, #16]
 800b1ee:	e79d      	b.n	800b12c <__mdiff+0x34>
 800b1f0:	f854 1b04 	ldr.w	r1, [r4], #4
 800b1f4:	46e6      	mov	lr, ip
 800b1f6:	0c08      	lsrs	r0, r1, #16
 800b1f8:	fa1c fc81 	uxtah	ip, ip, r1
 800b1fc:	4471      	add	r1, lr
 800b1fe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b202:	b289      	uxth	r1, r1
 800b204:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b208:	f846 1b04 	str.w	r1, [r6], #4
 800b20c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b210:	e7dd      	b.n	800b1ce <__mdiff+0xd6>
 800b212:	3f01      	subs	r7, #1
 800b214:	e7e7      	b.n	800b1e6 <__mdiff+0xee>
 800b216:	bf00      	nop
 800b218:	0800dc5f 	.word	0x0800dc5f
 800b21c:	0800dc70 	.word	0x0800dc70

0800b220 <__ulp>:
 800b220:	b082      	sub	sp, #8
 800b222:	ed8d 0b00 	vstr	d0, [sp]
 800b226:	9a01      	ldr	r2, [sp, #4]
 800b228:	4b0f      	ldr	r3, [pc, #60]	@ (800b268 <__ulp+0x48>)
 800b22a:	4013      	ands	r3, r2
 800b22c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b230:	2b00      	cmp	r3, #0
 800b232:	dc08      	bgt.n	800b246 <__ulp+0x26>
 800b234:	425b      	negs	r3, r3
 800b236:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b23a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b23e:	da04      	bge.n	800b24a <__ulp+0x2a>
 800b240:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b244:	4113      	asrs	r3, r2
 800b246:	2200      	movs	r2, #0
 800b248:	e008      	b.n	800b25c <__ulp+0x3c>
 800b24a:	f1a2 0314 	sub.w	r3, r2, #20
 800b24e:	2b1e      	cmp	r3, #30
 800b250:	bfda      	itte	le
 800b252:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b256:	40da      	lsrle	r2, r3
 800b258:	2201      	movgt	r2, #1
 800b25a:	2300      	movs	r3, #0
 800b25c:	4619      	mov	r1, r3
 800b25e:	4610      	mov	r0, r2
 800b260:	ec41 0b10 	vmov	d0, r0, r1
 800b264:	b002      	add	sp, #8
 800b266:	4770      	bx	lr
 800b268:	7ff00000 	.word	0x7ff00000

0800b26c <__b2d>:
 800b26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b270:	6906      	ldr	r6, [r0, #16]
 800b272:	f100 0814 	add.w	r8, r0, #20
 800b276:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b27a:	1f37      	subs	r7, r6, #4
 800b27c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b280:	4610      	mov	r0, r2
 800b282:	f7ff fd53 	bl	800ad2c <__hi0bits>
 800b286:	f1c0 0320 	rsb	r3, r0, #32
 800b28a:	280a      	cmp	r0, #10
 800b28c:	600b      	str	r3, [r1, #0]
 800b28e:	491b      	ldr	r1, [pc, #108]	@ (800b2fc <__b2d+0x90>)
 800b290:	dc15      	bgt.n	800b2be <__b2d+0x52>
 800b292:	f1c0 0c0b 	rsb	ip, r0, #11
 800b296:	fa22 f30c 	lsr.w	r3, r2, ip
 800b29a:	45b8      	cmp	r8, r7
 800b29c:	ea43 0501 	orr.w	r5, r3, r1
 800b2a0:	bf34      	ite	cc
 800b2a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b2a6:	2300      	movcs	r3, #0
 800b2a8:	3015      	adds	r0, #21
 800b2aa:	fa02 f000 	lsl.w	r0, r2, r0
 800b2ae:	fa23 f30c 	lsr.w	r3, r3, ip
 800b2b2:	4303      	orrs	r3, r0
 800b2b4:	461c      	mov	r4, r3
 800b2b6:	ec45 4b10 	vmov	d0, r4, r5
 800b2ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2be:	45b8      	cmp	r8, r7
 800b2c0:	bf3a      	itte	cc
 800b2c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b2c6:	f1a6 0708 	subcc.w	r7, r6, #8
 800b2ca:	2300      	movcs	r3, #0
 800b2cc:	380b      	subs	r0, #11
 800b2ce:	d012      	beq.n	800b2f6 <__b2d+0x8a>
 800b2d0:	f1c0 0120 	rsb	r1, r0, #32
 800b2d4:	fa23 f401 	lsr.w	r4, r3, r1
 800b2d8:	4082      	lsls	r2, r0
 800b2da:	4322      	orrs	r2, r4
 800b2dc:	4547      	cmp	r7, r8
 800b2de:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b2e2:	bf8c      	ite	hi
 800b2e4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b2e8:	2200      	movls	r2, #0
 800b2ea:	4083      	lsls	r3, r0
 800b2ec:	40ca      	lsrs	r2, r1
 800b2ee:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	e7de      	b.n	800b2b4 <__b2d+0x48>
 800b2f6:	ea42 0501 	orr.w	r5, r2, r1
 800b2fa:	e7db      	b.n	800b2b4 <__b2d+0x48>
 800b2fc:	3ff00000 	.word	0x3ff00000

0800b300 <__d2b>:
 800b300:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b304:	460f      	mov	r7, r1
 800b306:	2101      	movs	r1, #1
 800b308:	ec59 8b10 	vmov	r8, r9, d0
 800b30c:	4616      	mov	r6, r2
 800b30e:	f7ff fc1b 	bl	800ab48 <_Balloc>
 800b312:	4604      	mov	r4, r0
 800b314:	b930      	cbnz	r0, 800b324 <__d2b+0x24>
 800b316:	4602      	mov	r2, r0
 800b318:	4b23      	ldr	r3, [pc, #140]	@ (800b3a8 <__d2b+0xa8>)
 800b31a:	4824      	ldr	r0, [pc, #144]	@ (800b3ac <__d2b+0xac>)
 800b31c:	f240 310f 	movw	r1, #783	@ 0x30f
 800b320:	f001 feee 	bl	800d100 <__assert_func>
 800b324:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b328:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b32c:	b10d      	cbz	r5, 800b332 <__d2b+0x32>
 800b32e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b332:	9301      	str	r3, [sp, #4]
 800b334:	f1b8 0300 	subs.w	r3, r8, #0
 800b338:	d023      	beq.n	800b382 <__d2b+0x82>
 800b33a:	4668      	mov	r0, sp
 800b33c:	9300      	str	r3, [sp, #0]
 800b33e:	f7ff fd14 	bl	800ad6a <__lo0bits>
 800b342:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b346:	b1d0      	cbz	r0, 800b37e <__d2b+0x7e>
 800b348:	f1c0 0320 	rsb	r3, r0, #32
 800b34c:	fa02 f303 	lsl.w	r3, r2, r3
 800b350:	430b      	orrs	r3, r1
 800b352:	40c2      	lsrs	r2, r0
 800b354:	6163      	str	r3, [r4, #20]
 800b356:	9201      	str	r2, [sp, #4]
 800b358:	9b01      	ldr	r3, [sp, #4]
 800b35a:	61a3      	str	r3, [r4, #24]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	bf0c      	ite	eq
 800b360:	2201      	moveq	r2, #1
 800b362:	2202      	movne	r2, #2
 800b364:	6122      	str	r2, [r4, #16]
 800b366:	b1a5      	cbz	r5, 800b392 <__d2b+0x92>
 800b368:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b36c:	4405      	add	r5, r0
 800b36e:	603d      	str	r5, [r7, #0]
 800b370:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b374:	6030      	str	r0, [r6, #0]
 800b376:	4620      	mov	r0, r4
 800b378:	b003      	add	sp, #12
 800b37a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b37e:	6161      	str	r1, [r4, #20]
 800b380:	e7ea      	b.n	800b358 <__d2b+0x58>
 800b382:	a801      	add	r0, sp, #4
 800b384:	f7ff fcf1 	bl	800ad6a <__lo0bits>
 800b388:	9b01      	ldr	r3, [sp, #4]
 800b38a:	6163      	str	r3, [r4, #20]
 800b38c:	3020      	adds	r0, #32
 800b38e:	2201      	movs	r2, #1
 800b390:	e7e8      	b.n	800b364 <__d2b+0x64>
 800b392:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b396:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b39a:	6038      	str	r0, [r7, #0]
 800b39c:	6918      	ldr	r0, [r3, #16]
 800b39e:	f7ff fcc5 	bl	800ad2c <__hi0bits>
 800b3a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b3a6:	e7e5      	b.n	800b374 <__d2b+0x74>
 800b3a8:	0800dc5f 	.word	0x0800dc5f
 800b3ac:	0800dc70 	.word	0x0800dc70

0800b3b0 <__ratio>:
 800b3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3b4:	b085      	sub	sp, #20
 800b3b6:	e9cd 1000 	strd	r1, r0, [sp]
 800b3ba:	a902      	add	r1, sp, #8
 800b3bc:	f7ff ff56 	bl	800b26c <__b2d>
 800b3c0:	9800      	ldr	r0, [sp, #0]
 800b3c2:	a903      	add	r1, sp, #12
 800b3c4:	ec55 4b10 	vmov	r4, r5, d0
 800b3c8:	f7ff ff50 	bl	800b26c <__b2d>
 800b3cc:	9b01      	ldr	r3, [sp, #4]
 800b3ce:	6919      	ldr	r1, [r3, #16]
 800b3d0:	9b00      	ldr	r3, [sp, #0]
 800b3d2:	691b      	ldr	r3, [r3, #16]
 800b3d4:	1ac9      	subs	r1, r1, r3
 800b3d6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b3da:	1a9b      	subs	r3, r3, r2
 800b3dc:	ec5b ab10 	vmov	sl, fp, d0
 800b3e0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	bfce      	itee	gt
 800b3e8:	462a      	movgt	r2, r5
 800b3ea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b3ee:	465a      	movle	r2, fp
 800b3f0:	462f      	mov	r7, r5
 800b3f2:	46d9      	mov	r9, fp
 800b3f4:	bfcc      	ite	gt
 800b3f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b3fa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b3fe:	464b      	mov	r3, r9
 800b400:	4652      	mov	r2, sl
 800b402:	4620      	mov	r0, r4
 800b404:	4639      	mov	r1, r7
 800b406:	f7f5 fa21 	bl	800084c <__aeabi_ddiv>
 800b40a:	ec41 0b10 	vmov	d0, r0, r1
 800b40e:	b005      	add	sp, #20
 800b410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b414 <__copybits>:
 800b414:	3901      	subs	r1, #1
 800b416:	b570      	push	{r4, r5, r6, lr}
 800b418:	1149      	asrs	r1, r1, #5
 800b41a:	6914      	ldr	r4, [r2, #16]
 800b41c:	3101      	adds	r1, #1
 800b41e:	f102 0314 	add.w	r3, r2, #20
 800b422:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b426:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b42a:	1f05      	subs	r5, r0, #4
 800b42c:	42a3      	cmp	r3, r4
 800b42e:	d30c      	bcc.n	800b44a <__copybits+0x36>
 800b430:	1aa3      	subs	r3, r4, r2
 800b432:	3b11      	subs	r3, #17
 800b434:	f023 0303 	bic.w	r3, r3, #3
 800b438:	3211      	adds	r2, #17
 800b43a:	42a2      	cmp	r2, r4
 800b43c:	bf88      	it	hi
 800b43e:	2300      	movhi	r3, #0
 800b440:	4418      	add	r0, r3
 800b442:	2300      	movs	r3, #0
 800b444:	4288      	cmp	r0, r1
 800b446:	d305      	bcc.n	800b454 <__copybits+0x40>
 800b448:	bd70      	pop	{r4, r5, r6, pc}
 800b44a:	f853 6b04 	ldr.w	r6, [r3], #4
 800b44e:	f845 6f04 	str.w	r6, [r5, #4]!
 800b452:	e7eb      	b.n	800b42c <__copybits+0x18>
 800b454:	f840 3b04 	str.w	r3, [r0], #4
 800b458:	e7f4      	b.n	800b444 <__copybits+0x30>

0800b45a <__any_on>:
 800b45a:	f100 0214 	add.w	r2, r0, #20
 800b45e:	6900      	ldr	r0, [r0, #16]
 800b460:	114b      	asrs	r3, r1, #5
 800b462:	4298      	cmp	r0, r3
 800b464:	b510      	push	{r4, lr}
 800b466:	db11      	blt.n	800b48c <__any_on+0x32>
 800b468:	dd0a      	ble.n	800b480 <__any_on+0x26>
 800b46a:	f011 011f 	ands.w	r1, r1, #31
 800b46e:	d007      	beq.n	800b480 <__any_on+0x26>
 800b470:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b474:	fa24 f001 	lsr.w	r0, r4, r1
 800b478:	fa00 f101 	lsl.w	r1, r0, r1
 800b47c:	428c      	cmp	r4, r1
 800b47e:	d10b      	bne.n	800b498 <__any_on+0x3e>
 800b480:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b484:	4293      	cmp	r3, r2
 800b486:	d803      	bhi.n	800b490 <__any_on+0x36>
 800b488:	2000      	movs	r0, #0
 800b48a:	bd10      	pop	{r4, pc}
 800b48c:	4603      	mov	r3, r0
 800b48e:	e7f7      	b.n	800b480 <__any_on+0x26>
 800b490:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b494:	2900      	cmp	r1, #0
 800b496:	d0f5      	beq.n	800b484 <__any_on+0x2a>
 800b498:	2001      	movs	r0, #1
 800b49a:	e7f6      	b.n	800b48a <__any_on+0x30>

0800b49c <sulp>:
 800b49c:	b570      	push	{r4, r5, r6, lr}
 800b49e:	4604      	mov	r4, r0
 800b4a0:	460d      	mov	r5, r1
 800b4a2:	ec45 4b10 	vmov	d0, r4, r5
 800b4a6:	4616      	mov	r6, r2
 800b4a8:	f7ff feba 	bl	800b220 <__ulp>
 800b4ac:	ec51 0b10 	vmov	r0, r1, d0
 800b4b0:	b17e      	cbz	r6, 800b4d2 <sulp+0x36>
 800b4b2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b4b6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	dd09      	ble.n	800b4d2 <sulp+0x36>
 800b4be:	051b      	lsls	r3, r3, #20
 800b4c0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800b4c4:	2400      	movs	r4, #0
 800b4c6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800b4ca:	4622      	mov	r2, r4
 800b4cc:	462b      	mov	r3, r5
 800b4ce:	f7f5 f893 	bl	80005f8 <__aeabi_dmul>
 800b4d2:	ec41 0b10 	vmov	d0, r0, r1
 800b4d6:	bd70      	pop	{r4, r5, r6, pc}

0800b4d8 <_strtod_l>:
 800b4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4dc:	b09f      	sub	sp, #124	@ 0x7c
 800b4de:	460c      	mov	r4, r1
 800b4e0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	921a      	str	r2, [sp, #104]	@ 0x68
 800b4e6:	9005      	str	r0, [sp, #20]
 800b4e8:	f04f 0a00 	mov.w	sl, #0
 800b4ec:	f04f 0b00 	mov.w	fp, #0
 800b4f0:	460a      	mov	r2, r1
 800b4f2:	9219      	str	r2, [sp, #100]	@ 0x64
 800b4f4:	7811      	ldrb	r1, [r2, #0]
 800b4f6:	292b      	cmp	r1, #43	@ 0x2b
 800b4f8:	d04a      	beq.n	800b590 <_strtod_l+0xb8>
 800b4fa:	d838      	bhi.n	800b56e <_strtod_l+0x96>
 800b4fc:	290d      	cmp	r1, #13
 800b4fe:	d832      	bhi.n	800b566 <_strtod_l+0x8e>
 800b500:	2908      	cmp	r1, #8
 800b502:	d832      	bhi.n	800b56a <_strtod_l+0x92>
 800b504:	2900      	cmp	r1, #0
 800b506:	d03b      	beq.n	800b580 <_strtod_l+0xa8>
 800b508:	2200      	movs	r2, #0
 800b50a:	920e      	str	r2, [sp, #56]	@ 0x38
 800b50c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800b50e:	782a      	ldrb	r2, [r5, #0]
 800b510:	2a30      	cmp	r2, #48	@ 0x30
 800b512:	f040 80b2 	bne.w	800b67a <_strtod_l+0x1a2>
 800b516:	786a      	ldrb	r2, [r5, #1]
 800b518:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b51c:	2a58      	cmp	r2, #88	@ 0x58
 800b51e:	d16e      	bne.n	800b5fe <_strtod_l+0x126>
 800b520:	9302      	str	r3, [sp, #8]
 800b522:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b524:	9301      	str	r3, [sp, #4]
 800b526:	ab1a      	add	r3, sp, #104	@ 0x68
 800b528:	9300      	str	r3, [sp, #0]
 800b52a:	4a8f      	ldr	r2, [pc, #572]	@ (800b768 <_strtod_l+0x290>)
 800b52c:	9805      	ldr	r0, [sp, #20]
 800b52e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800b530:	a919      	add	r1, sp, #100	@ 0x64
 800b532:	f001 fe7f 	bl	800d234 <__gethex>
 800b536:	f010 060f 	ands.w	r6, r0, #15
 800b53a:	4604      	mov	r4, r0
 800b53c:	d005      	beq.n	800b54a <_strtod_l+0x72>
 800b53e:	2e06      	cmp	r6, #6
 800b540:	d128      	bne.n	800b594 <_strtod_l+0xbc>
 800b542:	3501      	adds	r5, #1
 800b544:	2300      	movs	r3, #0
 800b546:	9519      	str	r5, [sp, #100]	@ 0x64
 800b548:	930e      	str	r3, [sp, #56]	@ 0x38
 800b54a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	f040 858e 	bne.w	800c06e <_strtod_l+0xb96>
 800b552:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b554:	b1cb      	cbz	r3, 800b58a <_strtod_l+0xb2>
 800b556:	4652      	mov	r2, sl
 800b558:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800b55c:	ec43 2b10 	vmov	d0, r2, r3
 800b560:	b01f      	add	sp, #124	@ 0x7c
 800b562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b566:	2920      	cmp	r1, #32
 800b568:	d1ce      	bne.n	800b508 <_strtod_l+0x30>
 800b56a:	3201      	adds	r2, #1
 800b56c:	e7c1      	b.n	800b4f2 <_strtod_l+0x1a>
 800b56e:	292d      	cmp	r1, #45	@ 0x2d
 800b570:	d1ca      	bne.n	800b508 <_strtod_l+0x30>
 800b572:	2101      	movs	r1, #1
 800b574:	910e      	str	r1, [sp, #56]	@ 0x38
 800b576:	1c51      	adds	r1, r2, #1
 800b578:	9119      	str	r1, [sp, #100]	@ 0x64
 800b57a:	7852      	ldrb	r2, [r2, #1]
 800b57c:	2a00      	cmp	r2, #0
 800b57e:	d1c5      	bne.n	800b50c <_strtod_l+0x34>
 800b580:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b582:	9419      	str	r4, [sp, #100]	@ 0x64
 800b584:	2b00      	cmp	r3, #0
 800b586:	f040 8570 	bne.w	800c06a <_strtod_l+0xb92>
 800b58a:	4652      	mov	r2, sl
 800b58c:	465b      	mov	r3, fp
 800b58e:	e7e5      	b.n	800b55c <_strtod_l+0x84>
 800b590:	2100      	movs	r1, #0
 800b592:	e7ef      	b.n	800b574 <_strtod_l+0x9c>
 800b594:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b596:	b13a      	cbz	r2, 800b5a8 <_strtod_l+0xd0>
 800b598:	2135      	movs	r1, #53	@ 0x35
 800b59a:	a81c      	add	r0, sp, #112	@ 0x70
 800b59c:	f7ff ff3a 	bl	800b414 <__copybits>
 800b5a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b5a2:	9805      	ldr	r0, [sp, #20]
 800b5a4:	f7ff fb10 	bl	800abc8 <_Bfree>
 800b5a8:	3e01      	subs	r6, #1
 800b5aa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b5ac:	2e04      	cmp	r6, #4
 800b5ae:	d806      	bhi.n	800b5be <_strtod_l+0xe6>
 800b5b0:	e8df f006 	tbb	[pc, r6]
 800b5b4:	201d0314 	.word	0x201d0314
 800b5b8:	14          	.byte	0x14
 800b5b9:	00          	.byte	0x00
 800b5ba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800b5be:	05e1      	lsls	r1, r4, #23
 800b5c0:	bf48      	it	mi
 800b5c2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b5c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b5ca:	0d1b      	lsrs	r3, r3, #20
 800b5cc:	051b      	lsls	r3, r3, #20
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d1bb      	bne.n	800b54a <_strtod_l+0x72>
 800b5d2:	f7fe fb2d 	bl	8009c30 <__errno>
 800b5d6:	2322      	movs	r3, #34	@ 0x22
 800b5d8:	6003      	str	r3, [r0, #0]
 800b5da:	e7b6      	b.n	800b54a <_strtod_l+0x72>
 800b5dc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800b5e0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b5e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b5e8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b5ec:	e7e7      	b.n	800b5be <_strtod_l+0xe6>
 800b5ee:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800b770 <_strtod_l+0x298>
 800b5f2:	e7e4      	b.n	800b5be <_strtod_l+0xe6>
 800b5f4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b5f8:	f04f 3aff 	mov.w	sl, #4294967295
 800b5fc:	e7df      	b.n	800b5be <_strtod_l+0xe6>
 800b5fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b600:	1c5a      	adds	r2, r3, #1
 800b602:	9219      	str	r2, [sp, #100]	@ 0x64
 800b604:	785b      	ldrb	r3, [r3, #1]
 800b606:	2b30      	cmp	r3, #48	@ 0x30
 800b608:	d0f9      	beq.n	800b5fe <_strtod_l+0x126>
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d09d      	beq.n	800b54a <_strtod_l+0x72>
 800b60e:	2301      	movs	r3, #1
 800b610:	2700      	movs	r7, #0
 800b612:	9308      	str	r3, [sp, #32]
 800b614:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b616:	930c      	str	r3, [sp, #48]	@ 0x30
 800b618:	970b      	str	r7, [sp, #44]	@ 0x2c
 800b61a:	46b9      	mov	r9, r7
 800b61c:	220a      	movs	r2, #10
 800b61e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800b620:	7805      	ldrb	r5, [r0, #0]
 800b622:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800b626:	b2d9      	uxtb	r1, r3
 800b628:	2909      	cmp	r1, #9
 800b62a:	d928      	bls.n	800b67e <_strtod_l+0x1a6>
 800b62c:	494f      	ldr	r1, [pc, #316]	@ (800b76c <_strtod_l+0x294>)
 800b62e:	2201      	movs	r2, #1
 800b630:	f001 fd0b 	bl	800d04a <strncmp>
 800b634:	2800      	cmp	r0, #0
 800b636:	d032      	beq.n	800b69e <_strtod_l+0x1c6>
 800b638:	2000      	movs	r0, #0
 800b63a:	462a      	mov	r2, r5
 800b63c:	900a      	str	r0, [sp, #40]	@ 0x28
 800b63e:	464d      	mov	r5, r9
 800b640:	4603      	mov	r3, r0
 800b642:	2a65      	cmp	r2, #101	@ 0x65
 800b644:	d001      	beq.n	800b64a <_strtod_l+0x172>
 800b646:	2a45      	cmp	r2, #69	@ 0x45
 800b648:	d114      	bne.n	800b674 <_strtod_l+0x19c>
 800b64a:	b91d      	cbnz	r5, 800b654 <_strtod_l+0x17c>
 800b64c:	9a08      	ldr	r2, [sp, #32]
 800b64e:	4302      	orrs	r2, r0
 800b650:	d096      	beq.n	800b580 <_strtod_l+0xa8>
 800b652:	2500      	movs	r5, #0
 800b654:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800b656:	1c62      	adds	r2, r4, #1
 800b658:	9219      	str	r2, [sp, #100]	@ 0x64
 800b65a:	7862      	ldrb	r2, [r4, #1]
 800b65c:	2a2b      	cmp	r2, #43	@ 0x2b
 800b65e:	d07a      	beq.n	800b756 <_strtod_l+0x27e>
 800b660:	2a2d      	cmp	r2, #45	@ 0x2d
 800b662:	d07e      	beq.n	800b762 <_strtod_l+0x28a>
 800b664:	f04f 0c00 	mov.w	ip, #0
 800b668:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b66c:	2909      	cmp	r1, #9
 800b66e:	f240 8085 	bls.w	800b77c <_strtod_l+0x2a4>
 800b672:	9419      	str	r4, [sp, #100]	@ 0x64
 800b674:	f04f 0800 	mov.w	r8, #0
 800b678:	e0a5      	b.n	800b7c6 <_strtod_l+0x2ee>
 800b67a:	2300      	movs	r3, #0
 800b67c:	e7c8      	b.n	800b610 <_strtod_l+0x138>
 800b67e:	f1b9 0f08 	cmp.w	r9, #8
 800b682:	bfd8      	it	le
 800b684:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800b686:	f100 0001 	add.w	r0, r0, #1
 800b68a:	bfda      	itte	le
 800b68c:	fb02 3301 	mlale	r3, r2, r1, r3
 800b690:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800b692:	fb02 3707 	mlagt	r7, r2, r7, r3
 800b696:	f109 0901 	add.w	r9, r9, #1
 800b69a:	9019      	str	r0, [sp, #100]	@ 0x64
 800b69c:	e7bf      	b.n	800b61e <_strtod_l+0x146>
 800b69e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b6a0:	1c5a      	adds	r2, r3, #1
 800b6a2:	9219      	str	r2, [sp, #100]	@ 0x64
 800b6a4:	785a      	ldrb	r2, [r3, #1]
 800b6a6:	f1b9 0f00 	cmp.w	r9, #0
 800b6aa:	d03b      	beq.n	800b724 <_strtod_l+0x24c>
 800b6ac:	900a      	str	r0, [sp, #40]	@ 0x28
 800b6ae:	464d      	mov	r5, r9
 800b6b0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b6b4:	2b09      	cmp	r3, #9
 800b6b6:	d912      	bls.n	800b6de <_strtod_l+0x206>
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	e7c2      	b.n	800b642 <_strtod_l+0x16a>
 800b6bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b6be:	1c5a      	adds	r2, r3, #1
 800b6c0:	9219      	str	r2, [sp, #100]	@ 0x64
 800b6c2:	785a      	ldrb	r2, [r3, #1]
 800b6c4:	3001      	adds	r0, #1
 800b6c6:	2a30      	cmp	r2, #48	@ 0x30
 800b6c8:	d0f8      	beq.n	800b6bc <_strtod_l+0x1e4>
 800b6ca:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b6ce:	2b08      	cmp	r3, #8
 800b6d0:	f200 84d2 	bhi.w	800c078 <_strtod_l+0xba0>
 800b6d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b6d6:	900a      	str	r0, [sp, #40]	@ 0x28
 800b6d8:	2000      	movs	r0, #0
 800b6da:	930c      	str	r3, [sp, #48]	@ 0x30
 800b6dc:	4605      	mov	r5, r0
 800b6de:	3a30      	subs	r2, #48	@ 0x30
 800b6e0:	f100 0301 	add.w	r3, r0, #1
 800b6e4:	d018      	beq.n	800b718 <_strtod_l+0x240>
 800b6e6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b6e8:	4419      	add	r1, r3
 800b6ea:	910a      	str	r1, [sp, #40]	@ 0x28
 800b6ec:	462e      	mov	r6, r5
 800b6ee:	f04f 0e0a 	mov.w	lr, #10
 800b6f2:	1c71      	adds	r1, r6, #1
 800b6f4:	eba1 0c05 	sub.w	ip, r1, r5
 800b6f8:	4563      	cmp	r3, ip
 800b6fa:	dc15      	bgt.n	800b728 <_strtod_l+0x250>
 800b6fc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800b700:	182b      	adds	r3, r5, r0
 800b702:	2b08      	cmp	r3, #8
 800b704:	f105 0501 	add.w	r5, r5, #1
 800b708:	4405      	add	r5, r0
 800b70a:	dc1a      	bgt.n	800b742 <_strtod_l+0x26a>
 800b70c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b70e:	230a      	movs	r3, #10
 800b710:	fb03 2301 	mla	r3, r3, r1, r2
 800b714:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b716:	2300      	movs	r3, #0
 800b718:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b71a:	1c51      	adds	r1, r2, #1
 800b71c:	9119      	str	r1, [sp, #100]	@ 0x64
 800b71e:	7852      	ldrb	r2, [r2, #1]
 800b720:	4618      	mov	r0, r3
 800b722:	e7c5      	b.n	800b6b0 <_strtod_l+0x1d8>
 800b724:	4648      	mov	r0, r9
 800b726:	e7ce      	b.n	800b6c6 <_strtod_l+0x1ee>
 800b728:	2e08      	cmp	r6, #8
 800b72a:	dc05      	bgt.n	800b738 <_strtod_l+0x260>
 800b72c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800b72e:	fb0e f606 	mul.w	r6, lr, r6
 800b732:	960b      	str	r6, [sp, #44]	@ 0x2c
 800b734:	460e      	mov	r6, r1
 800b736:	e7dc      	b.n	800b6f2 <_strtod_l+0x21a>
 800b738:	2910      	cmp	r1, #16
 800b73a:	bfd8      	it	le
 800b73c:	fb0e f707 	mulle.w	r7, lr, r7
 800b740:	e7f8      	b.n	800b734 <_strtod_l+0x25c>
 800b742:	2b0f      	cmp	r3, #15
 800b744:	bfdc      	itt	le
 800b746:	230a      	movle	r3, #10
 800b748:	fb03 2707 	mlale	r7, r3, r7, r2
 800b74c:	e7e3      	b.n	800b716 <_strtod_l+0x23e>
 800b74e:	2300      	movs	r3, #0
 800b750:	930a      	str	r3, [sp, #40]	@ 0x28
 800b752:	2301      	movs	r3, #1
 800b754:	e77a      	b.n	800b64c <_strtod_l+0x174>
 800b756:	f04f 0c00 	mov.w	ip, #0
 800b75a:	1ca2      	adds	r2, r4, #2
 800b75c:	9219      	str	r2, [sp, #100]	@ 0x64
 800b75e:	78a2      	ldrb	r2, [r4, #2]
 800b760:	e782      	b.n	800b668 <_strtod_l+0x190>
 800b762:	f04f 0c01 	mov.w	ip, #1
 800b766:	e7f8      	b.n	800b75a <_strtod_l+0x282>
 800b768:	0800deac 	.word	0x0800deac
 800b76c:	0800dcc9 	.word	0x0800dcc9
 800b770:	7ff00000 	.word	0x7ff00000
 800b774:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b776:	1c51      	adds	r1, r2, #1
 800b778:	9119      	str	r1, [sp, #100]	@ 0x64
 800b77a:	7852      	ldrb	r2, [r2, #1]
 800b77c:	2a30      	cmp	r2, #48	@ 0x30
 800b77e:	d0f9      	beq.n	800b774 <_strtod_l+0x29c>
 800b780:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b784:	2908      	cmp	r1, #8
 800b786:	f63f af75 	bhi.w	800b674 <_strtod_l+0x19c>
 800b78a:	3a30      	subs	r2, #48	@ 0x30
 800b78c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b78e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b790:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b792:	f04f 080a 	mov.w	r8, #10
 800b796:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b798:	1c56      	adds	r6, r2, #1
 800b79a:	9619      	str	r6, [sp, #100]	@ 0x64
 800b79c:	7852      	ldrb	r2, [r2, #1]
 800b79e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b7a2:	f1be 0f09 	cmp.w	lr, #9
 800b7a6:	d939      	bls.n	800b81c <_strtod_l+0x344>
 800b7a8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b7aa:	1a76      	subs	r6, r6, r1
 800b7ac:	2e08      	cmp	r6, #8
 800b7ae:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b7b2:	dc03      	bgt.n	800b7bc <_strtod_l+0x2e4>
 800b7b4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b7b6:	4588      	cmp	r8, r1
 800b7b8:	bfa8      	it	ge
 800b7ba:	4688      	movge	r8, r1
 800b7bc:	f1bc 0f00 	cmp.w	ip, #0
 800b7c0:	d001      	beq.n	800b7c6 <_strtod_l+0x2ee>
 800b7c2:	f1c8 0800 	rsb	r8, r8, #0
 800b7c6:	2d00      	cmp	r5, #0
 800b7c8:	d14e      	bne.n	800b868 <_strtod_l+0x390>
 800b7ca:	9908      	ldr	r1, [sp, #32]
 800b7cc:	4308      	orrs	r0, r1
 800b7ce:	f47f aebc 	bne.w	800b54a <_strtod_l+0x72>
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	f47f aed4 	bne.w	800b580 <_strtod_l+0xa8>
 800b7d8:	2a69      	cmp	r2, #105	@ 0x69
 800b7da:	d028      	beq.n	800b82e <_strtod_l+0x356>
 800b7dc:	dc25      	bgt.n	800b82a <_strtod_l+0x352>
 800b7de:	2a49      	cmp	r2, #73	@ 0x49
 800b7e0:	d025      	beq.n	800b82e <_strtod_l+0x356>
 800b7e2:	2a4e      	cmp	r2, #78	@ 0x4e
 800b7e4:	f47f aecc 	bne.w	800b580 <_strtod_l+0xa8>
 800b7e8:	499a      	ldr	r1, [pc, #616]	@ (800ba54 <_strtod_l+0x57c>)
 800b7ea:	a819      	add	r0, sp, #100	@ 0x64
 800b7ec:	f001 ff44 	bl	800d678 <__match>
 800b7f0:	2800      	cmp	r0, #0
 800b7f2:	f43f aec5 	beq.w	800b580 <_strtod_l+0xa8>
 800b7f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	2b28      	cmp	r3, #40	@ 0x28
 800b7fc:	d12e      	bne.n	800b85c <_strtod_l+0x384>
 800b7fe:	4996      	ldr	r1, [pc, #600]	@ (800ba58 <_strtod_l+0x580>)
 800b800:	aa1c      	add	r2, sp, #112	@ 0x70
 800b802:	a819      	add	r0, sp, #100	@ 0x64
 800b804:	f001 ff4c 	bl	800d6a0 <__hexnan>
 800b808:	2805      	cmp	r0, #5
 800b80a:	d127      	bne.n	800b85c <_strtod_l+0x384>
 800b80c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b80e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b812:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b816:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b81a:	e696      	b.n	800b54a <_strtod_l+0x72>
 800b81c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b81e:	fb08 2101 	mla	r1, r8, r1, r2
 800b822:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b826:	9209      	str	r2, [sp, #36]	@ 0x24
 800b828:	e7b5      	b.n	800b796 <_strtod_l+0x2be>
 800b82a:	2a6e      	cmp	r2, #110	@ 0x6e
 800b82c:	e7da      	b.n	800b7e4 <_strtod_l+0x30c>
 800b82e:	498b      	ldr	r1, [pc, #556]	@ (800ba5c <_strtod_l+0x584>)
 800b830:	a819      	add	r0, sp, #100	@ 0x64
 800b832:	f001 ff21 	bl	800d678 <__match>
 800b836:	2800      	cmp	r0, #0
 800b838:	f43f aea2 	beq.w	800b580 <_strtod_l+0xa8>
 800b83c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b83e:	4988      	ldr	r1, [pc, #544]	@ (800ba60 <_strtod_l+0x588>)
 800b840:	3b01      	subs	r3, #1
 800b842:	a819      	add	r0, sp, #100	@ 0x64
 800b844:	9319      	str	r3, [sp, #100]	@ 0x64
 800b846:	f001 ff17 	bl	800d678 <__match>
 800b84a:	b910      	cbnz	r0, 800b852 <_strtod_l+0x37a>
 800b84c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b84e:	3301      	adds	r3, #1
 800b850:	9319      	str	r3, [sp, #100]	@ 0x64
 800b852:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800ba70 <_strtod_l+0x598>
 800b856:	f04f 0a00 	mov.w	sl, #0
 800b85a:	e676      	b.n	800b54a <_strtod_l+0x72>
 800b85c:	4881      	ldr	r0, [pc, #516]	@ (800ba64 <_strtod_l+0x58c>)
 800b85e:	f001 fc47 	bl	800d0f0 <nan>
 800b862:	ec5b ab10 	vmov	sl, fp, d0
 800b866:	e670      	b.n	800b54a <_strtod_l+0x72>
 800b868:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b86a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800b86c:	eba8 0303 	sub.w	r3, r8, r3
 800b870:	f1b9 0f00 	cmp.w	r9, #0
 800b874:	bf08      	it	eq
 800b876:	46a9      	moveq	r9, r5
 800b878:	2d10      	cmp	r5, #16
 800b87a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b87c:	462c      	mov	r4, r5
 800b87e:	bfa8      	it	ge
 800b880:	2410      	movge	r4, #16
 800b882:	f7f4 fe3f 	bl	8000504 <__aeabi_ui2d>
 800b886:	2d09      	cmp	r5, #9
 800b888:	4682      	mov	sl, r0
 800b88a:	468b      	mov	fp, r1
 800b88c:	dc13      	bgt.n	800b8b6 <_strtod_l+0x3de>
 800b88e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b890:	2b00      	cmp	r3, #0
 800b892:	f43f ae5a 	beq.w	800b54a <_strtod_l+0x72>
 800b896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b898:	dd78      	ble.n	800b98c <_strtod_l+0x4b4>
 800b89a:	2b16      	cmp	r3, #22
 800b89c:	dc5f      	bgt.n	800b95e <_strtod_l+0x486>
 800b89e:	4972      	ldr	r1, [pc, #456]	@ (800ba68 <_strtod_l+0x590>)
 800b8a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b8a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8a8:	4652      	mov	r2, sl
 800b8aa:	465b      	mov	r3, fp
 800b8ac:	f7f4 fea4 	bl	80005f8 <__aeabi_dmul>
 800b8b0:	4682      	mov	sl, r0
 800b8b2:	468b      	mov	fp, r1
 800b8b4:	e649      	b.n	800b54a <_strtod_l+0x72>
 800b8b6:	4b6c      	ldr	r3, [pc, #432]	@ (800ba68 <_strtod_l+0x590>)
 800b8b8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b8bc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b8c0:	f7f4 fe9a 	bl	80005f8 <__aeabi_dmul>
 800b8c4:	4682      	mov	sl, r0
 800b8c6:	4638      	mov	r0, r7
 800b8c8:	468b      	mov	fp, r1
 800b8ca:	f7f4 fe1b 	bl	8000504 <__aeabi_ui2d>
 800b8ce:	4602      	mov	r2, r0
 800b8d0:	460b      	mov	r3, r1
 800b8d2:	4650      	mov	r0, sl
 800b8d4:	4659      	mov	r1, fp
 800b8d6:	f7f4 fcd9 	bl	800028c <__adddf3>
 800b8da:	2d0f      	cmp	r5, #15
 800b8dc:	4682      	mov	sl, r0
 800b8de:	468b      	mov	fp, r1
 800b8e0:	ddd5      	ble.n	800b88e <_strtod_l+0x3b6>
 800b8e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8e4:	1b2c      	subs	r4, r5, r4
 800b8e6:	441c      	add	r4, r3
 800b8e8:	2c00      	cmp	r4, #0
 800b8ea:	f340 8093 	ble.w	800ba14 <_strtod_l+0x53c>
 800b8ee:	f014 030f 	ands.w	r3, r4, #15
 800b8f2:	d00a      	beq.n	800b90a <_strtod_l+0x432>
 800b8f4:	495c      	ldr	r1, [pc, #368]	@ (800ba68 <_strtod_l+0x590>)
 800b8f6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b8fa:	4652      	mov	r2, sl
 800b8fc:	465b      	mov	r3, fp
 800b8fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b902:	f7f4 fe79 	bl	80005f8 <__aeabi_dmul>
 800b906:	4682      	mov	sl, r0
 800b908:	468b      	mov	fp, r1
 800b90a:	f034 040f 	bics.w	r4, r4, #15
 800b90e:	d073      	beq.n	800b9f8 <_strtod_l+0x520>
 800b910:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b914:	dd49      	ble.n	800b9aa <_strtod_l+0x4d2>
 800b916:	2400      	movs	r4, #0
 800b918:	46a0      	mov	r8, r4
 800b91a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b91c:	46a1      	mov	r9, r4
 800b91e:	9a05      	ldr	r2, [sp, #20]
 800b920:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800ba70 <_strtod_l+0x598>
 800b924:	2322      	movs	r3, #34	@ 0x22
 800b926:	6013      	str	r3, [r2, #0]
 800b928:	f04f 0a00 	mov.w	sl, #0
 800b92c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b92e:	2b00      	cmp	r3, #0
 800b930:	f43f ae0b 	beq.w	800b54a <_strtod_l+0x72>
 800b934:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b936:	9805      	ldr	r0, [sp, #20]
 800b938:	f7ff f946 	bl	800abc8 <_Bfree>
 800b93c:	9805      	ldr	r0, [sp, #20]
 800b93e:	4649      	mov	r1, r9
 800b940:	f7ff f942 	bl	800abc8 <_Bfree>
 800b944:	9805      	ldr	r0, [sp, #20]
 800b946:	4641      	mov	r1, r8
 800b948:	f7ff f93e 	bl	800abc8 <_Bfree>
 800b94c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b94e:	9805      	ldr	r0, [sp, #20]
 800b950:	f7ff f93a 	bl	800abc8 <_Bfree>
 800b954:	9805      	ldr	r0, [sp, #20]
 800b956:	4621      	mov	r1, r4
 800b958:	f7ff f936 	bl	800abc8 <_Bfree>
 800b95c:	e5f5      	b.n	800b54a <_strtod_l+0x72>
 800b95e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b960:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b964:	4293      	cmp	r3, r2
 800b966:	dbbc      	blt.n	800b8e2 <_strtod_l+0x40a>
 800b968:	4c3f      	ldr	r4, [pc, #252]	@ (800ba68 <_strtod_l+0x590>)
 800b96a:	f1c5 050f 	rsb	r5, r5, #15
 800b96e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b972:	4652      	mov	r2, sl
 800b974:	465b      	mov	r3, fp
 800b976:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b97a:	f7f4 fe3d 	bl	80005f8 <__aeabi_dmul>
 800b97e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b980:	1b5d      	subs	r5, r3, r5
 800b982:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b986:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b98a:	e78f      	b.n	800b8ac <_strtod_l+0x3d4>
 800b98c:	3316      	adds	r3, #22
 800b98e:	dba8      	blt.n	800b8e2 <_strtod_l+0x40a>
 800b990:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b992:	eba3 0808 	sub.w	r8, r3, r8
 800b996:	4b34      	ldr	r3, [pc, #208]	@ (800ba68 <_strtod_l+0x590>)
 800b998:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b99c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b9a0:	4650      	mov	r0, sl
 800b9a2:	4659      	mov	r1, fp
 800b9a4:	f7f4 ff52 	bl	800084c <__aeabi_ddiv>
 800b9a8:	e782      	b.n	800b8b0 <_strtod_l+0x3d8>
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	4f2f      	ldr	r7, [pc, #188]	@ (800ba6c <_strtod_l+0x594>)
 800b9ae:	1124      	asrs	r4, r4, #4
 800b9b0:	4650      	mov	r0, sl
 800b9b2:	4659      	mov	r1, fp
 800b9b4:	461e      	mov	r6, r3
 800b9b6:	2c01      	cmp	r4, #1
 800b9b8:	dc21      	bgt.n	800b9fe <_strtod_l+0x526>
 800b9ba:	b10b      	cbz	r3, 800b9c0 <_strtod_l+0x4e8>
 800b9bc:	4682      	mov	sl, r0
 800b9be:	468b      	mov	fp, r1
 800b9c0:	492a      	ldr	r1, [pc, #168]	@ (800ba6c <_strtod_l+0x594>)
 800b9c2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b9c6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b9ca:	4652      	mov	r2, sl
 800b9cc:	465b      	mov	r3, fp
 800b9ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9d2:	f7f4 fe11 	bl	80005f8 <__aeabi_dmul>
 800b9d6:	4b26      	ldr	r3, [pc, #152]	@ (800ba70 <_strtod_l+0x598>)
 800b9d8:	460a      	mov	r2, r1
 800b9da:	400b      	ands	r3, r1
 800b9dc:	4925      	ldr	r1, [pc, #148]	@ (800ba74 <_strtod_l+0x59c>)
 800b9de:	428b      	cmp	r3, r1
 800b9e0:	4682      	mov	sl, r0
 800b9e2:	d898      	bhi.n	800b916 <_strtod_l+0x43e>
 800b9e4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b9e8:	428b      	cmp	r3, r1
 800b9ea:	bf86      	itte	hi
 800b9ec:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800ba78 <_strtod_l+0x5a0>
 800b9f0:	f04f 3aff 	movhi.w	sl, #4294967295
 800b9f4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	9308      	str	r3, [sp, #32]
 800b9fc:	e076      	b.n	800baec <_strtod_l+0x614>
 800b9fe:	07e2      	lsls	r2, r4, #31
 800ba00:	d504      	bpl.n	800ba0c <_strtod_l+0x534>
 800ba02:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba06:	f7f4 fdf7 	bl	80005f8 <__aeabi_dmul>
 800ba0a:	2301      	movs	r3, #1
 800ba0c:	3601      	adds	r6, #1
 800ba0e:	1064      	asrs	r4, r4, #1
 800ba10:	3708      	adds	r7, #8
 800ba12:	e7d0      	b.n	800b9b6 <_strtod_l+0x4de>
 800ba14:	d0f0      	beq.n	800b9f8 <_strtod_l+0x520>
 800ba16:	4264      	negs	r4, r4
 800ba18:	f014 020f 	ands.w	r2, r4, #15
 800ba1c:	d00a      	beq.n	800ba34 <_strtod_l+0x55c>
 800ba1e:	4b12      	ldr	r3, [pc, #72]	@ (800ba68 <_strtod_l+0x590>)
 800ba20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba24:	4650      	mov	r0, sl
 800ba26:	4659      	mov	r1, fp
 800ba28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba2c:	f7f4 ff0e 	bl	800084c <__aeabi_ddiv>
 800ba30:	4682      	mov	sl, r0
 800ba32:	468b      	mov	fp, r1
 800ba34:	1124      	asrs	r4, r4, #4
 800ba36:	d0df      	beq.n	800b9f8 <_strtod_l+0x520>
 800ba38:	2c1f      	cmp	r4, #31
 800ba3a:	dd1f      	ble.n	800ba7c <_strtod_l+0x5a4>
 800ba3c:	2400      	movs	r4, #0
 800ba3e:	46a0      	mov	r8, r4
 800ba40:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ba42:	46a1      	mov	r9, r4
 800ba44:	9a05      	ldr	r2, [sp, #20]
 800ba46:	2322      	movs	r3, #34	@ 0x22
 800ba48:	f04f 0a00 	mov.w	sl, #0
 800ba4c:	f04f 0b00 	mov.w	fp, #0
 800ba50:	6013      	str	r3, [r2, #0]
 800ba52:	e76b      	b.n	800b92c <_strtod_l+0x454>
 800ba54:	0800dbb9 	.word	0x0800dbb9
 800ba58:	0800de98 	.word	0x0800de98
 800ba5c:	0800dbb1 	.word	0x0800dbb1
 800ba60:	0800dbe6 	.word	0x0800dbe6
 800ba64:	0800dd3a 	.word	0x0800dd3a
 800ba68:	0800ddd0 	.word	0x0800ddd0
 800ba6c:	0800dda8 	.word	0x0800dda8
 800ba70:	7ff00000 	.word	0x7ff00000
 800ba74:	7ca00000 	.word	0x7ca00000
 800ba78:	7fefffff 	.word	0x7fefffff
 800ba7c:	f014 0310 	ands.w	r3, r4, #16
 800ba80:	bf18      	it	ne
 800ba82:	236a      	movne	r3, #106	@ 0x6a
 800ba84:	4ea9      	ldr	r6, [pc, #676]	@ (800bd2c <_strtod_l+0x854>)
 800ba86:	9308      	str	r3, [sp, #32]
 800ba88:	4650      	mov	r0, sl
 800ba8a:	4659      	mov	r1, fp
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	07e7      	lsls	r7, r4, #31
 800ba90:	d504      	bpl.n	800ba9c <_strtod_l+0x5c4>
 800ba92:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ba96:	f7f4 fdaf 	bl	80005f8 <__aeabi_dmul>
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	1064      	asrs	r4, r4, #1
 800ba9e:	f106 0608 	add.w	r6, r6, #8
 800baa2:	d1f4      	bne.n	800ba8e <_strtod_l+0x5b6>
 800baa4:	b10b      	cbz	r3, 800baaa <_strtod_l+0x5d2>
 800baa6:	4682      	mov	sl, r0
 800baa8:	468b      	mov	fp, r1
 800baaa:	9b08      	ldr	r3, [sp, #32]
 800baac:	b1b3      	cbz	r3, 800badc <_strtod_l+0x604>
 800baae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800bab2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	4659      	mov	r1, fp
 800baba:	dd0f      	ble.n	800badc <_strtod_l+0x604>
 800babc:	2b1f      	cmp	r3, #31
 800babe:	dd56      	ble.n	800bb6e <_strtod_l+0x696>
 800bac0:	2b34      	cmp	r3, #52	@ 0x34
 800bac2:	bfde      	ittt	le
 800bac4:	f04f 33ff 	movle.w	r3, #4294967295
 800bac8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800bacc:	4093      	lslle	r3, r2
 800bace:	f04f 0a00 	mov.w	sl, #0
 800bad2:	bfcc      	ite	gt
 800bad4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800bad8:	ea03 0b01 	andle.w	fp, r3, r1
 800badc:	2200      	movs	r2, #0
 800bade:	2300      	movs	r3, #0
 800bae0:	4650      	mov	r0, sl
 800bae2:	4659      	mov	r1, fp
 800bae4:	f7f4 fff0 	bl	8000ac8 <__aeabi_dcmpeq>
 800bae8:	2800      	cmp	r0, #0
 800baea:	d1a7      	bne.n	800ba3c <_strtod_l+0x564>
 800baec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800baee:	9300      	str	r3, [sp, #0]
 800baf0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800baf2:	9805      	ldr	r0, [sp, #20]
 800baf4:	462b      	mov	r3, r5
 800baf6:	464a      	mov	r2, r9
 800baf8:	f7ff f8ce 	bl	800ac98 <__s2b>
 800bafc:	900b      	str	r0, [sp, #44]	@ 0x2c
 800bafe:	2800      	cmp	r0, #0
 800bb00:	f43f af09 	beq.w	800b916 <_strtod_l+0x43e>
 800bb04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bb08:	2a00      	cmp	r2, #0
 800bb0a:	eba3 0308 	sub.w	r3, r3, r8
 800bb0e:	bfa8      	it	ge
 800bb10:	2300      	movge	r3, #0
 800bb12:	9312      	str	r3, [sp, #72]	@ 0x48
 800bb14:	2400      	movs	r4, #0
 800bb16:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bb1a:	9316      	str	r3, [sp, #88]	@ 0x58
 800bb1c:	46a0      	mov	r8, r4
 800bb1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb20:	9805      	ldr	r0, [sp, #20]
 800bb22:	6859      	ldr	r1, [r3, #4]
 800bb24:	f7ff f810 	bl	800ab48 <_Balloc>
 800bb28:	4681      	mov	r9, r0
 800bb2a:	2800      	cmp	r0, #0
 800bb2c:	f43f aef7 	beq.w	800b91e <_strtod_l+0x446>
 800bb30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb32:	691a      	ldr	r2, [r3, #16]
 800bb34:	3202      	adds	r2, #2
 800bb36:	f103 010c 	add.w	r1, r3, #12
 800bb3a:	0092      	lsls	r2, r2, #2
 800bb3c:	300c      	adds	r0, #12
 800bb3e:	f001 fac9 	bl	800d0d4 <memcpy>
 800bb42:	ec4b ab10 	vmov	d0, sl, fp
 800bb46:	9805      	ldr	r0, [sp, #20]
 800bb48:	aa1c      	add	r2, sp, #112	@ 0x70
 800bb4a:	a91b      	add	r1, sp, #108	@ 0x6c
 800bb4c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800bb50:	f7ff fbd6 	bl	800b300 <__d2b>
 800bb54:	901a      	str	r0, [sp, #104]	@ 0x68
 800bb56:	2800      	cmp	r0, #0
 800bb58:	f43f aee1 	beq.w	800b91e <_strtod_l+0x446>
 800bb5c:	9805      	ldr	r0, [sp, #20]
 800bb5e:	2101      	movs	r1, #1
 800bb60:	f7ff f930 	bl	800adc4 <__i2b>
 800bb64:	4680      	mov	r8, r0
 800bb66:	b948      	cbnz	r0, 800bb7c <_strtod_l+0x6a4>
 800bb68:	f04f 0800 	mov.w	r8, #0
 800bb6c:	e6d7      	b.n	800b91e <_strtod_l+0x446>
 800bb6e:	f04f 32ff 	mov.w	r2, #4294967295
 800bb72:	fa02 f303 	lsl.w	r3, r2, r3
 800bb76:	ea03 0a0a 	and.w	sl, r3, sl
 800bb7a:	e7af      	b.n	800badc <_strtod_l+0x604>
 800bb7c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800bb7e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bb80:	2d00      	cmp	r5, #0
 800bb82:	bfab      	itete	ge
 800bb84:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800bb86:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800bb88:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800bb8a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800bb8c:	bfac      	ite	ge
 800bb8e:	18ef      	addge	r7, r5, r3
 800bb90:	1b5e      	sublt	r6, r3, r5
 800bb92:	9b08      	ldr	r3, [sp, #32]
 800bb94:	1aed      	subs	r5, r5, r3
 800bb96:	4415      	add	r5, r2
 800bb98:	4b65      	ldr	r3, [pc, #404]	@ (800bd30 <_strtod_l+0x858>)
 800bb9a:	3d01      	subs	r5, #1
 800bb9c:	429d      	cmp	r5, r3
 800bb9e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800bba2:	da50      	bge.n	800bc46 <_strtod_l+0x76e>
 800bba4:	1b5b      	subs	r3, r3, r5
 800bba6:	2b1f      	cmp	r3, #31
 800bba8:	eba2 0203 	sub.w	r2, r2, r3
 800bbac:	f04f 0101 	mov.w	r1, #1
 800bbb0:	dc3d      	bgt.n	800bc2e <_strtod_l+0x756>
 800bbb2:	fa01 f303 	lsl.w	r3, r1, r3
 800bbb6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bbb8:	2300      	movs	r3, #0
 800bbba:	9310      	str	r3, [sp, #64]	@ 0x40
 800bbbc:	18bd      	adds	r5, r7, r2
 800bbbe:	9b08      	ldr	r3, [sp, #32]
 800bbc0:	42af      	cmp	r7, r5
 800bbc2:	4416      	add	r6, r2
 800bbc4:	441e      	add	r6, r3
 800bbc6:	463b      	mov	r3, r7
 800bbc8:	bfa8      	it	ge
 800bbca:	462b      	movge	r3, r5
 800bbcc:	42b3      	cmp	r3, r6
 800bbce:	bfa8      	it	ge
 800bbd0:	4633      	movge	r3, r6
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	bfc2      	ittt	gt
 800bbd6:	1aed      	subgt	r5, r5, r3
 800bbd8:	1af6      	subgt	r6, r6, r3
 800bbda:	1aff      	subgt	r7, r7, r3
 800bbdc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	dd16      	ble.n	800bc10 <_strtod_l+0x738>
 800bbe2:	4641      	mov	r1, r8
 800bbe4:	9805      	ldr	r0, [sp, #20]
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	f7ff f9a4 	bl	800af34 <__pow5mult>
 800bbec:	4680      	mov	r8, r0
 800bbee:	2800      	cmp	r0, #0
 800bbf0:	d0ba      	beq.n	800bb68 <_strtod_l+0x690>
 800bbf2:	4601      	mov	r1, r0
 800bbf4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800bbf6:	9805      	ldr	r0, [sp, #20]
 800bbf8:	f7ff f8fa 	bl	800adf0 <__multiply>
 800bbfc:	900a      	str	r0, [sp, #40]	@ 0x28
 800bbfe:	2800      	cmp	r0, #0
 800bc00:	f43f ae8d 	beq.w	800b91e <_strtod_l+0x446>
 800bc04:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bc06:	9805      	ldr	r0, [sp, #20]
 800bc08:	f7fe ffde 	bl	800abc8 <_Bfree>
 800bc0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bc0e:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc10:	2d00      	cmp	r5, #0
 800bc12:	dc1d      	bgt.n	800bc50 <_strtod_l+0x778>
 800bc14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	dd23      	ble.n	800bc62 <_strtod_l+0x78a>
 800bc1a:	4649      	mov	r1, r9
 800bc1c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800bc1e:	9805      	ldr	r0, [sp, #20]
 800bc20:	f7ff f988 	bl	800af34 <__pow5mult>
 800bc24:	4681      	mov	r9, r0
 800bc26:	b9e0      	cbnz	r0, 800bc62 <_strtod_l+0x78a>
 800bc28:	f04f 0900 	mov.w	r9, #0
 800bc2c:	e677      	b.n	800b91e <_strtod_l+0x446>
 800bc2e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800bc32:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800bc36:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800bc3a:	35e2      	adds	r5, #226	@ 0xe2
 800bc3c:	fa01 f305 	lsl.w	r3, r1, r5
 800bc40:	9310      	str	r3, [sp, #64]	@ 0x40
 800bc42:	9113      	str	r1, [sp, #76]	@ 0x4c
 800bc44:	e7ba      	b.n	800bbbc <_strtod_l+0x6e4>
 800bc46:	2300      	movs	r3, #0
 800bc48:	9310      	str	r3, [sp, #64]	@ 0x40
 800bc4a:	2301      	movs	r3, #1
 800bc4c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bc4e:	e7b5      	b.n	800bbbc <_strtod_l+0x6e4>
 800bc50:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bc52:	9805      	ldr	r0, [sp, #20]
 800bc54:	462a      	mov	r2, r5
 800bc56:	f7ff f9c7 	bl	800afe8 <__lshift>
 800bc5a:	901a      	str	r0, [sp, #104]	@ 0x68
 800bc5c:	2800      	cmp	r0, #0
 800bc5e:	d1d9      	bne.n	800bc14 <_strtod_l+0x73c>
 800bc60:	e65d      	b.n	800b91e <_strtod_l+0x446>
 800bc62:	2e00      	cmp	r6, #0
 800bc64:	dd07      	ble.n	800bc76 <_strtod_l+0x79e>
 800bc66:	4649      	mov	r1, r9
 800bc68:	9805      	ldr	r0, [sp, #20]
 800bc6a:	4632      	mov	r2, r6
 800bc6c:	f7ff f9bc 	bl	800afe8 <__lshift>
 800bc70:	4681      	mov	r9, r0
 800bc72:	2800      	cmp	r0, #0
 800bc74:	d0d8      	beq.n	800bc28 <_strtod_l+0x750>
 800bc76:	2f00      	cmp	r7, #0
 800bc78:	dd08      	ble.n	800bc8c <_strtod_l+0x7b4>
 800bc7a:	4641      	mov	r1, r8
 800bc7c:	9805      	ldr	r0, [sp, #20]
 800bc7e:	463a      	mov	r2, r7
 800bc80:	f7ff f9b2 	bl	800afe8 <__lshift>
 800bc84:	4680      	mov	r8, r0
 800bc86:	2800      	cmp	r0, #0
 800bc88:	f43f ae49 	beq.w	800b91e <_strtod_l+0x446>
 800bc8c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800bc8e:	9805      	ldr	r0, [sp, #20]
 800bc90:	464a      	mov	r2, r9
 800bc92:	f7ff fa31 	bl	800b0f8 <__mdiff>
 800bc96:	4604      	mov	r4, r0
 800bc98:	2800      	cmp	r0, #0
 800bc9a:	f43f ae40 	beq.w	800b91e <_strtod_l+0x446>
 800bc9e:	68c3      	ldr	r3, [r0, #12]
 800bca0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bca2:	2300      	movs	r3, #0
 800bca4:	60c3      	str	r3, [r0, #12]
 800bca6:	4641      	mov	r1, r8
 800bca8:	f7ff fa0a 	bl	800b0c0 <__mcmp>
 800bcac:	2800      	cmp	r0, #0
 800bcae:	da45      	bge.n	800bd3c <_strtod_l+0x864>
 800bcb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bcb2:	ea53 030a 	orrs.w	r3, r3, sl
 800bcb6:	d16b      	bne.n	800bd90 <_strtod_l+0x8b8>
 800bcb8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d167      	bne.n	800bd90 <_strtod_l+0x8b8>
 800bcc0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bcc4:	0d1b      	lsrs	r3, r3, #20
 800bcc6:	051b      	lsls	r3, r3, #20
 800bcc8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bccc:	d960      	bls.n	800bd90 <_strtod_l+0x8b8>
 800bcce:	6963      	ldr	r3, [r4, #20]
 800bcd0:	b913      	cbnz	r3, 800bcd8 <_strtod_l+0x800>
 800bcd2:	6923      	ldr	r3, [r4, #16]
 800bcd4:	2b01      	cmp	r3, #1
 800bcd6:	dd5b      	ble.n	800bd90 <_strtod_l+0x8b8>
 800bcd8:	4621      	mov	r1, r4
 800bcda:	2201      	movs	r2, #1
 800bcdc:	9805      	ldr	r0, [sp, #20]
 800bcde:	f7ff f983 	bl	800afe8 <__lshift>
 800bce2:	4641      	mov	r1, r8
 800bce4:	4604      	mov	r4, r0
 800bce6:	f7ff f9eb 	bl	800b0c0 <__mcmp>
 800bcea:	2800      	cmp	r0, #0
 800bcec:	dd50      	ble.n	800bd90 <_strtod_l+0x8b8>
 800bcee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bcf2:	9a08      	ldr	r2, [sp, #32]
 800bcf4:	0d1b      	lsrs	r3, r3, #20
 800bcf6:	051b      	lsls	r3, r3, #20
 800bcf8:	2a00      	cmp	r2, #0
 800bcfa:	d06a      	beq.n	800bdd2 <_strtod_l+0x8fa>
 800bcfc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800bd00:	d867      	bhi.n	800bdd2 <_strtod_l+0x8fa>
 800bd02:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800bd06:	f67f ae9d 	bls.w	800ba44 <_strtod_l+0x56c>
 800bd0a:	4b0a      	ldr	r3, [pc, #40]	@ (800bd34 <_strtod_l+0x85c>)
 800bd0c:	4650      	mov	r0, sl
 800bd0e:	4659      	mov	r1, fp
 800bd10:	2200      	movs	r2, #0
 800bd12:	f7f4 fc71 	bl	80005f8 <__aeabi_dmul>
 800bd16:	4b08      	ldr	r3, [pc, #32]	@ (800bd38 <_strtod_l+0x860>)
 800bd18:	400b      	ands	r3, r1
 800bd1a:	4682      	mov	sl, r0
 800bd1c:	468b      	mov	fp, r1
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	f47f ae08 	bne.w	800b934 <_strtod_l+0x45c>
 800bd24:	9a05      	ldr	r2, [sp, #20]
 800bd26:	2322      	movs	r3, #34	@ 0x22
 800bd28:	6013      	str	r3, [r2, #0]
 800bd2a:	e603      	b.n	800b934 <_strtod_l+0x45c>
 800bd2c:	0800dec0 	.word	0x0800dec0
 800bd30:	fffffc02 	.word	0xfffffc02
 800bd34:	39500000 	.word	0x39500000
 800bd38:	7ff00000 	.word	0x7ff00000
 800bd3c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800bd40:	d165      	bne.n	800be0e <_strtod_l+0x936>
 800bd42:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800bd44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bd48:	b35a      	cbz	r2, 800bda2 <_strtod_l+0x8ca>
 800bd4a:	4a9f      	ldr	r2, [pc, #636]	@ (800bfc8 <_strtod_l+0xaf0>)
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	d12b      	bne.n	800bda8 <_strtod_l+0x8d0>
 800bd50:	9b08      	ldr	r3, [sp, #32]
 800bd52:	4651      	mov	r1, sl
 800bd54:	b303      	cbz	r3, 800bd98 <_strtod_l+0x8c0>
 800bd56:	4b9d      	ldr	r3, [pc, #628]	@ (800bfcc <_strtod_l+0xaf4>)
 800bd58:	465a      	mov	r2, fp
 800bd5a:	4013      	ands	r3, r2
 800bd5c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800bd60:	f04f 32ff 	mov.w	r2, #4294967295
 800bd64:	d81b      	bhi.n	800bd9e <_strtod_l+0x8c6>
 800bd66:	0d1b      	lsrs	r3, r3, #20
 800bd68:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800bd6c:	fa02 f303 	lsl.w	r3, r2, r3
 800bd70:	4299      	cmp	r1, r3
 800bd72:	d119      	bne.n	800bda8 <_strtod_l+0x8d0>
 800bd74:	4b96      	ldr	r3, [pc, #600]	@ (800bfd0 <_strtod_l+0xaf8>)
 800bd76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bd78:	429a      	cmp	r2, r3
 800bd7a:	d102      	bne.n	800bd82 <_strtod_l+0x8aa>
 800bd7c:	3101      	adds	r1, #1
 800bd7e:	f43f adce 	beq.w	800b91e <_strtod_l+0x446>
 800bd82:	4b92      	ldr	r3, [pc, #584]	@ (800bfcc <_strtod_l+0xaf4>)
 800bd84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bd86:	401a      	ands	r2, r3
 800bd88:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800bd8c:	f04f 0a00 	mov.w	sl, #0
 800bd90:	9b08      	ldr	r3, [sp, #32]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d1b9      	bne.n	800bd0a <_strtod_l+0x832>
 800bd96:	e5cd      	b.n	800b934 <_strtod_l+0x45c>
 800bd98:	f04f 33ff 	mov.w	r3, #4294967295
 800bd9c:	e7e8      	b.n	800bd70 <_strtod_l+0x898>
 800bd9e:	4613      	mov	r3, r2
 800bda0:	e7e6      	b.n	800bd70 <_strtod_l+0x898>
 800bda2:	ea53 030a 	orrs.w	r3, r3, sl
 800bda6:	d0a2      	beq.n	800bcee <_strtod_l+0x816>
 800bda8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bdaa:	b1db      	cbz	r3, 800bde4 <_strtod_l+0x90c>
 800bdac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bdae:	4213      	tst	r3, r2
 800bdb0:	d0ee      	beq.n	800bd90 <_strtod_l+0x8b8>
 800bdb2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bdb4:	9a08      	ldr	r2, [sp, #32]
 800bdb6:	4650      	mov	r0, sl
 800bdb8:	4659      	mov	r1, fp
 800bdba:	b1bb      	cbz	r3, 800bdec <_strtod_l+0x914>
 800bdbc:	f7ff fb6e 	bl	800b49c <sulp>
 800bdc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bdc4:	ec53 2b10 	vmov	r2, r3, d0
 800bdc8:	f7f4 fa60 	bl	800028c <__adddf3>
 800bdcc:	4682      	mov	sl, r0
 800bdce:	468b      	mov	fp, r1
 800bdd0:	e7de      	b.n	800bd90 <_strtod_l+0x8b8>
 800bdd2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bdd6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800bdda:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800bdde:	f04f 3aff 	mov.w	sl, #4294967295
 800bde2:	e7d5      	b.n	800bd90 <_strtod_l+0x8b8>
 800bde4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bde6:	ea13 0f0a 	tst.w	r3, sl
 800bdea:	e7e1      	b.n	800bdb0 <_strtod_l+0x8d8>
 800bdec:	f7ff fb56 	bl	800b49c <sulp>
 800bdf0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bdf4:	ec53 2b10 	vmov	r2, r3, d0
 800bdf8:	f7f4 fa46 	bl	8000288 <__aeabi_dsub>
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	2300      	movs	r3, #0
 800be00:	4682      	mov	sl, r0
 800be02:	468b      	mov	fp, r1
 800be04:	f7f4 fe60 	bl	8000ac8 <__aeabi_dcmpeq>
 800be08:	2800      	cmp	r0, #0
 800be0a:	d0c1      	beq.n	800bd90 <_strtod_l+0x8b8>
 800be0c:	e61a      	b.n	800ba44 <_strtod_l+0x56c>
 800be0e:	4641      	mov	r1, r8
 800be10:	4620      	mov	r0, r4
 800be12:	f7ff facd 	bl	800b3b0 <__ratio>
 800be16:	ec57 6b10 	vmov	r6, r7, d0
 800be1a:	2200      	movs	r2, #0
 800be1c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800be20:	4630      	mov	r0, r6
 800be22:	4639      	mov	r1, r7
 800be24:	f7f4 fe64 	bl	8000af0 <__aeabi_dcmple>
 800be28:	2800      	cmp	r0, #0
 800be2a:	d06f      	beq.n	800bf0c <_strtod_l+0xa34>
 800be2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d17a      	bne.n	800bf28 <_strtod_l+0xa50>
 800be32:	f1ba 0f00 	cmp.w	sl, #0
 800be36:	d158      	bne.n	800beea <_strtod_l+0xa12>
 800be38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d15a      	bne.n	800bef8 <_strtod_l+0xa20>
 800be42:	4b64      	ldr	r3, [pc, #400]	@ (800bfd4 <_strtod_l+0xafc>)
 800be44:	2200      	movs	r2, #0
 800be46:	4630      	mov	r0, r6
 800be48:	4639      	mov	r1, r7
 800be4a:	f7f4 fe47 	bl	8000adc <__aeabi_dcmplt>
 800be4e:	2800      	cmp	r0, #0
 800be50:	d159      	bne.n	800bf06 <_strtod_l+0xa2e>
 800be52:	4630      	mov	r0, r6
 800be54:	4639      	mov	r1, r7
 800be56:	4b60      	ldr	r3, [pc, #384]	@ (800bfd8 <_strtod_l+0xb00>)
 800be58:	2200      	movs	r2, #0
 800be5a:	f7f4 fbcd 	bl	80005f8 <__aeabi_dmul>
 800be5e:	4606      	mov	r6, r0
 800be60:	460f      	mov	r7, r1
 800be62:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800be66:	9606      	str	r6, [sp, #24]
 800be68:	9307      	str	r3, [sp, #28]
 800be6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800be6e:	4d57      	ldr	r5, [pc, #348]	@ (800bfcc <_strtod_l+0xaf4>)
 800be70:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800be74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be76:	401d      	ands	r5, r3
 800be78:	4b58      	ldr	r3, [pc, #352]	@ (800bfdc <_strtod_l+0xb04>)
 800be7a:	429d      	cmp	r5, r3
 800be7c:	f040 80b2 	bne.w	800bfe4 <_strtod_l+0xb0c>
 800be80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be82:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800be86:	ec4b ab10 	vmov	d0, sl, fp
 800be8a:	f7ff f9c9 	bl	800b220 <__ulp>
 800be8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800be92:	ec51 0b10 	vmov	r0, r1, d0
 800be96:	f7f4 fbaf 	bl	80005f8 <__aeabi_dmul>
 800be9a:	4652      	mov	r2, sl
 800be9c:	465b      	mov	r3, fp
 800be9e:	f7f4 f9f5 	bl	800028c <__adddf3>
 800bea2:	460b      	mov	r3, r1
 800bea4:	4949      	ldr	r1, [pc, #292]	@ (800bfcc <_strtod_l+0xaf4>)
 800bea6:	4a4e      	ldr	r2, [pc, #312]	@ (800bfe0 <_strtod_l+0xb08>)
 800bea8:	4019      	ands	r1, r3
 800beaa:	4291      	cmp	r1, r2
 800beac:	4682      	mov	sl, r0
 800beae:	d942      	bls.n	800bf36 <_strtod_l+0xa5e>
 800beb0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800beb2:	4b47      	ldr	r3, [pc, #284]	@ (800bfd0 <_strtod_l+0xaf8>)
 800beb4:	429a      	cmp	r2, r3
 800beb6:	d103      	bne.n	800bec0 <_strtod_l+0x9e8>
 800beb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800beba:	3301      	adds	r3, #1
 800bebc:	f43f ad2f 	beq.w	800b91e <_strtod_l+0x446>
 800bec0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800bfd0 <_strtod_l+0xaf8>
 800bec4:	f04f 3aff 	mov.w	sl, #4294967295
 800bec8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800beca:	9805      	ldr	r0, [sp, #20]
 800becc:	f7fe fe7c 	bl	800abc8 <_Bfree>
 800bed0:	9805      	ldr	r0, [sp, #20]
 800bed2:	4649      	mov	r1, r9
 800bed4:	f7fe fe78 	bl	800abc8 <_Bfree>
 800bed8:	9805      	ldr	r0, [sp, #20]
 800beda:	4641      	mov	r1, r8
 800bedc:	f7fe fe74 	bl	800abc8 <_Bfree>
 800bee0:	9805      	ldr	r0, [sp, #20]
 800bee2:	4621      	mov	r1, r4
 800bee4:	f7fe fe70 	bl	800abc8 <_Bfree>
 800bee8:	e619      	b.n	800bb1e <_strtod_l+0x646>
 800beea:	f1ba 0f01 	cmp.w	sl, #1
 800beee:	d103      	bne.n	800bef8 <_strtod_l+0xa20>
 800bef0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	f43f ada6 	beq.w	800ba44 <_strtod_l+0x56c>
 800bef8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800bfa8 <_strtod_l+0xad0>
 800befc:	4f35      	ldr	r7, [pc, #212]	@ (800bfd4 <_strtod_l+0xafc>)
 800befe:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bf02:	2600      	movs	r6, #0
 800bf04:	e7b1      	b.n	800be6a <_strtod_l+0x992>
 800bf06:	4f34      	ldr	r7, [pc, #208]	@ (800bfd8 <_strtod_l+0xb00>)
 800bf08:	2600      	movs	r6, #0
 800bf0a:	e7aa      	b.n	800be62 <_strtod_l+0x98a>
 800bf0c:	4b32      	ldr	r3, [pc, #200]	@ (800bfd8 <_strtod_l+0xb00>)
 800bf0e:	4630      	mov	r0, r6
 800bf10:	4639      	mov	r1, r7
 800bf12:	2200      	movs	r2, #0
 800bf14:	f7f4 fb70 	bl	80005f8 <__aeabi_dmul>
 800bf18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf1a:	4606      	mov	r6, r0
 800bf1c:	460f      	mov	r7, r1
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d09f      	beq.n	800be62 <_strtod_l+0x98a>
 800bf22:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bf26:	e7a0      	b.n	800be6a <_strtod_l+0x992>
 800bf28:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800bfb0 <_strtod_l+0xad8>
 800bf2c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bf30:	ec57 6b17 	vmov	r6, r7, d7
 800bf34:	e799      	b.n	800be6a <_strtod_l+0x992>
 800bf36:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800bf3a:	9b08      	ldr	r3, [sp, #32]
 800bf3c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d1c1      	bne.n	800bec8 <_strtod_l+0x9f0>
 800bf44:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bf48:	0d1b      	lsrs	r3, r3, #20
 800bf4a:	051b      	lsls	r3, r3, #20
 800bf4c:	429d      	cmp	r5, r3
 800bf4e:	d1bb      	bne.n	800bec8 <_strtod_l+0x9f0>
 800bf50:	4630      	mov	r0, r6
 800bf52:	4639      	mov	r1, r7
 800bf54:	f7f4 feb0 	bl	8000cb8 <__aeabi_d2lz>
 800bf58:	f7f4 fb20 	bl	800059c <__aeabi_l2d>
 800bf5c:	4602      	mov	r2, r0
 800bf5e:	460b      	mov	r3, r1
 800bf60:	4630      	mov	r0, r6
 800bf62:	4639      	mov	r1, r7
 800bf64:	f7f4 f990 	bl	8000288 <__aeabi_dsub>
 800bf68:	460b      	mov	r3, r1
 800bf6a:	4602      	mov	r2, r0
 800bf6c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800bf70:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800bf74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf76:	ea46 060a 	orr.w	r6, r6, sl
 800bf7a:	431e      	orrs	r6, r3
 800bf7c:	d06f      	beq.n	800c05e <_strtod_l+0xb86>
 800bf7e:	a30e      	add	r3, pc, #56	@ (adr r3, 800bfb8 <_strtod_l+0xae0>)
 800bf80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf84:	f7f4 fdaa 	bl	8000adc <__aeabi_dcmplt>
 800bf88:	2800      	cmp	r0, #0
 800bf8a:	f47f acd3 	bne.w	800b934 <_strtod_l+0x45c>
 800bf8e:	a30c      	add	r3, pc, #48	@ (adr r3, 800bfc0 <_strtod_l+0xae8>)
 800bf90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf98:	f7f4 fdbe 	bl	8000b18 <__aeabi_dcmpgt>
 800bf9c:	2800      	cmp	r0, #0
 800bf9e:	d093      	beq.n	800bec8 <_strtod_l+0x9f0>
 800bfa0:	e4c8      	b.n	800b934 <_strtod_l+0x45c>
 800bfa2:	bf00      	nop
 800bfa4:	f3af 8000 	nop.w
 800bfa8:	00000000 	.word	0x00000000
 800bfac:	bff00000 	.word	0xbff00000
 800bfb0:	00000000 	.word	0x00000000
 800bfb4:	3ff00000 	.word	0x3ff00000
 800bfb8:	94a03595 	.word	0x94a03595
 800bfbc:	3fdfffff 	.word	0x3fdfffff
 800bfc0:	35afe535 	.word	0x35afe535
 800bfc4:	3fe00000 	.word	0x3fe00000
 800bfc8:	000fffff 	.word	0x000fffff
 800bfcc:	7ff00000 	.word	0x7ff00000
 800bfd0:	7fefffff 	.word	0x7fefffff
 800bfd4:	3ff00000 	.word	0x3ff00000
 800bfd8:	3fe00000 	.word	0x3fe00000
 800bfdc:	7fe00000 	.word	0x7fe00000
 800bfe0:	7c9fffff 	.word	0x7c9fffff
 800bfe4:	9b08      	ldr	r3, [sp, #32]
 800bfe6:	b323      	cbz	r3, 800c032 <_strtod_l+0xb5a>
 800bfe8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800bfec:	d821      	bhi.n	800c032 <_strtod_l+0xb5a>
 800bfee:	a328      	add	r3, pc, #160	@ (adr r3, 800c090 <_strtod_l+0xbb8>)
 800bff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff4:	4630      	mov	r0, r6
 800bff6:	4639      	mov	r1, r7
 800bff8:	f7f4 fd7a 	bl	8000af0 <__aeabi_dcmple>
 800bffc:	b1a0      	cbz	r0, 800c028 <_strtod_l+0xb50>
 800bffe:	4639      	mov	r1, r7
 800c000:	4630      	mov	r0, r6
 800c002:	f7f4 fdd1 	bl	8000ba8 <__aeabi_d2uiz>
 800c006:	2801      	cmp	r0, #1
 800c008:	bf38      	it	cc
 800c00a:	2001      	movcc	r0, #1
 800c00c:	f7f4 fa7a 	bl	8000504 <__aeabi_ui2d>
 800c010:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c012:	4606      	mov	r6, r0
 800c014:	460f      	mov	r7, r1
 800c016:	b9fb      	cbnz	r3, 800c058 <_strtod_l+0xb80>
 800c018:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c01c:	9014      	str	r0, [sp, #80]	@ 0x50
 800c01e:	9315      	str	r3, [sp, #84]	@ 0x54
 800c020:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800c024:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800c028:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c02a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800c02e:	1b5b      	subs	r3, r3, r5
 800c030:	9311      	str	r3, [sp, #68]	@ 0x44
 800c032:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800c036:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800c03a:	f7ff f8f1 	bl	800b220 <__ulp>
 800c03e:	4650      	mov	r0, sl
 800c040:	ec53 2b10 	vmov	r2, r3, d0
 800c044:	4659      	mov	r1, fp
 800c046:	f7f4 fad7 	bl	80005f8 <__aeabi_dmul>
 800c04a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c04e:	f7f4 f91d 	bl	800028c <__adddf3>
 800c052:	4682      	mov	sl, r0
 800c054:	468b      	mov	fp, r1
 800c056:	e770      	b.n	800bf3a <_strtod_l+0xa62>
 800c058:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800c05c:	e7e0      	b.n	800c020 <_strtod_l+0xb48>
 800c05e:	a30e      	add	r3, pc, #56	@ (adr r3, 800c098 <_strtod_l+0xbc0>)
 800c060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c064:	f7f4 fd3a 	bl	8000adc <__aeabi_dcmplt>
 800c068:	e798      	b.n	800bf9c <_strtod_l+0xac4>
 800c06a:	2300      	movs	r3, #0
 800c06c:	930e      	str	r3, [sp, #56]	@ 0x38
 800c06e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c070:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c072:	6013      	str	r3, [r2, #0]
 800c074:	f7ff ba6d 	b.w	800b552 <_strtod_l+0x7a>
 800c078:	2a65      	cmp	r2, #101	@ 0x65
 800c07a:	f43f ab68 	beq.w	800b74e <_strtod_l+0x276>
 800c07e:	2a45      	cmp	r2, #69	@ 0x45
 800c080:	f43f ab65 	beq.w	800b74e <_strtod_l+0x276>
 800c084:	2301      	movs	r3, #1
 800c086:	f7ff bba0 	b.w	800b7ca <_strtod_l+0x2f2>
 800c08a:	bf00      	nop
 800c08c:	f3af 8000 	nop.w
 800c090:	ffc00000 	.word	0xffc00000
 800c094:	41dfffff 	.word	0x41dfffff
 800c098:	94a03595 	.word	0x94a03595
 800c09c:	3fcfffff 	.word	0x3fcfffff

0800c0a0 <_strtod_r>:
 800c0a0:	4b01      	ldr	r3, [pc, #4]	@ (800c0a8 <_strtod_r+0x8>)
 800c0a2:	f7ff ba19 	b.w	800b4d8 <_strtod_l>
 800c0a6:	bf00      	nop
 800c0a8:	20000068 	.word	0x20000068

0800c0ac <_strtol_l.isra.0>:
 800c0ac:	2b24      	cmp	r3, #36	@ 0x24
 800c0ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0b2:	4686      	mov	lr, r0
 800c0b4:	4690      	mov	r8, r2
 800c0b6:	d801      	bhi.n	800c0bc <_strtol_l.isra.0+0x10>
 800c0b8:	2b01      	cmp	r3, #1
 800c0ba:	d106      	bne.n	800c0ca <_strtol_l.isra.0+0x1e>
 800c0bc:	f7fd fdb8 	bl	8009c30 <__errno>
 800c0c0:	2316      	movs	r3, #22
 800c0c2:	6003      	str	r3, [r0, #0]
 800c0c4:	2000      	movs	r0, #0
 800c0c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0ca:	4834      	ldr	r0, [pc, #208]	@ (800c19c <_strtol_l.isra.0+0xf0>)
 800c0cc:	460d      	mov	r5, r1
 800c0ce:	462a      	mov	r2, r5
 800c0d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c0d4:	5d06      	ldrb	r6, [r0, r4]
 800c0d6:	f016 0608 	ands.w	r6, r6, #8
 800c0da:	d1f8      	bne.n	800c0ce <_strtol_l.isra.0+0x22>
 800c0dc:	2c2d      	cmp	r4, #45	@ 0x2d
 800c0de:	d110      	bne.n	800c102 <_strtol_l.isra.0+0x56>
 800c0e0:	782c      	ldrb	r4, [r5, #0]
 800c0e2:	2601      	movs	r6, #1
 800c0e4:	1c95      	adds	r5, r2, #2
 800c0e6:	f033 0210 	bics.w	r2, r3, #16
 800c0ea:	d115      	bne.n	800c118 <_strtol_l.isra.0+0x6c>
 800c0ec:	2c30      	cmp	r4, #48	@ 0x30
 800c0ee:	d10d      	bne.n	800c10c <_strtol_l.isra.0+0x60>
 800c0f0:	782a      	ldrb	r2, [r5, #0]
 800c0f2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c0f6:	2a58      	cmp	r2, #88	@ 0x58
 800c0f8:	d108      	bne.n	800c10c <_strtol_l.isra.0+0x60>
 800c0fa:	786c      	ldrb	r4, [r5, #1]
 800c0fc:	3502      	adds	r5, #2
 800c0fe:	2310      	movs	r3, #16
 800c100:	e00a      	b.n	800c118 <_strtol_l.isra.0+0x6c>
 800c102:	2c2b      	cmp	r4, #43	@ 0x2b
 800c104:	bf04      	itt	eq
 800c106:	782c      	ldrbeq	r4, [r5, #0]
 800c108:	1c95      	addeq	r5, r2, #2
 800c10a:	e7ec      	b.n	800c0e6 <_strtol_l.isra.0+0x3a>
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d1f6      	bne.n	800c0fe <_strtol_l.isra.0+0x52>
 800c110:	2c30      	cmp	r4, #48	@ 0x30
 800c112:	bf14      	ite	ne
 800c114:	230a      	movne	r3, #10
 800c116:	2308      	moveq	r3, #8
 800c118:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c11c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c120:	2200      	movs	r2, #0
 800c122:	fbbc f9f3 	udiv	r9, ip, r3
 800c126:	4610      	mov	r0, r2
 800c128:	fb03 ca19 	mls	sl, r3, r9, ip
 800c12c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c130:	2f09      	cmp	r7, #9
 800c132:	d80f      	bhi.n	800c154 <_strtol_l.isra.0+0xa8>
 800c134:	463c      	mov	r4, r7
 800c136:	42a3      	cmp	r3, r4
 800c138:	dd1b      	ble.n	800c172 <_strtol_l.isra.0+0xc6>
 800c13a:	1c57      	adds	r7, r2, #1
 800c13c:	d007      	beq.n	800c14e <_strtol_l.isra.0+0xa2>
 800c13e:	4581      	cmp	r9, r0
 800c140:	d314      	bcc.n	800c16c <_strtol_l.isra.0+0xc0>
 800c142:	d101      	bne.n	800c148 <_strtol_l.isra.0+0x9c>
 800c144:	45a2      	cmp	sl, r4
 800c146:	db11      	blt.n	800c16c <_strtol_l.isra.0+0xc0>
 800c148:	fb00 4003 	mla	r0, r0, r3, r4
 800c14c:	2201      	movs	r2, #1
 800c14e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c152:	e7eb      	b.n	800c12c <_strtol_l.isra.0+0x80>
 800c154:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c158:	2f19      	cmp	r7, #25
 800c15a:	d801      	bhi.n	800c160 <_strtol_l.isra.0+0xb4>
 800c15c:	3c37      	subs	r4, #55	@ 0x37
 800c15e:	e7ea      	b.n	800c136 <_strtol_l.isra.0+0x8a>
 800c160:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c164:	2f19      	cmp	r7, #25
 800c166:	d804      	bhi.n	800c172 <_strtol_l.isra.0+0xc6>
 800c168:	3c57      	subs	r4, #87	@ 0x57
 800c16a:	e7e4      	b.n	800c136 <_strtol_l.isra.0+0x8a>
 800c16c:	f04f 32ff 	mov.w	r2, #4294967295
 800c170:	e7ed      	b.n	800c14e <_strtol_l.isra.0+0xa2>
 800c172:	1c53      	adds	r3, r2, #1
 800c174:	d108      	bne.n	800c188 <_strtol_l.isra.0+0xdc>
 800c176:	2322      	movs	r3, #34	@ 0x22
 800c178:	f8ce 3000 	str.w	r3, [lr]
 800c17c:	4660      	mov	r0, ip
 800c17e:	f1b8 0f00 	cmp.w	r8, #0
 800c182:	d0a0      	beq.n	800c0c6 <_strtol_l.isra.0+0x1a>
 800c184:	1e69      	subs	r1, r5, #1
 800c186:	e006      	b.n	800c196 <_strtol_l.isra.0+0xea>
 800c188:	b106      	cbz	r6, 800c18c <_strtol_l.isra.0+0xe0>
 800c18a:	4240      	negs	r0, r0
 800c18c:	f1b8 0f00 	cmp.w	r8, #0
 800c190:	d099      	beq.n	800c0c6 <_strtol_l.isra.0+0x1a>
 800c192:	2a00      	cmp	r2, #0
 800c194:	d1f6      	bne.n	800c184 <_strtol_l.isra.0+0xd8>
 800c196:	f8c8 1000 	str.w	r1, [r8]
 800c19a:	e794      	b.n	800c0c6 <_strtol_l.isra.0+0x1a>
 800c19c:	0800dee9 	.word	0x0800dee9

0800c1a0 <_strtol_r>:
 800c1a0:	f7ff bf84 	b.w	800c0ac <_strtol_l.isra.0>

0800c1a4 <__ssputs_r>:
 800c1a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1a8:	688e      	ldr	r6, [r1, #8]
 800c1aa:	461f      	mov	r7, r3
 800c1ac:	42be      	cmp	r6, r7
 800c1ae:	680b      	ldr	r3, [r1, #0]
 800c1b0:	4682      	mov	sl, r0
 800c1b2:	460c      	mov	r4, r1
 800c1b4:	4690      	mov	r8, r2
 800c1b6:	d82d      	bhi.n	800c214 <__ssputs_r+0x70>
 800c1b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c1bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c1c0:	d026      	beq.n	800c210 <__ssputs_r+0x6c>
 800c1c2:	6965      	ldr	r5, [r4, #20]
 800c1c4:	6909      	ldr	r1, [r1, #16]
 800c1c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c1ca:	eba3 0901 	sub.w	r9, r3, r1
 800c1ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c1d2:	1c7b      	adds	r3, r7, #1
 800c1d4:	444b      	add	r3, r9
 800c1d6:	106d      	asrs	r5, r5, #1
 800c1d8:	429d      	cmp	r5, r3
 800c1da:	bf38      	it	cc
 800c1dc:	461d      	movcc	r5, r3
 800c1de:	0553      	lsls	r3, r2, #21
 800c1e0:	d527      	bpl.n	800c232 <__ssputs_r+0x8e>
 800c1e2:	4629      	mov	r1, r5
 800c1e4:	f7fe fc24 	bl	800aa30 <_malloc_r>
 800c1e8:	4606      	mov	r6, r0
 800c1ea:	b360      	cbz	r0, 800c246 <__ssputs_r+0xa2>
 800c1ec:	6921      	ldr	r1, [r4, #16]
 800c1ee:	464a      	mov	r2, r9
 800c1f0:	f000 ff70 	bl	800d0d4 <memcpy>
 800c1f4:	89a3      	ldrh	r3, [r4, #12]
 800c1f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c1fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1fe:	81a3      	strh	r3, [r4, #12]
 800c200:	6126      	str	r6, [r4, #16]
 800c202:	6165      	str	r5, [r4, #20]
 800c204:	444e      	add	r6, r9
 800c206:	eba5 0509 	sub.w	r5, r5, r9
 800c20a:	6026      	str	r6, [r4, #0]
 800c20c:	60a5      	str	r5, [r4, #8]
 800c20e:	463e      	mov	r6, r7
 800c210:	42be      	cmp	r6, r7
 800c212:	d900      	bls.n	800c216 <__ssputs_r+0x72>
 800c214:	463e      	mov	r6, r7
 800c216:	6820      	ldr	r0, [r4, #0]
 800c218:	4632      	mov	r2, r6
 800c21a:	4641      	mov	r1, r8
 800c21c:	f000 fefb 	bl	800d016 <memmove>
 800c220:	68a3      	ldr	r3, [r4, #8]
 800c222:	1b9b      	subs	r3, r3, r6
 800c224:	60a3      	str	r3, [r4, #8]
 800c226:	6823      	ldr	r3, [r4, #0]
 800c228:	4433      	add	r3, r6
 800c22a:	6023      	str	r3, [r4, #0]
 800c22c:	2000      	movs	r0, #0
 800c22e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c232:	462a      	mov	r2, r5
 800c234:	f001 fae1 	bl	800d7fa <_realloc_r>
 800c238:	4606      	mov	r6, r0
 800c23a:	2800      	cmp	r0, #0
 800c23c:	d1e0      	bne.n	800c200 <__ssputs_r+0x5c>
 800c23e:	6921      	ldr	r1, [r4, #16]
 800c240:	4650      	mov	r0, sl
 800c242:	f7fe fb81 	bl	800a948 <_free_r>
 800c246:	230c      	movs	r3, #12
 800c248:	f8ca 3000 	str.w	r3, [sl]
 800c24c:	89a3      	ldrh	r3, [r4, #12]
 800c24e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c252:	81a3      	strh	r3, [r4, #12]
 800c254:	f04f 30ff 	mov.w	r0, #4294967295
 800c258:	e7e9      	b.n	800c22e <__ssputs_r+0x8a>
	...

0800c25c <_svfiprintf_r>:
 800c25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c260:	4698      	mov	r8, r3
 800c262:	898b      	ldrh	r3, [r1, #12]
 800c264:	061b      	lsls	r3, r3, #24
 800c266:	b09d      	sub	sp, #116	@ 0x74
 800c268:	4607      	mov	r7, r0
 800c26a:	460d      	mov	r5, r1
 800c26c:	4614      	mov	r4, r2
 800c26e:	d510      	bpl.n	800c292 <_svfiprintf_r+0x36>
 800c270:	690b      	ldr	r3, [r1, #16]
 800c272:	b973      	cbnz	r3, 800c292 <_svfiprintf_r+0x36>
 800c274:	2140      	movs	r1, #64	@ 0x40
 800c276:	f7fe fbdb 	bl	800aa30 <_malloc_r>
 800c27a:	6028      	str	r0, [r5, #0]
 800c27c:	6128      	str	r0, [r5, #16]
 800c27e:	b930      	cbnz	r0, 800c28e <_svfiprintf_r+0x32>
 800c280:	230c      	movs	r3, #12
 800c282:	603b      	str	r3, [r7, #0]
 800c284:	f04f 30ff 	mov.w	r0, #4294967295
 800c288:	b01d      	add	sp, #116	@ 0x74
 800c28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c28e:	2340      	movs	r3, #64	@ 0x40
 800c290:	616b      	str	r3, [r5, #20]
 800c292:	2300      	movs	r3, #0
 800c294:	9309      	str	r3, [sp, #36]	@ 0x24
 800c296:	2320      	movs	r3, #32
 800c298:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c29c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2a0:	2330      	movs	r3, #48	@ 0x30
 800c2a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c440 <_svfiprintf_r+0x1e4>
 800c2a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c2aa:	f04f 0901 	mov.w	r9, #1
 800c2ae:	4623      	mov	r3, r4
 800c2b0:	469a      	mov	sl, r3
 800c2b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2b6:	b10a      	cbz	r2, 800c2bc <_svfiprintf_r+0x60>
 800c2b8:	2a25      	cmp	r2, #37	@ 0x25
 800c2ba:	d1f9      	bne.n	800c2b0 <_svfiprintf_r+0x54>
 800c2bc:	ebba 0b04 	subs.w	fp, sl, r4
 800c2c0:	d00b      	beq.n	800c2da <_svfiprintf_r+0x7e>
 800c2c2:	465b      	mov	r3, fp
 800c2c4:	4622      	mov	r2, r4
 800c2c6:	4629      	mov	r1, r5
 800c2c8:	4638      	mov	r0, r7
 800c2ca:	f7ff ff6b 	bl	800c1a4 <__ssputs_r>
 800c2ce:	3001      	adds	r0, #1
 800c2d0:	f000 80a7 	beq.w	800c422 <_svfiprintf_r+0x1c6>
 800c2d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c2d6:	445a      	add	r2, fp
 800c2d8:	9209      	str	r2, [sp, #36]	@ 0x24
 800c2da:	f89a 3000 	ldrb.w	r3, [sl]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	f000 809f 	beq.w	800c422 <_svfiprintf_r+0x1c6>
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	f04f 32ff 	mov.w	r2, #4294967295
 800c2ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2ee:	f10a 0a01 	add.w	sl, sl, #1
 800c2f2:	9304      	str	r3, [sp, #16]
 800c2f4:	9307      	str	r3, [sp, #28]
 800c2f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c2fa:	931a      	str	r3, [sp, #104]	@ 0x68
 800c2fc:	4654      	mov	r4, sl
 800c2fe:	2205      	movs	r2, #5
 800c300:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c304:	484e      	ldr	r0, [pc, #312]	@ (800c440 <_svfiprintf_r+0x1e4>)
 800c306:	f7f3 ff63 	bl	80001d0 <memchr>
 800c30a:	9a04      	ldr	r2, [sp, #16]
 800c30c:	b9d8      	cbnz	r0, 800c346 <_svfiprintf_r+0xea>
 800c30e:	06d0      	lsls	r0, r2, #27
 800c310:	bf44      	itt	mi
 800c312:	2320      	movmi	r3, #32
 800c314:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c318:	0711      	lsls	r1, r2, #28
 800c31a:	bf44      	itt	mi
 800c31c:	232b      	movmi	r3, #43	@ 0x2b
 800c31e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c322:	f89a 3000 	ldrb.w	r3, [sl]
 800c326:	2b2a      	cmp	r3, #42	@ 0x2a
 800c328:	d015      	beq.n	800c356 <_svfiprintf_r+0xfa>
 800c32a:	9a07      	ldr	r2, [sp, #28]
 800c32c:	4654      	mov	r4, sl
 800c32e:	2000      	movs	r0, #0
 800c330:	f04f 0c0a 	mov.w	ip, #10
 800c334:	4621      	mov	r1, r4
 800c336:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c33a:	3b30      	subs	r3, #48	@ 0x30
 800c33c:	2b09      	cmp	r3, #9
 800c33e:	d94b      	bls.n	800c3d8 <_svfiprintf_r+0x17c>
 800c340:	b1b0      	cbz	r0, 800c370 <_svfiprintf_r+0x114>
 800c342:	9207      	str	r2, [sp, #28]
 800c344:	e014      	b.n	800c370 <_svfiprintf_r+0x114>
 800c346:	eba0 0308 	sub.w	r3, r0, r8
 800c34a:	fa09 f303 	lsl.w	r3, r9, r3
 800c34e:	4313      	orrs	r3, r2
 800c350:	9304      	str	r3, [sp, #16]
 800c352:	46a2      	mov	sl, r4
 800c354:	e7d2      	b.n	800c2fc <_svfiprintf_r+0xa0>
 800c356:	9b03      	ldr	r3, [sp, #12]
 800c358:	1d19      	adds	r1, r3, #4
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	9103      	str	r1, [sp, #12]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	bfbb      	ittet	lt
 800c362:	425b      	neglt	r3, r3
 800c364:	f042 0202 	orrlt.w	r2, r2, #2
 800c368:	9307      	strge	r3, [sp, #28]
 800c36a:	9307      	strlt	r3, [sp, #28]
 800c36c:	bfb8      	it	lt
 800c36e:	9204      	strlt	r2, [sp, #16]
 800c370:	7823      	ldrb	r3, [r4, #0]
 800c372:	2b2e      	cmp	r3, #46	@ 0x2e
 800c374:	d10a      	bne.n	800c38c <_svfiprintf_r+0x130>
 800c376:	7863      	ldrb	r3, [r4, #1]
 800c378:	2b2a      	cmp	r3, #42	@ 0x2a
 800c37a:	d132      	bne.n	800c3e2 <_svfiprintf_r+0x186>
 800c37c:	9b03      	ldr	r3, [sp, #12]
 800c37e:	1d1a      	adds	r2, r3, #4
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	9203      	str	r2, [sp, #12]
 800c384:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c388:	3402      	adds	r4, #2
 800c38a:	9305      	str	r3, [sp, #20]
 800c38c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c450 <_svfiprintf_r+0x1f4>
 800c390:	7821      	ldrb	r1, [r4, #0]
 800c392:	2203      	movs	r2, #3
 800c394:	4650      	mov	r0, sl
 800c396:	f7f3 ff1b 	bl	80001d0 <memchr>
 800c39a:	b138      	cbz	r0, 800c3ac <_svfiprintf_r+0x150>
 800c39c:	9b04      	ldr	r3, [sp, #16]
 800c39e:	eba0 000a 	sub.w	r0, r0, sl
 800c3a2:	2240      	movs	r2, #64	@ 0x40
 800c3a4:	4082      	lsls	r2, r0
 800c3a6:	4313      	orrs	r3, r2
 800c3a8:	3401      	adds	r4, #1
 800c3aa:	9304      	str	r3, [sp, #16]
 800c3ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3b0:	4824      	ldr	r0, [pc, #144]	@ (800c444 <_svfiprintf_r+0x1e8>)
 800c3b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c3b6:	2206      	movs	r2, #6
 800c3b8:	f7f3 ff0a 	bl	80001d0 <memchr>
 800c3bc:	2800      	cmp	r0, #0
 800c3be:	d036      	beq.n	800c42e <_svfiprintf_r+0x1d2>
 800c3c0:	4b21      	ldr	r3, [pc, #132]	@ (800c448 <_svfiprintf_r+0x1ec>)
 800c3c2:	bb1b      	cbnz	r3, 800c40c <_svfiprintf_r+0x1b0>
 800c3c4:	9b03      	ldr	r3, [sp, #12]
 800c3c6:	3307      	adds	r3, #7
 800c3c8:	f023 0307 	bic.w	r3, r3, #7
 800c3cc:	3308      	adds	r3, #8
 800c3ce:	9303      	str	r3, [sp, #12]
 800c3d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c3d2:	4433      	add	r3, r6
 800c3d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3d6:	e76a      	b.n	800c2ae <_svfiprintf_r+0x52>
 800c3d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3dc:	460c      	mov	r4, r1
 800c3de:	2001      	movs	r0, #1
 800c3e0:	e7a8      	b.n	800c334 <_svfiprintf_r+0xd8>
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	3401      	adds	r4, #1
 800c3e6:	9305      	str	r3, [sp, #20]
 800c3e8:	4619      	mov	r1, r3
 800c3ea:	f04f 0c0a 	mov.w	ip, #10
 800c3ee:	4620      	mov	r0, r4
 800c3f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3f4:	3a30      	subs	r2, #48	@ 0x30
 800c3f6:	2a09      	cmp	r2, #9
 800c3f8:	d903      	bls.n	800c402 <_svfiprintf_r+0x1a6>
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d0c6      	beq.n	800c38c <_svfiprintf_r+0x130>
 800c3fe:	9105      	str	r1, [sp, #20]
 800c400:	e7c4      	b.n	800c38c <_svfiprintf_r+0x130>
 800c402:	fb0c 2101 	mla	r1, ip, r1, r2
 800c406:	4604      	mov	r4, r0
 800c408:	2301      	movs	r3, #1
 800c40a:	e7f0      	b.n	800c3ee <_svfiprintf_r+0x192>
 800c40c:	ab03      	add	r3, sp, #12
 800c40e:	9300      	str	r3, [sp, #0]
 800c410:	462a      	mov	r2, r5
 800c412:	4b0e      	ldr	r3, [pc, #56]	@ (800c44c <_svfiprintf_r+0x1f0>)
 800c414:	a904      	add	r1, sp, #16
 800c416:	4638      	mov	r0, r7
 800c418:	f7fc fab0 	bl	800897c <_printf_float>
 800c41c:	1c42      	adds	r2, r0, #1
 800c41e:	4606      	mov	r6, r0
 800c420:	d1d6      	bne.n	800c3d0 <_svfiprintf_r+0x174>
 800c422:	89ab      	ldrh	r3, [r5, #12]
 800c424:	065b      	lsls	r3, r3, #25
 800c426:	f53f af2d 	bmi.w	800c284 <_svfiprintf_r+0x28>
 800c42a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c42c:	e72c      	b.n	800c288 <_svfiprintf_r+0x2c>
 800c42e:	ab03      	add	r3, sp, #12
 800c430:	9300      	str	r3, [sp, #0]
 800c432:	462a      	mov	r2, r5
 800c434:	4b05      	ldr	r3, [pc, #20]	@ (800c44c <_svfiprintf_r+0x1f0>)
 800c436:	a904      	add	r1, sp, #16
 800c438:	4638      	mov	r0, r7
 800c43a:	f7fc fd37 	bl	8008eac <_printf_i>
 800c43e:	e7ed      	b.n	800c41c <_svfiprintf_r+0x1c0>
 800c440:	0800dccb 	.word	0x0800dccb
 800c444:	0800dcd5 	.word	0x0800dcd5
 800c448:	0800897d 	.word	0x0800897d
 800c44c:	0800c1a5 	.word	0x0800c1a5
 800c450:	0800dcd1 	.word	0x0800dcd1

0800c454 <_sungetc_r>:
 800c454:	b538      	push	{r3, r4, r5, lr}
 800c456:	1c4b      	adds	r3, r1, #1
 800c458:	4614      	mov	r4, r2
 800c45a:	d103      	bne.n	800c464 <_sungetc_r+0x10>
 800c45c:	f04f 35ff 	mov.w	r5, #4294967295
 800c460:	4628      	mov	r0, r5
 800c462:	bd38      	pop	{r3, r4, r5, pc}
 800c464:	8993      	ldrh	r3, [r2, #12]
 800c466:	f023 0320 	bic.w	r3, r3, #32
 800c46a:	8193      	strh	r3, [r2, #12]
 800c46c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c46e:	6852      	ldr	r2, [r2, #4]
 800c470:	b2cd      	uxtb	r5, r1
 800c472:	b18b      	cbz	r3, 800c498 <_sungetc_r+0x44>
 800c474:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800c476:	4293      	cmp	r3, r2
 800c478:	dd08      	ble.n	800c48c <_sungetc_r+0x38>
 800c47a:	6823      	ldr	r3, [r4, #0]
 800c47c:	1e5a      	subs	r2, r3, #1
 800c47e:	6022      	str	r2, [r4, #0]
 800c480:	f803 5c01 	strb.w	r5, [r3, #-1]
 800c484:	6863      	ldr	r3, [r4, #4]
 800c486:	3301      	adds	r3, #1
 800c488:	6063      	str	r3, [r4, #4]
 800c48a:	e7e9      	b.n	800c460 <_sungetc_r+0xc>
 800c48c:	4621      	mov	r1, r4
 800c48e:	f000 fd88 	bl	800cfa2 <__submore>
 800c492:	2800      	cmp	r0, #0
 800c494:	d0f1      	beq.n	800c47a <_sungetc_r+0x26>
 800c496:	e7e1      	b.n	800c45c <_sungetc_r+0x8>
 800c498:	6921      	ldr	r1, [r4, #16]
 800c49a:	6823      	ldr	r3, [r4, #0]
 800c49c:	b151      	cbz	r1, 800c4b4 <_sungetc_r+0x60>
 800c49e:	4299      	cmp	r1, r3
 800c4a0:	d208      	bcs.n	800c4b4 <_sungetc_r+0x60>
 800c4a2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800c4a6:	42a9      	cmp	r1, r5
 800c4a8:	d104      	bne.n	800c4b4 <_sungetc_r+0x60>
 800c4aa:	3b01      	subs	r3, #1
 800c4ac:	3201      	adds	r2, #1
 800c4ae:	6023      	str	r3, [r4, #0]
 800c4b0:	6062      	str	r2, [r4, #4]
 800c4b2:	e7d5      	b.n	800c460 <_sungetc_r+0xc>
 800c4b4:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800c4b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c4bc:	6363      	str	r3, [r4, #52]	@ 0x34
 800c4be:	2303      	movs	r3, #3
 800c4c0:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c4c2:	4623      	mov	r3, r4
 800c4c4:	f803 5f46 	strb.w	r5, [r3, #70]!
 800c4c8:	6023      	str	r3, [r4, #0]
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	e7dc      	b.n	800c488 <_sungetc_r+0x34>

0800c4ce <__ssrefill_r>:
 800c4ce:	b510      	push	{r4, lr}
 800c4d0:	460c      	mov	r4, r1
 800c4d2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800c4d4:	b169      	cbz	r1, 800c4f2 <__ssrefill_r+0x24>
 800c4d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c4da:	4299      	cmp	r1, r3
 800c4dc:	d001      	beq.n	800c4e2 <__ssrefill_r+0x14>
 800c4de:	f7fe fa33 	bl	800a948 <_free_r>
 800c4e2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c4e4:	6063      	str	r3, [r4, #4]
 800c4e6:	2000      	movs	r0, #0
 800c4e8:	6360      	str	r0, [r4, #52]	@ 0x34
 800c4ea:	b113      	cbz	r3, 800c4f2 <__ssrefill_r+0x24>
 800c4ec:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800c4ee:	6023      	str	r3, [r4, #0]
 800c4f0:	bd10      	pop	{r4, pc}
 800c4f2:	6923      	ldr	r3, [r4, #16]
 800c4f4:	6023      	str	r3, [r4, #0]
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	6063      	str	r3, [r4, #4]
 800c4fa:	89a3      	ldrh	r3, [r4, #12]
 800c4fc:	f043 0320 	orr.w	r3, r3, #32
 800c500:	81a3      	strh	r3, [r4, #12]
 800c502:	f04f 30ff 	mov.w	r0, #4294967295
 800c506:	e7f3      	b.n	800c4f0 <__ssrefill_r+0x22>

0800c508 <__ssvfiscanf_r>:
 800c508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c50c:	460c      	mov	r4, r1
 800c50e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800c512:	2100      	movs	r1, #0
 800c514:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800c518:	49a6      	ldr	r1, [pc, #664]	@ (800c7b4 <__ssvfiscanf_r+0x2ac>)
 800c51a:	91a0      	str	r1, [sp, #640]	@ 0x280
 800c51c:	f10d 0804 	add.w	r8, sp, #4
 800c520:	49a5      	ldr	r1, [pc, #660]	@ (800c7b8 <__ssvfiscanf_r+0x2b0>)
 800c522:	4fa6      	ldr	r7, [pc, #664]	@ (800c7bc <__ssvfiscanf_r+0x2b4>)
 800c524:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800c528:	4606      	mov	r6, r0
 800c52a:	91a1      	str	r1, [sp, #644]	@ 0x284
 800c52c:	9300      	str	r3, [sp, #0]
 800c52e:	f892 9000 	ldrb.w	r9, [r2]
 800c532:	f1b9 0f00 	cmp.w	r9, #0
 800c536:	f000 8158 	beq.w	800c7ea <__ssvfiscanf_r+0x2e2>
 800c53a:	f817 3009 	ldrb.w	r3, [r7, r9]
 800c53e:	f013 0308 	ands.w	r3, r3, #8
 800c542:	f102 0501 	add.w	r5, r2, #1
 800c546:	d019      	beq.n	800c57c <__ssvfiscanf_r+0x74>
 800c548:	6863      	ldr	r3, [r4, #4]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	dd0f      	ble.n	800c56e <__ssvfiscanf_r+0x66>
 800c54e:	6823      	ldr	r3, [r4, #0]
 800c550:	781a      	ldrb	r2, [r3, #0]
 800c552:	5cba      	ldrb	r2, [r7, r2]
 800c554:	0712      	lsls	r2, r2, #28
 800c556:	d401      	bmi.n	800c55c <__ssvfiscanf_r+0x54>
 800c558:	462a      	mov	r2, r5
 800c55a:	e7e8      	b.n	800c52e <__ssvfiscanf_r+0x26>
 800c55c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c55e:	3201      	adds	r2, #1
 800c560:	9245      	str	r2, [sp, #276]	@ 0x114
 800c562:	6862      	ldr	r2, [r4, #4]
 800c564:	3301      	adds	r3, #1
 800c566:	3a01      	subs	r2, #1
 800c568:	6062      	str	r2, [r4, #4]
 800c56a:	6023      	str	r3, [r4, #0]
 800c56c:	e7ec      	b.n	800c548 <__ssvfiscanf_r+0x40>
 800c56e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c570:	4621      	mov	r1, r4
 800c572:	4630      	mov	r0, r6
 800c574:	4798      	blx	r3
 800c576:	2800      	cmp	r0, #0
 800c578:	d0e9      	beq.n	800c54e <__ssvfiscanf_r+0x46>
 800c57a:	e7ed      	b.n	800c558 <__ssvfiscanf_r+0x50>
 800c57c:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800c580:	f040 8085 	bne.w	800c68e <__ssvfiscanf_r+0x186>
 800c584:	9341      	str	r3, [sp, #260]	@ 0x104
 800c586:	9343      	str	r3, [sp, #268]	@ 0x10c
 800c588:	7853      	ldrb	r3, [r2, #1]
 800c58a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c58c:	bf02      	ittt	eq
 800c58e:	2310      	moveq	r3, #16
 800c590:	1c95      	addeq	r5, r2, #2
 800c592:	9341      	streq	r3, [sp, #260]	@ 0x104
 800c594:	220a      	movs	r2, #10
 800c596:	46aa      	mov	sl, r5
 800c598:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800c59c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800c5a0:	2b09      	cmp	r3, #9
 800c5a2:	d91e      	bls.n	800c5e2 <__ssvfiscanf_r+0xda>
 800c5a4:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800c7c0 <__ssvfiscanf_r+0x2b8>
 800c5a8:	2203      	movs	r2, #3
 800c5aa:	4658      	mov	r0, fp
 800c5ac:	f7f3 fe10 	bl	80001d0 <memchr>
 800c5b0:	b138      	cbz	r0, 800c5c2 <__ssvfiscanf_r+0xba>
 800c5b2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c5b4:	eba0 000b 	sub.w	r0, r0, fp
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	4083      	lsls	r3, r0
 800c5bc:	4313      	orrs	r3, r2
 800c5be:	9341      	str	r3, [sp, #260]	@ 0x104
 800c5c0:	4655      	mov	r5, sl
 800c5c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c5c6:	2b78      	cmp	r3, #120	@ 0x78
 800c5c8:	d806      	bhi.n	800c5d8 <__ssvfiscanf_r+0xd0>
 800c5ca:	2b57      	cmp	r3, #87	@ 0x57
 800c5cc:	d810      	bhi.n	800c5f0 <__ssvfiscanf_r+0xe8>
 800c5ce:	2b25      	cmp	r3, #37	@ 0x25
 800c5d0:	d05d      	beq.n	800c68e <__ssvfiscanf_r+0x186>
 800c5d2:	d857      	bhi.n	800c684 <__ssvfiscanf_r+0x17c>
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d075      	beq.n	800c6c4 <__ssvfiscanf_r+0x1bc>
 800c5d8:	2303      	movs	r3, #3
 800c5da:	9347      	str	r3, [sp, #284]	@ 0x11c
 800c5dc:	230a      	movs	r3, #10
 800c5de:	9342      	str	r3, [sp, #264]	@ 0x108
 800c5e0:	e088      	b.n	800c6f4 <__ssvfiscanf_r+0x1ec>
 800c5e2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800c5e4:	fb02 1103 	mla	r1, r2, r3, r1
 800c5e8:	3930      	subs	r1, #48	@ 0x30
 800c5ea:	9143      	str	r1, [sp, #268]	@ 0x10c
 800c5ec:	4655      	mov	r5, sl
 800c5ee:	e7d2      	b.n	800c596 <__ssvfiscanf_r+0x8e>
 800c5f0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800c5f4:	2a20      	cmp	r2, #32
 800c5f6:	d8ef      	bhi.n	800c5d8 <__ssvfiscanf_r+0xd0>
 800c5f8:	a101      	add	r1, pc, #4	@ (adr r1, 800c600 <__ssvfiscanf_r+0xf8>)
 800c5fa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c5fe:	bf00      	nop
 800c600:	0800c6d3 	.word	0x0800c6d3
 800c604:	0800c5d9 	.word	0x0800c5d9
 800c608:	0800c5d9 	.word	0x0800c5d9
 800c60c:	0800c72d 	.word	0x0800c72d
 800c610:	0800c5d9 	.word	0x0800c5d9
 800c614:	0800c5d9 	.word	0x0800c5d9
 800c618:	0800c5d9 	.word	0x0800c5d9
 800c61c:	0800c5d9 	.word	0x0800c5d9
 800c620:	0800c5d9 	.word	0x0800c5d9
 800c624:	0800c5d9 	.word	0x0800c5d9
 800c628:	0800c5d9 	.word	0x0800c5d9
 800c62c:	0800c743 	.word	0x0800c743
 800c630:	0800c729 	.word	0x0800c729
 800c634:	0800c68b 	.word	0x0800c68b
 800c638:	0800c68b 	.word	0x0800c68b
 800c63c:	0800c68b 	.word	0x0800c68b
 800c640:	0800c5d9 	.word	0x0800c5d9
 800c644:	0800c6e5 	.word	0x0800c6e5
 800c648:	0800c5d9 	.word	0x0800c5d9
 800c64c:	0800c5d9 	.word	0x0800c5d9
 800c650:	0800c5d9 	.word	0x0800c5d9
 800c654:	0800c5d9 	.word	0x0800c5d9
 800c658:	0800c753 	.word	0x0800c753
 800c65c:	0800c6ed 	.word	0x0800c6ed
 800c660:	0800c6cb 	.word	0x0800c6cb
 800c664:	0800c5d9 	.word	0x0800c5d9
 800c668:	0800c5d9 	.word	0x0800c5d9
 800c66c:	0800c74f 	.word	0x0800c74f
 800c670:	0800c5d9 	.word	0x0800c5d9
 800c674:	0800c729 	.word	0x0800c729
 800c678:	0800c5d9 	.word	0x0800c5d9
 800c67c:	0800c5d9 	.word	0x0800c5d9
 800c680:	0800c6d3 	.word	0x0800c6d3
 800c684:	3b45      	subs	r3, #69	@ 0x45
 800c686:	2b02      	cmp	r3, #2
 800c688:	d8a6      	bhi.n	800c5d8 <__ssvfiscanf_r+0xd0>
 800c68a:	2305      	movs	r3, #5
 800c68c:	e031      	b.n	800c6f2 <__ssvfiscanf_r+0x1ea>
 800c68e:	6863      	ldr	r3, [r4, #4]
 800c690:	2b00      	cmp	r3, #0
 800c692:	dd0d      	ble.n	800c6b0 <__ssvfiscanf_r+0x1a8>
 800c694:	6823      	ldr	r3, [r4, #0]
 800c696:	781a      	ldrb	r2, [r3, #0]
 800c698:	454a      	cmp	r2, r9
 800c69a:	f040 80a6 	bne.w	800c7ea <__ssvfiscanf_r+0x2e2>
 800c69e:	3301      	adds	r3, #1
 800c6a0:	6862      	ldr	r2, [r4, #4]
 800c6a2:	6023      	str	r3, [r4, #0]
 800c6a4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800c6a6:	3a01      	subs	r2, #1
 800c6a8:	3301      	adds	r3, #1
 800c6aa:	6062      	str	r2, [r4, #4]
 800c6ac:	9345      	str	r3, [sp, #276]	@ 0x114
 800c6ae:	e753      	b.n	800c558 <__ssvfiscanf_r+0x50>
 800c6b0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c6b2:	4621      	mov	r1, r4
 800c6b4:	4630      	mov	r0, r6
 800c6b6:	4798      	blx	r3
 800c6b8:	2800      	cmp	r0, #0
 800c6ba:	d0eb      	beq.n	800c694 <__ssvfiscanf_r+0x18c>
 800c6bc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800c6be:	2800      	cmp	r0, #0
 800c6c0:	f040 808b 	bne.w	800c7da <__ssvfiscanf_r+0x2d2>
 800c6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6c8:	e08b      	b.n	800c7e2 <__ssvfiscanf_r+0x2da>
 800c6ca:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c6cc:	f042 0220 	orr.w	r2, r2, #32
 800c6d0:	9241      	str	r2, [sp, #260]	@ 0x104
 800c6d2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c6d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c6d8:	9241      	str	r2, [sp, #260]	@ 0x104
 800c6da:	2210      	movs	r2, #16
 800c6dc:	2b6e      	cmp	r3, #110	@ 0x6e
 800c6de:	9242      	str	r2, [sp, #264]	@ 0x108
 800c6e0:	d902      	bls.n	800c6e8 <__ssvfiscanf_r+0x1e0>
 800c6e2:	e005      	b.n	800c6f0 <__ssvfiscanf_r+0x1e8>
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	9342      	str	r3, [sp, #264]	@ 0x108
 800c6e8:	2303      	movs	r3, #3
 800c6ea:	e002      	b.n	800c6f2 <__ssvfiscanf_r+0x1ea>
 800c6ec:	2308      	movs	r3, #8
 800c6ee:	9342      	str	r3, [sp, #264]	@ 0x108
 800c6f0:	2304      	movs	r3, #4
 800c6f2:	9347      	str	r3, [sp, #284]	@ 0x11c
 800c6f4:	6863      	ldr	r3, [r4, #4]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	dd39      	ble.n	800c76e <__ssvfiscanf_r+0x266>
 800c6fa:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c6fc:	0659      	lsls	r1, r3, #25
 800c6fe:	d404      	bmi.n	800c70a <__ssvfiscanf_r+0x202>
 800c700:	6823      	ldr	r3, [r4, #0]
 800c702:	781a      	ldrb	r2, [r3, #0]
 800c704:	5cba      	ldrb	r2, [r7, r2]
 800c706:	0712      	lsls	r2, r2, #28
 800c708:	d438      	bmi.n	800c77c <__ssvfiscanf_r+0x274>
 800c70a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800c70c:	2b02      	cmp	r3, #2
 800c70e:	dc47      	bgt.n	800c7a0 <__ssvfiscanf_r+0x298>
 800c710:	466b      	mov	r3, sp
 800c712:	4622      	mov	r2, r4
 800c714:	a941      	add	r1, sp, #260	@ 0x104
 800c716:	4630      	mov	r0, r6
 800c718:	f000 f9ae 	bl	800ca78 <_scanf_chars>
 800c71c:	2801      	cmp	r0, #1
 800c71e:	d064      	beq.n	800c7ea <__ssvfiscanf_r+0x2e2>
 800c720:	2802      	cmp	r0, #2
 800c722:	f47f af19 	bne.w	800c558 <__ssvfiscanf_r+0x50>
 800c726:	e7c9      	b.n	800c6bc <__ssvfiscanf_r+0x1b4>
 800c728:	220a      	movs	r2, #10
 800c72a:	e7d7      	b.n	800c6dc <__ssvfiscanf_r+0x1d4>
 800c72c:	4629      	mov	r1, r5
 800c72e:	4640      	mov	r0, r8
 800c730:	f000 fbfe 	bl	800cf30 <__sccl>
 800c734:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c736:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c73a:	9341      	str	r3, [sp, #260]	@ 0x104
 800c73c:	4605      	mov	r5, r0
 800c73e:	2301      	movs	r3, #1
 800c740:	e7d7      	b.n	800c6f2 <__ssvfiscanf_r+0x1ea>
 800c742:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c744:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c748:	9341      	str	r3, [sp, #260]	@ 0x104
 800c74a:	2300      	movs	r3, #0
 800c74c:	e7d1      	b.n	800c6f2 <__ssvfiscanf_r+0x1ea>
 800c74e:	2302      	movs	r3, #2
 800c750:	e7cf      	b.n	800c6f2 <__ssvfiscanf_r+0x1ea>
 800c752:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800c754:	06c3      	lsls	r3, r0, #27
 800c756:	f53f aeff 	bmi.w	800c558 <__ssvfiscanf_r+0x50>
 800c75a:	9b00      	ldr	r3, [sp, #0]
 800c75c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c75e:	1d19      	adds	r1, r3, #4
 800c760:	9100      	str	r1, [sp, #0]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	07c0      	lsls	r0, r0, #31
 800c766:	bf4c      	ite	mi
 800c768:	801a      	strhmi	r2, [r3, #0]
 800c76a:	601a      	strpl	r2, [r3, #0]
 800c76c:	e6f4      	b.n	800c558 <__ssvfiscanf_r+0x50>
 800c76e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c770:	4621      	mov	r1, r4
 800c772:	4630      	mov	r0, r6
 800c774:	4798      	blx	r3
 800c776:	2800      	cmp	r0, #0
 800c778:	d0bf      	beq.n	800c6fa <__ssvfiscanf_r+0x1f2>
 800c77a:	e79f      	b.n	800c6bc <__ssvfiscanf_r+0x1b4>
 800c77c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c77e:	3201      	adds	r2, #1
 800c780:	9245      	str	r2, [sp, #276]	@ 0x114
 800c782:	6862      	ldr	r2, [r4, #4]
 800c784:	3a01      	subs	r2, #1
 800c786:	2a00      	cmp	r2, #0
 800c788:	6062      	str	r2, [r4, #4]
 800c78a:	dd02      	ble.n	800c792 <__ssvfiscanf_r+0x28a>
 800c78c:	3301      	adds	r3, #1
 800c78e:	6023      	str	r3, [r4, #0]
 800c790:	e7b6      	b.n	800c700 <__ssvfiscanf_r+0x1f8>
 800c792:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c794:	4621      	mov	r1, r4
 800c796:	4630      	mov	r0, r6
 800c798:	4798      	blx	r3
 800c79a:	2800      	cmp	r0, #0
 800c79c:	d0b0      	beq.n	800c700 <__ssvfiscanf_r+0x1f8>
 800c79e:	e78d      	b.n	800c6bc <__ssvfiscanf_r+0x1b4>
 800c7a0:	2b04      	cmp	r3, #4
 800c7a2:	dc0f      	bgt.n	800c7c4 <__ssvfiscanf_r+0x2bc>
 800c7a4:	466b      	mov	r3, sp
 800c7a6:	4622      	mov	r2, r4
 800c7a8:	a941      	add	r1, sp, #260	@ 0x104
 800c7aa:	4630      	mov	r0, r6
 800c7ac:	f000 f9be 	bl	800cb2c <_scanf_i>
 800c7b0:	e7b4      	b.n	800c71c <__ssvfiscanf_r+0x214>
 800c7b2:	bf00      	nop
 800c7b4:	0800c455 	.word	0x0800c455
 800c7b8:	0800c4cf 	.word	0x0800c4cf
 800c7bc:	0800dee9 	.word	0x0800dee9
 800c7c0:	0800dcd1 	.word	0x0800dcd1
 800c7c4:	4b0a      	ldr	r3, [pc, #40]	@ (800c7f0 <__ssvfiscanf_r+0x2e8>)
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	f43f aec6 	beq.w	800c558 <__ssvfiscanf_r+0x50>
 800c7cc:	466b      	mov	r3, sp
 800c7ce:	4622      	mov	r2, r4
 800c7d0:	a941      	add	r1, sp, #260	@ 0x104
 800c7d2:	4630      	mov	r0, r6
 800c7d4:	f7fc fc88 	bl	80090e8 <_scanf_float>
 800c7d8:	e7a0      	b.n	800c71c <__ssvfiscanf_r+0x214>
 800c7da:	89a3      	ldrh	r3, [r4, #12]
 800c7dc:	065b      	lsls	r3, r3, #25
 800c7de:	f53f af71 	bmi.w	800c6c4 <__ssvfiscanf_r+0x1bc>
 800c7e2:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800c7e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7ea:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800c7ec:	e7f9      	b.n	800c7e2 <__ssvfiscanf_r+0x2da>
 800c7ee:	bf00      	nop
 800c7f0:	080090e9 	.word	0x080090e9

0800c7f4 <__sfputc_r>:
 800c7f4:	6893      	ldr	r3, [r2, #8]
 800c7f6:	3b01      	subs	r3, #1
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	b410      	push	{r4}
 800c7fc:	6093      	str	r3, [r2, #8]
 800c7fe:	da08      	bge.n	800c812 <__sfputc_r+0x1e>
 800c800:	6994      	ldr	r4, [r2, #24]
 800c802:	42a3      	cmp	r3, r4
 800c804:	db01      	blt.n	800c80a <__sfputc_r+0x16>
 800c806:	290a      	cmp	r1, #10
 800c808:	d103      	bne.n	800c812 <__sfputc_r+0x1e>
 800c80a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c80e:	f7fd b928 	b.w	8009a62 <__swbuf_r>
 800c812:	6813      	ldr	r3, [r2, #0]
 800c814:	1c58      	adds	r0, r3, #1
 800c816:	6010      	str	r0, [r2, #0]
 800c818:	7019      	strb	r1, [r3, #0]
 800c81a:	4608      	mov	r0, r1
 800c81c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c820:	4770      	bx	lr

0800c822 <__sfputs_r>:
 800c822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c824:	4606      	mov	r6, r0
 800c826:	460f      	mov	r7, r1
 800c828:	4614      	mov	r4, r2
 800c82a:	18d5      	adds	r5, r2, r3
 800c82c:	42ac      	cmp	r4, r5
 800c82e:	d101      	bne.n	800c834 <__sfputs_r+0x12>
 800c830:	2000      	movs	r0, #0
 800c832:	e007      	b.n	800c844 <__sfputs_r+0x22>
 800c834:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c838:	463a      	mov	r2, r7
 800c83a:	4630      	mov	r0, r6
 800c83c:	f7ff ffda 	bl	800c7f4 <__sfputc_r>
 800c840:	1c43      	adds	r3, r0, #1
 800c842:	d1f3      	bne.n	800c82c <__sfputs_r+0xa>
 800c844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c848 <_vfiprintf_r>:
 800c848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c84c:	460d      	mov	r5, r1
 800c84e:	b09d      	sub	sp, #116	@ 0x74
 800c850:	4614      	mov	r4, r2
 800c852:	4698      	mov	r8, r3
 800c854:	4606      	mov	r6, r0
 800c856:	b118      	cbz	r0, 800c860 <_vfiprintf_r+0x18>
 800c858:	6a03      	ldr	r3, [r0, #32]
 800c85a:	b90b      	cbnz	r3, 800c860 <_vfiprintf_r+0x18>
 800c85c:	f7fc fede 	bl	800961c <__sinit>
 800c860:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c862:	07d9      	lsls	r1, r3, #31
 800c864:	d405      	bmi.n	800c872 <_vfiprintf_r+0x2a>
 800c866:	89ab      	ldrh	r3, [r5, #12]
 800c868:	059a      	lsls	r2, r3, #22
 800c86a:	d402      	bmi.n	800c872 <_vfiprintf_r+0x2a>
 800c86c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c86e:	f7fd fa0a 	bl	8009c86 <__retarget_lock_acquire_recursive>
 800c872:	89ab      	ldrh	r3, [r5, #12]
 800c874:	071b      	lsls	r3, r3, #28
 800c876:	d501      	bpl.n	800c87c <_vfiprintf_r+0x34>
 800c878:	692b      	ldr	r3, [r5, #16]
 800c87a:	b99b      	cbnz	r3, 800c8a4 <_vfiprintf_r+0x5c>
 800c87c:	4629      	mov	r1, r5
 800c87e:	4630      	mov	r0, r6
 800c880:	f7fd f92e 	bl	8009ae0 <__swsetup_r>
 800c884:	b170      	cbz	r0, 800c8a4 <_vfiprintf_r+0x5c>
 800c886:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c888:	07dc      	lsls	r4, r3, #31
 800c88a:	d504      	bpl.n	800c896 <_vfiprintf_r+0x4e>
 800c88c:	f04f 30ff 	mov.w	r0, #4294967295
 800c890:	b01d      	add	sp, #116	@ 0x74
 800c892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c896:	89ab      	ldrh	r3, [r5, #12]
 800c898:	0598      	lsls	r0, r3, #22
 800c89a:	d4f7      	bmi.n	800c88c <_vfiprintf_r+0x44>
 800c89c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c89e:	f7fd f9f3 	bl	8009c88 <__retarget_lock_release_recursive>
 800c8a2:	e7f3      	b.n	800c88c <_vfiprintf_r+0x44>
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c8a8:	2320      	movs	r3, #32
 800c8aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c8ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8b2:	2330      	movs	r3, #48	@ 0x30
 800c8b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ca64 <_vfiprintf_r+0x21c>
 800c8b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c8bc:	f04f 0901 	mov.w	r9, #1
 800c8c0:	4623      	mov	r3, r4
 800c8c2:	469a      	mov	sl, r3
 800c8c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8c8:	b10a      	cbz	r2, 800c8ce <_vfiprintf_r+0x86>
 800c8ca:	2a25      	cmp	r2, #37	@ 0x25
 800c8cc:	d1f9      	bne.n	800c8c2 <_vfiprintf_r+0x7a>
 800c8ce:	ebba 0b04 	subs.w	fp, sl, r4
 800c8d2:	d00b      	beq.n	800c8ec <_vfiprintf_r+0xa4>
 800c8d4:	465b      	mov	r3, fp
 800c8d6:	4622      	mov	r2, r4
 800c8d8:	4629      	mov	r1, r5
 800c8da:	4630      	mov	r0, r6
 800c8dc:	f7ff ffa1 	bl	800c822 <__sfputs_r>
 800c8e0:	3001      	adds	r0, #1
 800c8e2:	f000 80a7 	beq.w	800ca34 <_vfiprintf_r+0x1ec>
 800c8e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c8e8:	445a      	add	r2, fp
 800c8ea:	9209      	str	r2, [sp, #36]	@ 0x24
 800c8ec:	f89a 3000 	ldrb.w	r3, [sl]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	f000 809f 	beq.w	800ca34 <_vfiprintf_r+0x1ec>
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	f04f 32ff 	mov.w	r2, #4294967295
 800c8fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c900:	f10a 0a01 	add.w	sl, sl, #1
 800c904:	9304      	str	r3, [sp, #16]
 800c906:	9307      	str	r3, [sp, #28]
 800c908:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c90c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c90e:	4654      	mov	r4, sl
 800c910:	2205      	movs	r2, #5
 800c912:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c916:	4853      	ldr	r0, [pc, #332]	@ (800ca64 <_vfiprintf_r+0x21c>)
 800c918:	f7f3 fc5a 	bl	80001d0 <memchr>
 800c91c:	9a04      	ldr	r2, [sp, #16]
 800c91e:	b9d8      	cbnz	r0, 800c958 <_vfiprintf_r+0x110>
 800c920:	06d1      	lsls	r1, r2, #27
 800c922:	bf44      	itt	mi
 800c924:	2320      	movmi	r3, #32
 800c926:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c92a:	0713      	lsls	r3, r2, #28
 800c92c:	bf44      	itt	mi
 800c92e:	232b      	movmi	r3, #43	@ 0x2b
 800c930:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c934:	f89a 3000 	ldrb.w	r3, [sl]
 800c938:	2b2a      	cmp	r3, #42	@ 0x2a
 800c93a:	d015      	beq.n	800c968 <_vfiprintf_r+0x120>
 800c93c:	9a07      	ldr	r2, [sp, #28]
 800c93e:	4654      	mov	r4, sl
 800c940:	2000      	movs	r0, #0
 800c942:	f04f 0c0a 	mov.w	ip, #10
 800c946:	4621      	mov	r1, r4
 800c948:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c94c:	3b30      	subs	r3, #48	@ 0x30
 800c94e:	2b09      	cmp	r3, #9
 800c950:	d94b      	bls.n	800c9ea <_vfiprintf_r+0x1a2>
 800c952:	b1b0      	cbz	r0, 800c982 <_vfiprintf_r+0x13a>
 800c954:	9207      	str	r2, [sp, #28]
 800c956:	e014      	b.n	800c982 <_vfiprintf_r+0x13a>
 800c958:	eba0 0308 	sub.w	r3, r0, r8
 800c95c:	fa09 f303 	lsl.w	r3, r9, r3
 800c960:	4313      	orrs	r3, r2
 800c962:	9304      	str	r3, [sp, #16]
 800c964:	46a2      	mov	sl, r4
 800c966:	e7d2      	b.n	800c90e <_vfiprintf_r+0xc6>
 800c968:	9b03      	ldr	r3, [sp, #12]
 800c96a:	1d19      	adds	r1, r3, #4
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	9103      	str	r1, [sp, #12]
 800c970:	2b00      	cmp	r3, #0
 800c972:	bfbb      	ittet	lt
 800c974:	425b      	neglt	r3, r3
 800c976:	f042 0202 	orrlt.w	r2, r2, #2
 800c97a:	9307      	strge	r3, [sp, #28]
 800c97c:	9307      	strlt	r3, [sp, #28]
 800c97e:	bfb8      	it	lt
 800c980:	9204      	strlt	r2, [sp, #16]
 800c982:	7823      	ldrb	r3, [r4, #0]
 800c984:	2b2e      	cmp	r3, #46	@ 0x2e
 800c986:	d10a      	bne.n	800c99e <_vfiprintf_r+0x156>
 800c988:	7863      	ldrb	r3, [r4, #1]
 800c98a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c98c:	d132      	bne.n	800c9f4 <_vfiprintf_r+0x1ac>
 800c98e:	9b03      	ldr	r3, [sp, #12]
 800c990:	1d1a      	adds	r2, r3, #4
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	9203      	str	r2, [sp, #12]
 800c996:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c99a:	3402      	adds	r4, #2
 800c99c:	9305      	str	r3, [sp, #20]
 800c99e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ca74 <_vfiprintf_r+0x22c>
 800c9a2:	7821      	ldrb	r1, [r4, #0]
 800c9a4:	2203      	movs	r2, #3
 800c9a6:	4650      	mov	r0, sl
 800c9a8:	f7f3 fc12 	bl	80001d0 <memchr>
 800c9ac:	b138      	cbz	r0, 800c9be <_vfiprintf_r+0x176>
 800c9ae:	9b04      	ldr	r3, [sp, #16]
 800c9b0:	eba0 000a 	sub.w	r0, r0, sl
 800c9b4:	2240      	movs	r2, #64	@ 0x40
 800c9b6:	4082      	lsls	r2, r0
 800c9b8:	4313      	orrs	r3, r2
 800c9ba:	3401      	adds	r4, #1
 800c9bc:	9304      	str	r3, [sp, #16]
 800c9be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9c2:	4829      	ldr	r0, [pc, #164]	@ (800ca68 <_vfiprintf_r+0x220>)
 800c9c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c9c8:	2206      	movs	r2, #6
 800c9ca:	f7f3 fc01 	bl	80001d0 <memchr>
 800c9ce:	2800      	cmp	r0, #0
 800c9d0:	d03f      	beq.n	800ca52 <_vfiprintf_r+0x20a>
 800c9d2:	4b26      	ldr	r3, [pc, #152]	@ (800ca6c <_vfiprintf_r+0x224>)
 800c9d4:	bb1b      	cbnz	r3, 800ca1e <_vfiprintf_r+0x1d6>
 800c9d6:	9b03      	ldr	r3, [sp, #12]
 800c9d8:	3307      	adds	r3, #7
 800c9da:	f023 0307 	bic.w	r3, r3, #7
 800c9de:	3308      	adds	r3, #8
 800c9e0:	9303      	str	r3, [sp, #12]
 800c9e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c9e4:	443b      	add	r3, r7
 800c9e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9e8:	e76a      	b.n	800c8c0 <_vfiprintf_r+0x78>
 800c9ea:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9ee:	460c      	mov	r4, r1
 800c9f0:	2001      	movs	r0, #1
 800c9f2:	e7a8      	b.n	800c946 <_vfiprintf_r+0xfe>
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	3401      	adds	r4, #1
 800c9f8:	9305      	str	r3, [sp, #20]
 800c9fa:	4619      	mov	r1, r3
 800c9fc:	f04f 0c0a 	mov.w	ip, #10
 800ca00:	4620      	mov	r0, r4
 800ca02:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca06:	3a30      	subs	r2, #48	@ 0x30
 800ca08:	2a09      	cmp	r2, #9
 800ca0a:	d903      	bls.n	800ca14 <_vfiprintf_r+0x1cc>
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d0c6      	beq.n	800c99e <_vfiprintf_r+0x156>
 800ca10:	9105      	str	r1, [sp, #20]
 800ca12:	e7c4      	b.n	800c99e <_vfiprintf_r+0x156>
 800ca14:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca18:	4604      	mov	r4, r0
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	e7f0      	b.n	800ca00 <_vfiprintf_r+0x1b8>
 800ca1e:	ab03      	add	r3, sp, #12
 800ca20:	9300      	str	r3, [sp, #0]
 800ca22:	462a      	mov	r2, r5
 800ca24:	4b12      	ldr	r3, [pc, #72]	@ (800ca70 <_vfiprintf_r+0x228>)
 800ca26:	a904      	add	r1, sp, #16
 800ca28:	4630      	mov	r0, r6
 800ca2a:	f7fb ffa7 	bl	800897c <_printf_float>
 800ca2e:	4607      	mov	r7, r0
 800ca30:	1c78      	adds	r0, r7, #1
 800ca32:	d1d6      	bne.n	800c9e2 <_vfiprintf_r+0x19a>
 800ca34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca36:	07d9      	lsls	r1, r3, #31
 800ca38:	d405      	bmi.n	800ca46 <_vfiprintf_r+0x1fe>
 800ca3a:	89ab      	ldrh	r3, [r5, #12]
 800ca3c:	059a      	lsls	r2, r3, #22
 800ca3e:	d402      	bmi.n	800ca46 <_vfiprintf_r+0x1fe>
 800ca40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca42:	f7fd f921 	bl	8009c88 <__retarget_lock_release_recursive>
 800ca46:	89ab      	ldrh	r3, [r5, #12]
 800ca48:	065b      	lsls	r3, r3, #25
 800ca4a:	f53f af1f 	bmi.w	800c88c <_vfiprintf_r+0x44>
 800ca4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ca50:	e71e      	b.n	800c890 <_vfiprintf_r+0x48>
 800ca52:	ab03      	add	r3, sp, #12
 800ca54:	9300      	str	r3, [sp, #0]
 800ca56:	462a      	mov	r2, r5
 800ca58:	4b05      	ldr	r3, [pc, #20]	@ (800ca70 <_vfiprintf_r+0x228>)
 800ca5a:	a904      	add	r1, sp, #16
 800ca5c:	4630      	mov	r0, r6
 800ca5e:	f7fc fa25 	bl	8008eac <_printf_i>
 800ca62:	e7e4      	b.n	800ca2e <_vfiprintf_r+0x1e6>
 800ca64:	0800dccb 	.word	0x0800dccb
 800ca68:	0800dcd5 	.word	0x0800dcd5
 800ca6c:	0800897d 	.word	0x0800897d
 800ca70:	0800c823 	.word	0x0800c823
 800ca74:	0800dcd1 	.word	0x0800dcd1

0800ca78 <_scanf_chars>:
 800ca78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca7c:	4615      	mov	r5, r2
 800ca7e:	688a      	ldr	r2, [r1, #8]
 800ca80:	4680      	mov	r8, r0
 800ca82:	460c      	mov	r4, r1
 800ca84:	b932      	cbnz	r2, 800ca94 <_scanf_chars+0x1c>
 800ca86:	698a      	ldr	r2, [r1, #24]
 800ca88:	2a00      	cmp	r2, #0
 800ca8a:	bf14      	ite	ne
 800ca8c:	f04f 32ff 	movne.w	r2, #4294967295
 800ca90:	2201      	moveq	r2, #1
 800ca92:	608a      	str	r2, [r1, #8]
 800ca94:	6822      	ldr	r2, [r4, #0]
 800ca96:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800cb28 <_scanf_chars+0xb0>
 800ca9a:	06d1      	lsls	r1, r2, #27
 800ca9c:	bf5f      	itttt	pl
 800ca9e:	681a      	ldrpl	r2, [r3, #0]
 800caa0:	1d11      	addpl	r1, r2, #4
 800caa2:	6019      	strpl	r1, [r3, #0]
 800caa4:	6816      	ldrpl	r6, [r2, #0]
 800caa6:	2700      	movs	r7, #0
 800caa8:	69a0      	ldr	r0, [r4, #24]
 800caaa:	b188      	cbz	r0, 800cad0 <_scanf_chars+0x58>
 800caac:	2801      	cmp	r0, #1
 800caae:	d107      	bne.n	800cac0 <_scanf_chars+0x48>
 800cab0:	682b      	ldr	r3, [r5, #0]
 800cab2:	781a      	ldrb	r2, [r3, #0]
 800cab4:	6963      	ldr	r3, [r4, #20]
 800cab6:	5c9b      	ldrb	r3, [r3, r2]
 800cab8:	b953      	cbnz	r3, 800cad0 <_scanf_chars+0x58>
 800caba:	2f00      	cmp	r7, #0
 800cabc:	d031      	beq.n	800cb22 <_scanf_chars+0xaa>
 800cabe:	e022      	b.n	800cb06 <_scanf_chars+0x8e>
 800cac0:	2802      	cmp	r0, #2
 800cac2:	d120      	bne.n	800cb06 <_scanf_chars+0x8e>
 800cac4:	682b      	ldr	r3, [r5, #0]
 800cac6:	781b      	ldrb	r3, [r3, #0]
 800cac8:	f819 3003 	ldrb.w	r3, [r9, r3]
 800cacc:	071b      	lsls	r3, r3, #28
 800cace:	d41a      	bmi.n	800cb06 <_scanf_chars+0x8e>
 800cad0:	6823      	ldr	r3, [r4, #0]
 800cad2:	06da      	lsls	r2, r3, #27
 800cad4:	bf5e      	ittt	pl
 800cad6:	682b      	ldrpl	r3, [r5, #0]
 800cad8:	781b      	ldrbpl	r3, [r3, #0]
 800cada:	f806 3b01 	strbpl.w	r3, [r6], #1
 800cade:	682a      	ldr	r2, [r5, #0]
 800cae0:	686b      	ldr	r3, [r5, #4]
 800cae2:	3201      	adds	r2, #1
 800cae4:	602a      	str	r2, [r5, #0]
 800cae6:	68a2      	ldr	r2, [r4, #8]
 800cae8:	3b01      	subs	r3, #1
 800caea:	3a01      	subs	r2, #1
 800caec:	606b      	str	r3, [r5, #4]
 800caee:	3701      	adds	r7, #1
 800caf0:	60a2      	str	r2, [r4, #8]
 800caf2:	b142      	cbz	r2, 800cb06 <_scanf_chars+0x8e>
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	dcd7      	bgt.n	800caa8 <_scanf_chars+0x30>
 800caf8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cafc:	4629      	mov	r1, r5
 800cafe:	4640      	mov	r0, r8
 800cb00:	4798      	blx	r3
 800cb02:	2800      	cmp	r0, #0
 800cb04:	d0d0      	beq.n	800caa8 <_scanf_chars+0x30>
 800cb06:	6823      	ldr	r3, [r4, #0]
 800cb08:	f013 0310 	ands.w	r3, r3, #16
 800cb0c:	d105      	bne.n	800cb1a <_scanf_chars+0xa2>
 800cb0e:	68e2      	ldr	r2, [r4, #12]
 800cb10:	3201      	adds	r2, #1
 800cb12:	60e2      	str	r2, [r4, #12]
 800cb14:	69a2      	ldr	r2, [r4, #24]
 800cb16:	b102      	cbz	r2, 800cb1a <_scanf_chars+0xa2>
 800cb18:	7033      	strb	r3, [r6, #0]
 800cb1a:	6923      	ldr	r3, [r4, #16]
 800cb1c:	443b      	add	r3, r7
 800cb1e:	6123      	str	r3, [r4, #16]
 800cb20:	2000      	movs	r0, #0
 800cb22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb26:	bf00      	nop
 800cb28:	0800dee9 	.word	0x0800dee9

0800cb2c <_scanf_i>:
 800cb2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb30:	4698      	mov	r8, r3
 800cb32:	4b74      	ldr	r3, [pc, #464]	@ (800cd04 <_scanf_i+0x1d8>)
 800cb34:	460c      	mov	r4, r1
 800cb36:	4682      	mov	sl, r0
 800cb38:	4616      	mov	r6, r2
 800cb3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cb3e:	b087      	sub	sp, #28
 800cb40:	ab03      	add	r3, sp, #12
 800cb42:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800cb46:	4b70      	ldr	r3, [pc, #448]	@ (800cd08 <_scanf_i+0x1dc>)
 800cb48:	69a1      	ldr	r1, [r4, #24]
 800cb4a:	4a70      	ldr	r2, [pc, #448]	@ (800cd0c <_scanf_i+0x1e0>)
 800cb4c:	2903      	cmp	r1, #3
 800cb4e:	bf08      	it	eq
 800cb50:	461a      	moveq	r2, r3
 800cb52:	68a3      	ldr	r3, [r4, #8]
 800cb54:	9201      	str	r2, [sp, #4]
 800cb56:	1e5a      	subs	r2, r3, #1
 800cb58:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800cb5c:	bf88      	it	hi
 800cb5e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800cb62:	4627      	mov	r7, r4
 800cb64:	bf82      	ittt	hi
 800cb66:	eb03 0905 	addhi.w	r9, r3, r5
 800cb6a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800cb6e:	60a3      	strhi	r3, [r4, #8]
 800cb70:	f857 3b1c 	ldr.w	r3, [r7], #28
 800cb74:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800cb78:	bf98      	it	ls
 800cb7a:	f04f 0900 	movls.w	r9, #0
 800cb7e:	6023      	str	r3, [r4, #0]
 800cb80:	463d      	mov	r5, r7
 800cb82:	f04f 0b00 	mov.w	fp, #0
 800cb86:	6831      	ldr	r1, [r6, #0]
 800cb88:	ab03      	add	r3, sp, #12
 800cb8a:	7809      	ldrb	r1, [r1, #0]
 800cb8c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800cb90:	2202      	movs	r2, #2
 800cb92:	f7f3 fb1d 	bl	80001d0 <memchr>
 800cb96:	b328      	cbz	r0, 800cbe4 <_scanf_i+0xb8>
 800cb98:	f1bb 0f01 	cmp.w	fp, #1
 800cb9c:	d159      	bne.n	800cc52 <_scanf_i+0x126>
 800cb9e:	6862      	ldr	r2, [r4, #4]
 800cba0:	b92a      	cbnz	r2, 800cbae <_scanf_i+0x82>
 800cba2:	6822      	ldr	r2, [r4, #0]
 800cba4:	2108      	movs	r1, #8
 800cba6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cbaa:	6061      	str	r1, [r4, #4]
 800cbac:	6022      	str	r2, [r4, #0]
 800cbae:	6822      	ldr	r2, [r4, #0]
 800cbb0:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800cbb4:	6022      	str	r2, [r4, #0]
 800cbb6:	68a2      	ldr	r2, [r4, #8]
 800cbb8:	1e51      	subs	r1, r2, #1
 800cbba:	60a1      	str	r1, [r4, #8]
 800cbbc:	b192      	cbz	r2, 800cbe4 <_scanf_i+0xb8>
 800cbbe:	6832      	ldr	r2, [r6, #0]
 800cbc0:	1c51      	adds	r1, r2, #1
 800cbc2:	6031      	str	r1, [r6, #0]
 800cbc4:	7812      	ldrb	r2, [r2, #0]
 800cbc6:	f805 2b01 	strb.w	r2, [r5], #1
 800cbca:	6872      	ldr	r2, [r6, #4]
 800cbcc:	3a01      	subs	r2, #1
 800cbce:	2a00      	cmp	r2, #0
 800cbd0:	6072      	str	r2, [r6, #4]
 800cbd2:	dc07      	bgt.n	800cbe4 <_scanf_i+0xb8>
 800cbd4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800cbd8:	4631      	mov	r1, r6
 800cbda:	4650      	mov	r0, sl
 800cbdc:	4790      	blx	r2
 800cbde:	2800      	cmp	r0, #0
 800cbe0:	f040 8085 	bne.w	800ccee <_scanf_i+0x1c2>
 800cbe4:	f10b 0b01 	add.w	fp, fp, #1
 800cbe8:	f1bb 0f03 	cmp.w	fp, #3
 800cbec:	d1cb      	bne.n	800cb86 <_scanf_i+0x5a>
 800cbee:	6863      	ldr	r3, [r4, #4]
 800cbf0:	b90b      	cbnz	r3, 800cbf6 <_scanf_i+0xca>
 800cbf2:	230a      	movs	r3, #10
 800cbf4:	6063      	str	r3, [r4, #4]
 800cbf6:	6863      	ldr	r3, [r4, #4]
 800cbf8:	4945      	ldr	r1, [pc, #276]	@ (800cd10 <_scanf_i+0x1e4>)
 800cbfa:	6960      	ldr	r0, [r4, #20]
 800cbfc:	1ac9      	subs	r1, r1, r3
 800cbfe:	f000 f997 	bl	800cf30 <__sccl>
 800cc02:	f04f 0b00 	mov.w	fp, #0
 800cc06:	68a3      	ldr	r3, [r4, #8]
 800cc08:	6822      	ldr	r2, [r4, #0]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d03d      	beq.n	800cc8a <_scanf_i+0x15e>
 800cc0e:	6831      	ldr	r1, [r6, #0]
 800cc10:	6960      	ldr	r0, [r4, #20]
 800cc12:	f891 c000 	ldrb.w	ip, [r1]
 800cc16:	f810 000c 	ldrb.w	r0, [r0, ip]
 800cc1a:	2800      	cmp	r0, #0
 800cc1c:	d035      	beq.n	800cc8a <_scanf_i+0x15e>
 800cc1e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800cc22:	d124      	bne.n	800cc6e <_scanf_i+0x142>
 800cc24:	0510      	lsls	r0, r2, #20
 800cc26:	d522      	bpl.n	800cc6e <_scanf_i+0x142>
 800cc28:	f10b 0b01 	add.w	fp, fp, #1
 800cc2c:	f1b9 0f00 	cmp.w	r9, #0
 800cc30:	d003      	beq.n	800cc3a <_scanf_i+0x10e>
 800cc32:	3301      	adds	r3, #1
 800cc34:	f109 39ff 	add.w	r9, r9, #4294967295
 800cc38:	60a3      	str	r3, [r4, #8]
 800cc3a:	6873      	ldr	r3, [r6, #4]
 800cc3c:	3b01      	subs	r3, #1
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	6073      	str	r3, [r6, #4]
 800cc42:	dd1b      	ble.n	800cc7c <_scanf_i+0x150>
 800cc44:	6833      	ldr	r3, [r6, #0]
 800cc46:	3301      	adds	r3, #1
 800cc48:	6033      	str	r3, [r6, #0]
 800cc4a:	68a3      	ldr	r3, [r4, #8]
 800cc4c:	3b01      	subs	r3, #1
 800cc4e:	60a3      	str	r3, [r4, #8]
 800cc50:	e7d9      	b.n	800cc06 <_scanf_i+0xda>
 800cc52:	f1bb 0f02 	cmp.w	fp, #2
 800cc56:	d1ae      	bne.n	800cbb6 <_scanf_i+0x8a>
 800cc58:	6822      	ldr	r2, [r4, #0]
 800cc5a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800cc5e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800cc62:	d1c4      	bne.n	800cbee <_scanf_i+0xc2>
 800cc64:	2110      	movs	r1, #16
 800cc66:	6061      	str	r1, [r4, #4]
 800cc68:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cc6c:	e7a2      	b.n	800cbb4 <_scanf_i+0x88>
 800cc6e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800cc72:	6022      	str	r2, [r4, #0]
 800cc74:	780b      	ldrb	r3, [r1, #0]
 800cc76:	f805 3b01 	strb.w	r3, [r5], #1
 800cc7a:	e7de      	b.n	800cc3a <_scanf_i+0x10e>
 800cc7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cc80:	4631      	mov	r1, r6
 800cc82:	4650      	mov	r0, sl
 800cc84:	4798      	blx	r3
 800cc86:	2800      	cmp	r0, #0
 800cc88:	d0df      	beq.n	800cc4a <_scanf_i+0x11e>
 800cc8a:	6823      	ldr	r3, [r4, #0]
 800cc8c:	05d9      	lsls	r1, r3, #23
 800cc8e:	d50d      	bpl.n	800ccac <_scanf_i+0x180>
 800cc90:	42bd      	cmp	r5, r7
 800cc92:	d909      	bls.n	800cca8 <_scanf_i+0x17c>
 800cc94:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800cc98:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cc9c:	4632      	mov	r2, r6
 800cc9e:	4650      	mov	r0, sl
 800cca0:	4798      	blx	r3
 800cca2:	f105 39ff 	add.w	r9, r5, #4294967295
 800cca6:	464d      	mov	r5, r9
 800cca8:	42bd      	cmp	r5, r7
 800ccaa:	d028      	beq.n	800ccfe <_scanf_i+0x1d2>
 800ccac:	6822      	ldr	r2, [r4, #0]
 800ccae:	f012 0210 	ands.w	r2, r2, #16
 800ccb2:	d113      	bne.n	800ccdc <_scanf_i+0x1b0>
 800ccb4:	702a      	strb	r2, [r5, #0]
 800ccb6:	6863      	ldr	r3, [r4, #4]
 800ccb8:	9e01      	ldr	r6, [sp, #4]
 800ccba:	4639      	mov	r1, r7
 800ccbc:	4650      	mov	r0, sl
 800ccbe:	47b0      	blx	r6
 800ccc0:	f8d8 3000 	ldr.w	r3, [r8]
 800ccc4:	6821      	ldr	r1, [r4, #0]
 800ccc6:	1d1a      	adds	r2, r3, #4
 800ccc8:	f8c8 2000 	str.w	r2, [r8]
 800cccc:	f011 0f20 	tst.w	r1, #32
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	d00f      	beq.n	800ccf4 <_scanf_i+0x1c8>
 800ccd4:	6018      	str	r0, [r3, #0]
 800ccd6:	68e3      	ldr	r3, [r4, #12]
 800ccd8:	3301      	adds	r3, #1
 800ccda:	60e3      	str	r3, [r4, #12]
 800ccdc:	6923      	ldr	r3, [r4, #16]
 800ccde:	1bed      	subs	r5, r5, r7
 800cce0:	445d      	add	r5, fp
 800cce2:	442b      	add	r3, r5
 800cce4:	6123      	str	r3, [r4, #16]
 800cce6:	2000      	movs	r0, #0
 800cce8:	b007      	add	sp, #28
 800ccea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccee:	f04f 0b00 	mov.w	fp, #0
 800ccf2:	e7ca      	b.n	800cc8a <_scanf_i+0x15e>
 800ccf4:	07ca      	lsls	r2, r1, #31
 800ccf6:	bf4c      	ite	mi
 800ccf8:	8018      	strhmi	r0, [r3, #0]
 800ccfa:	6018      	strpl	r0, [r3, #0]
 800ccfc:	e7eb      	b.n	800ccd6 <_scanf_i+0x1aa>
 800ccfe:	2001      	movs	r0, #1
 800cd00:	e7f2      	b.n	800cce8 <_scanf_i+0x1bc>
 800cd02:	bf00      	nop
 800cd04:	0800db58 	.word	0x0800db58
 800cd08:	0800c1a1 	.word	0x0800c1a1
 800cd0c:	0800d935 	.word	0x0800d935
 800cd10:	0800dcec 	.word	0x0800dcec

0800cd14 <__sflush_r>:
 800cd14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cd18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd1c:	0716      	lsls	r6, r2, #28
 800cd1e:	4605      	mov	r5, r0
 800cd20:	460c      	mov	r4, r1
 800cd22:	d454      	bmi.n	800cdce <__sflush_r+0xba>
 800cd24:	684b      	ldr	r3, [r1, #4]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	dc02      	bgt.n	800cd30 <__sflush_r+0x1c>
 800cd2a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	dd48      	ble.n	800cdc2 <__sflush_r+0xae>
 800cd30:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cd32:	2e00      	cmp	r6, #0
 800cd34:	d045      	beq.n	800cdc2 <__sflush_r+0xae>
 800cd36:	2300      	movs	r3, #0
 800cd38:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cd3c:	682f      	ldr	r7, [r5, #0]
 800cd3e:	6a21      	ldr	r1, [r4, #32]
 800cd40:	602b      	str	r3, [r5, #0]
 800cd42:	d030      	beq.n	800cda6 <__sflush_r+0x92>
 800cd44:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cd46:	89a3      	ldrh	r3, [r4, #12]
 800cd48:	0759      	lsls	r1, r3, #29
 800cd4a:	d505      	bpl.n	800cd58 <__sflush_r+0x44>
 800cd4c:	6863      	ldr	r3, [r4, #4]
 800cd4e:	1ad2      	subs	r2, r2, r3
 800cd50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cd52:	b10b      	cbz	r3, 800cd58 <__sflush_r+0x44>
 800cd54:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cd56:	1ad2      	subs	r2, r2, r3
 800cd58:	2300      	movs	r3, #0
 800cd5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cd5c:	6a21      	ldr	r1, [r4, #32]
 800cd5e:	4628      	mov	r0, r5
 800cd60:	47b0      	blx	r6
 800cd62:	1c43      	adds	r3, r0, #1
 800cd64:	89a3      	ldrh	r3, [r4, #12]
 800cd66:	d106      	bne.n	800cd76 <__sflush_r+0x62>
 800cd68:	6829      	ldr	r1, [r5, #0]
 800cd6a:	291d      	cmp	r1, #29
 800cd6c:	d82b      	bhi.n	800cdc6 <__sflush_r+0xb2>
 800cd6e:	4a2a      	ldr	r2, [pc, #168]	@ (800ce18 <__sflush_r+0x104>)
 800cd70:	40ca      	lsrs	r2, r1
 800cd72:	07d6      	lsls	r6, r2, #31
 800cd74:	d527      	bpl.n	800cdc6 <__sflush_r+0xb2>
 800cd76:	2200      	movs	r2, #0
 800cd78:	6062      	str	r2, [r4, #4]
 800cd7a:	04d9      	lsls	r1, r3, #19
 800cd7c:	6922      	ldr	r2, [r4, #16]
 800cd7e:	6022      	str	r2, [r4, #0]
 800cd80:	d504      	bpl.n	800cd8c <__sflush_r+0x78>
 800cd82:	1c42      	adds	r2, r0, #1
 800cd84:	d101      	bne.n	800cd8a <__sflush_r+0x76>
 800cd86:	682b      	ldr	r3, [r5, #0]
 800cd88:	b903      	cbnz	r3, 800cd8c <__sflush_r+0x78>
 800cd8a:	6560      	str	r0, [r4, #84]	@ 0x54
 800cd8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cd8e:	602f      	str	r7, [r5, #0]
 800cd90:	b1b9      	cbz	r1, 800cdc2 <__sflush_r+0xae>
 800cd92:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cd96:	4299      	cmp	r1, r3
 800cd98:	d002      	beq.n	800cda0 <__sflush_r+0x8c>
 800cd9a:	4628      	mov	r0, r5
 800cd9c:	f7fd fdd4 	bl	800a948 <_free_r>
 800cda0:	2300      	movs	r3, #0
 800cda2:	6363      	str	r3, [r4, #52]	@ 0x34
 800cda4:	e00d      	b.n	800cdc2 <__sflush_r+0xae>
 800cda6:	2301      	movs	r3, #1
 800cda8:	4628      	mov	r0, r5
 800cdaa:	47b0      	blx	r6
 800cdac:	4602      	mov	r2, r0
 800cdae:	1c50      	adds	r0, r2, #1
 800cdb0:	d1c9      	bne.n	800cd46 <__sflush_r+0x32>
 800cdb2:	682b      	ldr	r3, [r5, #0]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d0c6      	beq.n	800cd46 <__sflush_r+0x32>
 800cdb8:	2b1d      	cmp	r3, #29
 800cdba:	d001      	beq.n	800cdc0 <__sflush_r+0xac>
 800cdbc:	2b16      	cmp	r3, #22
 800cdbe:	d11e      	bne.n	800cdfe <__sflush_r+0xea>
 800cdc0:	602f      	str	r7, [r5, #0]
 800cdc2:	2000      	movs	r0, #0
 800cdc4:	e022      	b.n	800ce0c <__sflush_r+0xf8>
 800cdc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cdca:	b21b      	sxth	r3, r3
 800cdcc:	e01b      	b.n	800ce06 <__sflush_r+0xf2>
 800cdce:	690f      	ldr	r7, [r1, #16]
 800cdd0:	2f00      	cmp	r7, #0
 800cdd2:	d0f6      	beq.n	800cdc2 <__sflush_r+0xae>
 800cdd4:	0793      	lsls	r3, r2, #30
 800cdd6:	680e      	ldr	r6, [r1, #0]
 800cdd8:	bf08      	it	eq
 800cdda:	694b      	ldreq	r3, [r1, #20]
 800cddc:	600f      	str	r7, [r1, #0]
 800cdde:	bf18      	it	ne
 800cde0:	2300      	movne	r3, #0
 800cde2:	eba6 0807 	sub.w	r8, r6, r7
 800cde6:	608b      	str	r3, [r1, #8]
 800cde8:	f1b8 0f00 	cmp.w	r8, #0
 800cdec:	dde9      	ble.n	800cdc2 <__sflush_r+0xae>
 800cdee:	6a21      	ldr	r1, [r4, #32]
 800cdf0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cdf2:	4643      	mov	r3, r8
 800cdf4:	463a      	mov	r2, r7
 800cdf6:	4628      	mov	r0, r5
 800cdf8:	47b0      	blx	r6
 800cdfa:	2800      	cmp	r0, #0
 800cdfc:	dc08      	bgt.n	800ce10 <__sflush_r+0xfc>
 800cdfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ce06:	81a3      	strh	r3, [r4, #12]
 800ce08:	f04f 30ff 	mov.w	r0, #4294967295
 800ce0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce10:	4407      	add	r7, r0
 800ce12:	eba8 0800 	sub.w	r8, r8, r0
 800ce16:	e7e7      	b.n	800cde8 <__sflush_r+0xd4>
 800ce18:	20400001 	.word	0x20400001

0800ce1c <_fflush_r>:
 800ce1c:	b538      	push	{r3, r4, r5, lr}
 800ce1e:	690b      	ldr	r3, [r1, #16]
 800ce20:	4605      	mov	r5, r0
 800ce22:	460c      	mov	r4, r1
 800ce24:	b913      	cbnz	r3, 800ce2c <_fflush_r+0x10>
 800ce26:	2500      	movs	r5, #0
 800ce28:	4628      	mov	r0, r5
 800ce2a:	bd38      	pop	{r3, r4, r5, pc}
 800ce2c:	b118      	cbz	r0, 800ce36 <_fflush_r+0x1a>
 800ce2e:	6a03      	ldr	r3, [r0, #32]
 800ce30:	b90b      	cbnz	r3, 800ce36 <_fflush_r+0x1a>
 800ce32:	f7fc fbf3 	bl	800961c <__sinit>
 800ce36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d0f3      	beq.n	800ce26 <_fflush_r+0xa>
 800ce3e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ce40:	07d0      	lsls	r0, r2, #31
 800ce42:	d404      	bmi.n	800ce4e <_fflush_r+0x32>
 800ce44:	0599      	lsls	r1, r3, #22
 800ce46:	d402      	bmi.n	800ce4e <_fflush_r+0x32>
 800ce48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ce4a:	f7fc ff1c 	bl	8009c86 <__retarget_lock_acquire_recursive>
 800ce4e:	4628      	mov	r0, r5
 800ce50:	4621      	mov	r1, r4
 800ce52:	f7ff ff5f 	bl	800cd14 <__sflush_r>
 800ce56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ce58:	07da      	lsls	r2, r3, #31
 800ce5a:	4605      	mov	r5, r0
 800ce5c:	d4e4      	bmi.n	800ce28 <_fflush_r+0xc>
 800ce5e:	89a3      	ldrh	r3, [r4, #12]
 800ce60:	059b      	lsls	r3, r3, #22
 800ce62:	d4e1      	bmi.n	800ce28 <_fflush_r+0xc>
 800ce64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ce66:	f7fc ff0f 	bl	8009c88 <__retarget_lock_release_recursive>
 800ce6a:	e7dd      	b.n	800ce28 <_fflush_r+0xc>

0800ce6c <__swhatbuf_r>:
 800ce6c:	b570      	push	{r4, r5, r6, lr}
 800ce6e:	460c      	mov	r4, r1
 800ce70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce74:	2900      	cmp	r1, #0
 800ce76:	b096      	sub	sp, #88	@ 0x58
 800ce78:	4615      	mov	r5, r2
 800ce7a:	461e      	mov	r6, r3
 800ce7c:	da0d      	bge.n	800ce9a <__swhatbuf_r+0x2e>
 800ce7e:	89a3      	ldrh	r3, [r4, #12]
 800ce80:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ce84:	f04f 0100 	mov.w	r1, #0
 800ce88:	bf14      	ite	ne
 800ce8a:	2340      	movne	r3, #64	@ 0x40
 800ce8c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ce90:	2000      	movs	r0, #0
 800ce92:	6031      	str	r1, [r6, #0]
 800ce94:	602b      	str	r3, [r5, #0]
 800ce96:	b016      	add	sp, #88	@ 0x58
 800ce98:	bd70      	pop	{r4, r5, r6, pc}
 800ce9a:	466a      	mov	r2, sp
 800ce9c:	f000 f8e8 	bl	800d070 <_fstat_r>
 800cea0:	2800      	cmp	r0, #0
 800cea2:	dbec      	blt.n	800ce7e <__swhatbuf_r+0x12>
 800cea4:	9901      	ldr	r1, [sp, #4]
 800cea6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ceaa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ceae:	4259      	negs	r1, r3
 800ceb0:	4159      	adcs	r1, r3
 800ceb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ceb6:	e7eb      	b.n	800ce90 <__swhatbuf_r+0x24>

0800ceb8 <__smakebuf_r>:
 800ceb8:	898b      	ldrh	r3, [r1, #12]
 800ceba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cebc:	079d      	lsls	r5, r3, #30
 800cebe:	4606      	mov	r6, r0
 800cec0:	460c      	mov	r4, r1
 800cec2:	d507      	bpl.n	800ced4 <__smakebuf_r+0x1c>
 800cec4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cec8:	6023      	str	r3, [r4, #0]
 800ceca:	6123      	str	r3, [r4, #16]
 800cecc:	2301      	movs	r3, #1
 800cece:	6163      	str	r3, [r4, #20]
 800ced0:	b003      	add	sp, #12
 800ced2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ced4:	ab01      	add	r3, sp, #4
 800ced6:	466a      	mov	r2, sp
 800ced8:	f7ff ffc8 	bl	800ce6c <__swhatbuf_r>
 800cedc:	9f00      	ldr	r7, [sp, #0]
 800cede:	4605      	mov	r5, r0
 800cee0:	4639      	mov	r1, r7
 800cee2:	4630      	mov	r0, r6
 800cee4:	f7fd fda4 	bl	800aa30 <_malloc_r>
 800cee8:	b948      	cbnz	r0, 800cefe <__smakebuf_r+0x46>
 800ceea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ceee:	059a      	lsls	r2, r3, #22
 800cef0:	d4ee      	bmi.n	800ced0 <__smakebuf_r+0x18>
 800cef2:	f023 0303 	bic.w	r3, r3, #3
 800cef6:	f043 0302 	orr.w	r3, r3, #2
 800cefa:	81a3      	strh	r3, [r4, #12]
 800cefc:	e7e2      	b.n	800cec4 <__smakebuf_r+0xc>
 800cefe:	89a3      	ldrh	r3, [r4, #12]
 800cf00:	6020      	str	r0, [r4, #0]
 800cf02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf06:	81a3      	strh	r3, [r4, #12]
 800cf08:	9b01      	ldr	r3, [sp, #4]
 800cf0a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cf0e:	b15b      	cbz	r3, 800cf28 <__smakebuf_r+0x70>
 800cf10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf14:	4630      	mov	r0, r6
 800cf16:	f000 f8bd 	bl	800d094 <_isatty_r>
 800cf1a:	b128      	cbz	r0, 800cf28 <__smakebuf_r+0x70>
 800cf1c:	89a3      	ldrh	r3, [r4, #12]
 800cf1e:	f023 0303 	bic.w	r3, r3, #3
 800cf22:	f043 0301 	orr.w	r3, r3, #1
 800cf26:	81a3      	strh	r3, [r4, #12]
 800cf28:	89a3      	ldrh	r3, [r4, #12]
 800cf2a:	431d      	orrs	r5, r3
 800cf2c:	81a5      	strh	r5, [r4, #12]
 800cf2e:	e7cf      	b.n	800ced0 <__smakebuf_r+0x18>

0800cf30 <__sccl>:
 800cf30:	b570      	push	{r4, r5, r6, lr}
 800cf32:	780b      	ldrb	r3, [r1, #0]
 800cf34:	4604      	mov	r4, r0
 800cf36:	2b5e      	cmp	r3, #94	@ 0x5e
 800cf38:	bf0b      	itete	eq
 800cf3a:	784b      	ldrbeq	r3, [r1, #1]
 800cf3c:	1c4a      	addne	r2, r1, #1
 800cf3e:	1c8a      	addeq	r2, r1, #2
 800cf40:	2100      	movne	r1, #0
 800cf42:	bf08      	it	eq
 800cf44:	2101      	moveq	r1, #1
 800cf46:	3801      	subs	r0, #1
 800cf48:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800cf4c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800cf50:	42a8      	cmp	r0, r5
 800cf52:	d1fb      	bne.n	800cf4c <__sccl+0x1c>
 800cf54:	b90b      	cbnz	r3, 800cf5a <__sccl+0x2a>
 800cf56:	1e50      	subs	r0, r2, #1
 800cf58:	bd70      	pop	{r4, r5, r6, pc}
 800cf5a:	f081 0101 	eor.w	r1, r1, #1
 800cf5e:	54e1      	strb	r1, [r4, r3]
 800cf60:	4610      	mov	r0, r2
 800cf62:	4602      	mov	r2, r0
 800cf64:	f812 5b01 	ldrb.w	r5, [r2], #1
 800cf68:	2d2d      	cmp	r5, #45	@ 0x2d
 800cf6a:	d005      	beq.n	800cf78 <__sccl+0x48>
 800cf6c:	2d5d      	cmp	r5, #93	@ 0x5d
 800cf6e:	d016      	beq.n	800cf9e <__sccl+0x6e>
 800cf70:	2d00      	cmp	r5, #0
 800cf72:	d0f1      	beq.n	800cf58 <__sccl+0x28>
 800cf74:	462b      	mov	r3, r5
 800cf76:	e7f2      	b.n	800cf5e <__sccl+0x2e>
 800cf78:	7846      	ldrb	r6, [r0, #1]
 800cf7a:	2e5d      	cmp	r6, #93	@ 0x5d
 800cf7c:	d0fa      	beq.n	800cf74 <__sccl+0x44>
 800cf7e:	42b3      	cmp	r3, r6
 800cf80:	dcf8      	bgt.n	800cf74 <__sccl+0x44>
 800cf82:	3002      	adds	r0, #2
 800cf84:	461a      	mov	r2, r3
 800cf86:	3201      	adds	r2, #1
 800cf88:	4296      	cmp	r6, r2
 800cf8a:	54a1      	strb	r1, [r4, r2]
 800cf8c:	dcfb      	bgt.n	800cf86 <__sccl+0x56>
 800cf8e:	1af2      	subs	r2, r6, r3
 800cf90:	3a01      	subs	r2, #1
 800cf92:	1c5d      	adds	r5, r3, #1
 800cf94:	42b3      	cmp	r3, r6
 800cf96:	bfa8      	it	ge
 800cf98:	2200      	movge	r2, #0
 800cf9a:	18ab      	adds	r3, r5, r2
 800cf9c:	e7e1      	b.n	800cf62 <__sccl+0x32>
 800cf9e:	4610      	mov	r0, r2
 800cfa0:	e7da      	b.n	800cf58 <__sccl+0x28>

0800cfa2 <__submore>:
 800cfa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfa6:	460c      	mov	r4, r1
 800cfa8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800cfaa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cfae:	4299      	cmp	r1, r3
 800cfb0:	d11d      	bne.n	800cfee <__submore+0x4c>
 800cfb2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800cfb6:	f7fd fd3b 	bl	800aa30 <_malloc_r>
 800cfba:	b918      	cbnz	r0, 800cfc4 <__submore+0x22>
 800cfbc:	f04f 30ff 	mov.w	r0, #4294967295
 800cfc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cfc8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800cfca:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800cfce:	6360      	str	r0, [r4, #52]	@ 0x34
 800cfd0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800cfd4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800cfd8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800cfdc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800cfe0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800cfe4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800cfe8:	6020      	str	r0, [r4, #0]
 800cfea:	2000      	movs	r0, #0
 800cfec:	e7e8      	b.n	800cfc0 <__submore+0x1e>
 800cfee:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800cff0:	0077      	lsls	r7, r6, #1
 800cff2:	463a      	mov	r2, r7
 800cff4:	f000 fc01 	bl	800d7fa <_realloc_r>
 800cff8:	4605      	mov	r5, r0
 800cffa:	2800      	cmp	r0, #0
 800cffc:	d0de      	beq.n	800cfbc <__submore+0x1a>
 800cffe:	eb00 0806 	add.w	r8, r0, r6
 800d002:	4601      	mov	r1, r0
 800d004:	4632      	mov	r2, r6
 800d006:	4640      	mov	r0, r8
 800d008:	f000 f864 	bl	800d0d4 <memcpy>
 800d00c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800d010:	f8c4 8000 	str.w	r8, [r4]
 800d014:	e7e9      	b.n	800cfea <__submore+0x48>

0800d016 <memmove>:
 800d016:	4288      	cmp	r0, r1
 800d018:	b510      	push	{r4, lr}
 800d01a:	eb01 0402 	add.w	r4, r1, r2
 800d01e:	d902      	bls.n	800d026 <memmove+0x10>
 800d020:	4284      	cmp	r4, r0
 800d022:	4623      	mov	r3, r4
 800d024:	d807      	bhi.n	800d036 <memmove+0x20>
 800d026:	1e43      	subs	r3, r0, #1
 800d028:	42a1      	cmp	r1, r4
 800d02a:	d008      	beq.n	800d03e <memmove+0x28>
 800d02c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d030:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d034:	e7f8      	b.n	800d028 <memmove+0x12>
 800d036:	4402      	add	r2, r0
 800d038:	4601      	mov	r1, r0
 800d03a:	428a      	cmp	r2, r1
 800d03c:	d100      	bne.n	800d040 <memmove+0x2a>
 800d03e:	bd10      	pop	{r4, pc}
 800d040:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d044:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d048:	e7f7      	b.n	800d03a <memmove+0x24>

0800d04a <strncmp>:
 800d04a:	b510      	push	{r4, lr}
 800d04c:	b16a      	cbz	r2, 800d06a <strncmp+0x20>
 800d04e:	3901      	subs	r1, #1
 800d050:	1884      	adds	r4, r0, r2
 800d052:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d056:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d05a:	429a      	cmp	r2, r3
 800d05c:	d103      	bne.n	800d066 <strncmp+0x1c>
 800d05e:	42a0      	cmp	r0, r4
 800d060:	d001      	beq.n	800d066 <strncmp+0x1c>
 800d062:	2a00      	cmp	r2, #0
 800d064:	d1f5      	bne.n	800d052 <strncmp+0x8>
 800d066:	1ad0      	subs	r0, r2, r3
 800d068:	bd10      	pop	{r4, pc}
 800d06a:	4610      	mov	r0, r2
 800d06c:	e7fc      	b.n	800d068 <strncmp+0x1e>
	...

0800d070 <_fstat_r>:
 800d070:	b538      	push	{r3, r4, r5, lr}
 800d072:	4d07      	ldr	r5, [pc, #28]	@ (800d090 <_fstat_r+0x20>)
 800d074:	2300      	movs	r3, #0
 800d076:	4604      	mov	r4, r0
 800d078:	4608      	mov	r0, r1
 800d07a:	4611      	mov	r1, r2
 800d07c:	602b      	str	r3, [r5, #0]
 800d07e:	f7f5 fb1d 	bl	80026bc <_fstat>
 800d082:	1c43      	adds	r3, r0, #1
 800d084:	d102      	bne.n	800d08c <_fstat_r+0x1c>
 800d086:	682b      	ldr	r3, [r5, #0]
 800d088:	b103      	cbz	r3, 800d08c <_fstat_r+0x1c>
 800d08a:	6023      	str	r3, [r4, #0]
 800d08c:	bd38      	pop	{r3, r4, r5, pc}
 800d08e:	bf00      	nop
 800d090:	200006bc 	.word	0x200006bc

0800d094 <_isatty_r>:
 800d094:	b538      	push	{r3, r4, r5, lr}
 800d096:	4d06      	ldr	r5, [pc, #24]	@ (800d0b0 <_isatty_r+0x1c>)
 800d098:	2300      	movs	r3, #0
 800d09a:	4604      	mov	r4, r0
 800d09c:	4608      	mov	r0, r1
 800d09e:	602b      	str	r3, [r5, #0]
 800d0a0:	f7f5 fb1c 	bl	80026dc <_isatty>
 800d0a4:	1c43      	adds	r3, r0, #1
 800d0a6:	d102      	bne.n	800d0ae <_isatty_r+0x1a>
 800d0a8:	682b      	ldr	r3, [r5, #0]
 800d0aa:	b103      	cbz	r3, 800d0ae <_isatty_r+0x1a>
 800d0ac:	6023      	str	r3, [r4, #0]
 800d0ae:	bd38      	pop	{r3, r4, r5, pc}
 800d0b0:	200006bc 	.word	0x200006bc

0800d0b4 <_sbrk_r>:
 800d0b4:	b538      	push	{r3, r4, r5, lr}
 800d0b6:	4d06      	ldr	r5, [pc, #24]	@ (800d0d0 <_sbrk_r+0x1c>)
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	4604      	mov	r4, r0
 800d0bc:	4608      	mov	r0, r1
 800d0be:	602b      	str	r3, [r5, #0]
 800d0c0:	f7f5 fb24 	bl	800270c <_sbrk>
 800d0c4:	1c43      	adds	r3, r0, #1
 800d0c6:	d102      	bne.n	800d0ce <_sbrk_r+0x1a>
 800d0c8:	682b      	ldr	r3, [r5, #0]
 800d0ca:	b103      	cbz	r3, 800d0ce <_sbrk_r+0x1a>
 800d0cc:	6023      	str	r3, [r4, #0]
 800d0ce:	bd38      	pop	{r3, r4, r5, pc}
 800d0d0:	200006bc 	.word	0x200006bc

0800d0d4 <memcpy>:
 800d0d4:	440a      	add	r2, r1
 800d0d6:	4291      	cmp	r1, r2
 800d0d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d0dc:	d100      	bne.n	800d0e0 <memcpy+0xc>
 800d0de:	4770      	bx	lr
 800d0e0:	b510      	push	{r4, lr}
 800d0e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d0ea:	4291      	cmp	r1, r2
 800d0ec:	d1f9      	bne.n	800d0e2 <memcpy+0xe>
 800d0ee:	bd10      	pop	{r4, pc}

0800d0f0 <nan>:
 800d0f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d0f8 <nan+0x8>
 800d0f4:	4770      	bx	lr
 800d0f6:	bf00      	nop
 800d0f8:	00000000 	.word	0x00000000
 800d0fc:	7ff80000 	.word	0x7ff80000

0800d100 <__assert_func>:
 800d100:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d102:	4614      	mov	r4, r2
 800d104:	461a      	mov	r2, r3
 800d106:	4b09      	ldr	r3, [pc, #36]	@ (800d12c <__assert_func+0x2c>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	4605      	mov	r5, r0
 800d10c:	68d8      	ldr	r0, [r3, #12]
 800d10e:	b14c      	cbz	r4, 800d124 <__assert_func+0x24>
 800d110:	4b07      	ldr	r3, [pc, #28]	@ (800d130 <__assert_func+0x30>)
 800d112:	9100      	str	r1, [sp, #0]
 800d114:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d118:	4906      	ldr	r1, [pc, #24]	@ (800d134 <__assert_func+0x34>)
 800d11a:	462b      	mov	r3, r5
 800d11c:	f000 fc1a 	bl	800d954 <fiprintf>
 800d120:	f000 fc2a 	bl	800d978 <abort>
 800d124:	4b04      	ldr	r3, [pc, #16]	@ (800d138 <__assert_func+0x38>)
 800d126:	461c      	mov	r4, r3
 800d128:	e7f3      	b.n	800d112 <__assert_func+0x12>
 800d12a:	bf00      	nop
 800d12c:	20000018 	.word	0x20000018
 800d130:	0800dcff 	.word	0x0800dcff
 800d134:	0800dd0c 	.word	0x0800dd0c
 800d138:	0800dd3a 	.word	0x0800dd3a

0800d13c <_calloc_r>:
 800d13c:	b570      	push	{r4, r5, r6, lr}
 800d13e:	fba1 5402 	umull	r5, r4, r1, r2
 800d142:	b934      	cbnz	r4, 800d152 <_calloc_r+0x16>
 800d144:	4629      	mov	r1, r5
 800d146:	f7fd fc73 	bl	800aa30 <_malloc_r>
 800d14a:	4606      	mov	r6, r0
 800d14c:	b928      	cbnz	r0, 800d15a <_calloc_r+0x1e>
 800d14e:	4630      	mov	r0, r6
 800d150:	bd70      	pop	{r4, r5, r6, pc}
 800d152:	220c      	movs	r2, #12
 800d154:	6002      	str	r2, [r0, #0]
 800d156:	2600      	movs	r6, #0
 800d158:	e7f9      	b.n	800d14e <_calloc_r+0x12>
 800d15a:	462a      	mov	r2, r5
 800d15c:	4621      	mov	r1, r4
 800d15e:	f7fc fd15 	bl	8009b8c <memset>
 800d162:	e7f4      	b.n	800d14e <_calloc_r+0x12>

0800d164 <rshift>:
 800d164:	6903      	ldr	r3, [r0, #16]
 800d166:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d16a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d16e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d172:	f100 0414 	add.w	r4, r0, #20
 800d176:	dd45      	ble.n	800d204 <rshift+0xa0>
 800d178:	f011 011f 	ands.w	r1, r1, #31
 800d17c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d180:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d184:	d10c      	bne.n	800d1a0 <rshift+0x3c>
 800d186:	f100 0710 	add.w	r7, r0, #16
 800d18a:	4629      	mov	r1, r5
 800d18c:	42b1      	cmp	r1, r6
 800d18e:	d334      	bcc.n	800d1fa <rshift+0x96>
 800d190:	1a9b      	subs	r3, r3, r2
 800d192:	009b      	lsls	r3, r3, #2
 800d194:	1eea      	subs	r2, r5, #3
 800d196:	4296      	cmp	r6, r2
 800d198:	bf38      	it	cc
 800d19a:	2300      	movcc	r3, #0
 800d19c:	4423      	add	r3, r4
 800d19e:	e015      	b.n	800d1cc <rshift+0x68>
 800d1a0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d1a4:	f1c1 0820 	rsb	r8, r1, #32
 800d1a8:	40cf      	lsrs	r7, r1
 800d1aa:	f105 0e04 	add.w	lr, r5, #4
 800d1ae:	46a1      	mov	r9, r4
 800d1b0:	4576      	cmp	r6, lr
 800d1b2:	46f4      	mov	ip, lr
 800d1b4:	d815      	bhi.n	800d1e2 <rshift+0x7e>
 800d1b6:	1a9a      	subs	r2, r3, r2
 800d1b8:	0092      	lsls	r2, r2, #2
 800d1ba:	3a04      	subs	r2, #4
 800d1bc:	3501      	adds	r5, #1
 800d1be:	42ae      	cmp	r6, r5
 800d1c0:	bf38      	it	cc
 800d1c2:	2200      	movcc	r2, #0
 800d1c4:	18a3      	adds	r3, r4, r2
 800d1c6:	50a7      	str	r7, [r4, r2]
 800d1c8:	b107      	cbz	r7, 800d1cc <rshift+0x68>
 800d1ca:	3304      	adds	r3, #4
 800d1cc:	1b1a      	subs	r2, r3, r4
 800d1ce:	42a3      	cmp	r3, r4
 800d1d0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d1d4:	bf08      	it	eq
 800d1d6:	2300      	moveq	r3, #0
 800d1d8:	6102      	str	r2, [r0, #16]
 800d1da:	bf08      	it	eq
 800d1dc:	6143      	streq	r3, [r0, #20]
 800d1de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1e2:	f8dc c000 	ldr.w	ip, [ip]
 800d1e6:	fa0c fc08 	lsl.w	ip, ip, r8
 800d1ea:	ea4c 0707 	orr.w	r7, ip, r7
 800d1ee:	f849 7b04 	str.w	r7, [r9], #4
 800d1f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d1f6:	40cf      	lsrs	r7, r1
 800d1f8:	e7da      	b.n	800d1b0 <rshift+0x4c>
 800d1fa:	f851 cb04 	ldr.w	ip, [r1], #4
 800d1fe:	f847 cf04 	str.w	ip, [r7, #4]!
 800d202:	e7c3      	b.n	800d18c <rshift+0x28>
 800d204:	4623      	mov	r3, r4
 800d206:	e7e1      	b.n	800d1cc <rshift+0x68>

0800d208 <__hexdig_fun>:
 800d208:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800d20c:	2b09      	cmp	r3, #9
 800d20e:	d802      	bhi.n	800d216 <__hexdig_fun+0xe>
 800d210:	3820      	subs	r0, #32
 800d212:	b2c0      	uxtb	r0, r0
 800d214:	4770      	bx	lr
 800d216:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800d21a:	2b05      	cmp	r3, #5
 800d21c:	d801      	bhi.n	800d222 <__hexdig_fun+0x1a>
 800d21e:	3847      	subs	r0, #71	@ 0x47
 800d220:	e7f7      	b.n	800d212 <__hexdig_fun+0xa>
 800d222:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800d226:	2b05      	cmp	r3, #5
 800d228:	d801      	bhi.n	800d22e <__hexdig_fun+0x26>
 800d22a:	3827      	subs	r0, #39	@ 0x27
 800d22c:	e7f1      	b.n	800d212 <__hexdig_fun+0xa>
 800d22e:	2000      	movs	r0, #0
 800d230:	4770      	bx	lr
	...

0800d234 <__gethex>:
 800d234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d238:	b085      	sub	sp, #20
 800d23a:	468a      	mov	sl, r1
 800d23c:	9302      	str	r3, [sp, #8]
 800d23e:	680b      	ldr	r3, [r1, #0]
 800d240:	9001      	str	r0, [sp, #4]
 800d242:	4690      	mov	r8, r2
 800d244:	1c9c      	adds	r4, r3, #2
 800d246:	46a1      	mov	r9, r4
 800d248:	f814 0b01 	ldrb.w	r0, [r4], #1
 800d24c:	2830      	cmp	r0, #48	@ 0x30
 800d24e:	d0fa      	beq.n	800d246 <__gethex+0x12>
 800d250:	eba9 0303 	sub.w	r3, r9, r3
 800d254:	f1a3 0b02 	sub.w	fp, r3, #2
 800d258:	f7ff ffd6 	bl	800d208 <__hexdig_fun>
 800d25c:	4605      	mov	r5, r0
 800d25e:	2800      	cmp	r0, #0
 800d260:	d168      	bne.n	800d334 <__gethex+0x100>
 800d262:	49a0      	ldr	r1, [pc, #640]	@ (800d4e4 <__gethex+0x2b0>)
 800d264:	2201      	movs	r2, #1
 800d266:	4648      	mov	r0, r9
 800d268:	f7ff feef 	bl	800d04a <strncmp>
 800d26c:	4607      	mov	r7, r0
 800d26e:	2800      	cmp	r0, #0
 800d270:	d167      	bne.n	800d342 <__gethex+0x10e>
 800d272:	f899 0001 	ldrb.w	r0, [r9, #1]
 800d276:	4626      	mov	r6, r4
 800d278:	f7ff ffc6 	bl	800d208 <__hexdig_fun>
 800d27c:	2800      	cmp	r0, #0
 800d27e:	d062      	beq.n	800d346 <__gethex+0x112>
 800d280:	4623      	mov	r3, r4
 800d282:	7818      	ldrb	r0, [r3, #0]
 800d284:	2830      	cmp	r0, #48	@ 0x30
 800d286:	4699      	mov	r9, r3
 800d288:	f103 0301 	add.w	r3, r3, #1
 800d28c:	d0f9      	beq.n	800d282 <__gethex+0x4e>
 800d28e:	f7ff ffbb 	bl	800d208 <__hexdig_fun>
 800d292:	fab0 f580 	clz	r5, r0
 800d296:	096d      	lsrs	r5, r5, #5
 800d298:	f04f 0b01 	mov.w	fp, #1
 800d29c:	464a      	mov	r2, r9
 800d29e:	4616      	mov	r6, r2
 800d2a0:	3201      	adds	r2, #1
 800d2a2:	7830      	ldrb	r0, [r6, #0]
 800d2a4:	f7ff ffb0 	bl	800d208 <__hexdig_fun>
 800d2a8:	2800      	cmp	r0, #0
 800d2aa:	d1f8      	bne.n	800d29e <__gethex+0x6a>
 800d2ac:	498d      	ldr	r1, [pc, #564]	@ (800d4e4 <__gethex+0x2b0>)
 800d2ae:	2201      	movs	r2, #1
 800d2b0:	4630      	mov	r0, r6
 800d2b2:	f7ff feca 	bl	800d04a <strncmp>
 800d2b6:	2800      	cmp	r0, #0
 800d2b8:	d13f      	bne.n	800d33a <__gethex+0x106>
 800d2ba:	b944      	cbnz	r4, 800d2ce <__gethex+0x9a>
 800d2bc:	1c74      	adds	r4, r6, #1
 800d2be:	4622      	mov	r2, r4
 800d2c0:	4616      	mov	r6, r2
 800d2c2:	3201      	adds	r2, #1
 800d2c4:	7830      	ldrb	r0, [r6, #0]
 800d2c6:	f7ff ff9f 	bl	800d208 <__hexdig_fun>
 800d2ca:	2800      	cmp	r0, #0
 800d2cc:	d1f8      	bne.n	800d2c0 <__gethex+0x8c>
 800d2ce:	1ba4      	subs	r4, r4, r6
 800d2d0:	00a7      	lsls	r7, r4, #2
 800d2d2:	7833      	ldrb	r3, [r6, #0]
 800d2d4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800d2d8:	2b50      	cmp	r3, #80	@ 0x50
 800d2da:	d13e      	bne.n	800d35a <__gethex+0x126>
 800d2dc:	7873      	ldrb	r3, [r6, #1]
 800d2de:	2b2b      	cmp	r3, #43	@ 0x2b
 800d2e0:	d033      	beq.n	800d34a <__gethex+0x116>
 800d2e2:	2b2d      	cmp	r3, #45	@ 0x2d
 800d2e4:	d034      	beq.n	800d350 <__gethex+0x11c>
 800d2e6:	1c71      	adds	r1, r6, #1
 800d2e8:	2400      	movs	r4, #0
 800d2ea:	7808      	ldrb	r0, [r1, #0]
 800d2ec:	f7ff ff8c 	bl	800d208 <__hexdig_fun>
 800d2f0:	1e43      	subs	r3, r0, #1
 800d2f2:	b2db      	uxtb	r3, r3
 800d2f4:	2b18      	cmp	r3, #24
 800d2f6:	d830      	bhi.n	800d35a <__gethex+0x126>
 800d2f8:	f1a0 0210 	sub.w	r2, r0, #16
 800d2fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d300:	f7ff ff82 	bl	800d208 <__hexdig_fun>
 800d304:	f100 3cff 	add.w	ip, r0, #4294967295
 800d308:	fa5f fc8c 	uxtb.w	ip, ip
 800d30c:	f1bc 0f18 	cmp.w	ip, #24
 800d310:	f04f 030a 	mov.w	r3, #10
 800d314:	d91e      	bls.n	800d354 <__gethex+0x120>
 800d316:	b104      	cbz	r4, 800d31a <__gethex+0xe6>
 800d318:	4252      	negs	r2, r2
 800d31a:	4417      	add	r7, r2
 800d31c:	f8ca 1000 	str.w	r1, [sl]
 800d320:	b1ed      	cbz	r5, 800d35e <__gethex+0x12a>
 800d322:	f1bb 0f00 	cmp.w	fp, #0
 800d326:	bf0c      	ite	eq
 800d328:	2506      	moveq	r5, #6
 800d32a:	2500      	movne	r5, #0
 800d32c:	4628      	mov	r0, r5
 800d32e:	b005      	add	sp, #20
 800d330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d334:	2500      	movs	r5, #0
 800d336:	462c      	mov	r4, r5
 800d338:	e7b0      	b.n	800d29c <__gethex+0x68>
 800d33a:	2c00      	cmp	r4, #0
 800d33c:	d1c7      	bne.n	800d2ce <__gethex+0x9a>
 800d33e:	4627      	mov	r7, r4
 800d340:	e7c7      	b.n	800d2d2 <__gethex+0x9e>
 800d342:	464e      	mov	r6, r9
 800d344:	462f      	mov	r7, r5
 800d346:	2501      	movs	r5, #1
 800d348:	e7c3      	b.n	800d2d2 <__gethex+0x9e>
 800d34a:	2400      	movs	r4, #0
 800d34c:	1cb1      	adds	r1, r6, #2
 800d34e:	e7cc      	b.n	800d2ea <__gethex+0xb6>
 800d350:	2401      	movs	r4, #1
 800d352:	e7fb      	b.n	800d34c <__gethex+0x118>
 800d354:	fb03 0002 	mla	r0, r3, r2, r0
 800d358:	e7ce      	b.n	800d2f8 <__gethex+0xc4>
 800d35a:	4631      	mov	r1, r6
 800d35c:	e7de      	b.n	800d31c <__gethex+0xe8>
 800d35e:	eba6 0309 	sub.w	r3, r6, r9
 800d362:	3b01      	subs	r3, #1
 800d364:	4629      	mov	r1, r5
 800d366:	2b07      	cmp	r3, #7
 800d368:	dc0a      	bgt.n	800d380 <__gethex+0x14c>
 800d36a:	9801      	ldr	r0, [sp, #4]
 800d36c:	f7fd fbec 	bl	800ab48 <_Balloc>
 800d370:	4604      	mov	r4, r0
 800d372:	b940      	cbnz	r0, 800d386 <__gethex+0x152>
 800d374:	4b5c      	ldr	r3, [pc, #368]	@ (800d4e8 <__gethex+0x2b4>)
 800d376:	4602      	mov	r2, r0
 800d378:	21e4      	movs	r1, #228	@ 0xe4
 800d37a:	485c      	ldr	r0, [pc, #368]	@ (800d4ec <__gethex+0x2b8>)
 800d37c:	f7ff fec0 	bl	800d100 <__assert_func>
 800d380:	3101      	adds	r1, #1
 800d382:	105b      	asrs	r3, r3, #1
 800d384:	e7ef      	b.n	800d366 <__gethex+0x132>
 800d386:	f100 0a14 	add.w	sl, r0, #20
 800d38a:	2300      	movs	r3, #0
 800d38c:	4655      	mov	r5, sl
 800d38e:	469b      	mov	fp, r3
 800d390:	45b1      	cmp	r9, r6
 800d392:	d337      	bcc.n	800d404 <__gethex+0x1d0>
 800d394:	f845 bb04 	str.w	fp, [r5], #4
 800d398:	eba5 050a 	sub.w	r5, r5, sl
 800d39c:	10ad      	asrs	r5, r5, #2
 800d39e:	6125      	str	r5, [r4, #16]
 800d3a0:	4658      	mov	r0, fp
 800d3a2:	f7fd fcc3 	bl	800ad2c <__hi0bits>
 800d3a6:	016d      	lsls	r5, r5, #5
 800d3a8:	f8d8 6000 	ldr.w	r6, [r8]
 800d3ac:	1a2d      	subs	r5, r5, r0
 800d3ae:	42b5      	cmp	r5, r6
 800d3b0:	dd54      	ble.n	800d45c <__gethex+0x228>
 800d3b2:	1bad      	subs	r5, r5, r6
 800d3b4:	4629      	mov	r1, r5
 800d3b6:	4620      	mov	r0, r4
 800d3b8:	f7fe f84f 	bl	800b45a <__any_on>
 800d3bc:	4681      	mov	r9, r0
 800d3be:	b178      	cbz	r0, 800d3e0 <__gethex+0x1ac>
 800d3c0:	1e6b      	subs	r3, r5, #1
 800d3c2:	1159      	asrs	r1, r3, #5
 800d3c4:	f003 021f 	and.w	r2, r3, #31
 800d3c8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d3cc:	f04f 0901 	mov.w	r9, #1
 800d3d0:	fa09 f202 	lsl.w	r2, r9, r2
 800d3d4:	420a      	tst	r2, r1
 800d3d6:	d003      	beq.n	800d3e0 <__gethex+0x1ac>
 800d3d8:	454b      	cmp	r3, r9
 800d3da:	dc36      	bgt.n	800d44a <__gethex+0x216>
 800d3dc:	f04f 0902 	mov.w	r9, #2
 800d3e0:	4629      	mov	r1, r5
 800d3e2:	4620      	mov	r0, r4
 800d3e4:	f7ff febe 	bl	800d164 <rshift>
 800d3e8:	442f      	add	r7, r5
 800d3ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d3ee:	42bb      	cmp	r3, r7
 800d3f0:	da42      	bge.n	800d478 <__gethex+0x244>
 800d3f2:	9801      	ldr	r0, [sp, #4]
 800d3f4:	4621      	mov	r1, r4
 800d3f6:	f7fd fbe7 	bl	800abc8 <_Bfree>
 800d3fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	6013      	str	r3, [r2, #0]
 800d400:	25a3      	movs	r5, #163	@ 0xa3
 800d402:	e793      	b.n	800d32c <__gethex+0xf8>
 800d404:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800d408:	2a2e      	cmp	r2, #46	@ 0x2e
 800d40a:	d012      	beq.n	800d432 <__gethex+0x1fe>
 800d40c:	2b20      	cmp	r3, #32
 800d40e:	d104      	bne.n	800d41a <__gethex+0x1e6>
 800d410:	f845 bb04 	str.w	fp, [r5], #4
 800d414:	f04f 0b00 	mov.w	fp, #0
 800d418:	465b      	mov	r3, fp
 800d41a:	7830      	ldrb	r0, [r6, #0]
 800d41c:	9303      	str	r3, [sp, #12]
 800d41e:	f7ff fef3 	bl	800d208 <__hexdig_fun>
 800d422:	9b03      	ldr	r3, [sp, #12]
 800d424:	f000 000f 	and.w	r0, r0, #15
 800d428:	4098      	lsls	r0, r3
 800d42a:	ea4b 0b00 	orr.w	fp, fp, r0
 800d42e:	3304      	adds	r3, #4
 800d430:	e7ae      	b.n	800d390 <__gethex+0x15c>
 800d432:	45b1      	cmp	r9, r6
 800d434:	d8ea      	bhi.n	800d40c <__gethex+0x1d8>
 800d436:	492b      	ldr	r1, [pc, #172]	@ (800d4e4 <__gethex+0x2b0>)
 800d438:	9303      	str	r3, [sp, #12]
 800d43a:	2201      	movs	r2, #1
 800d43c:	4630      	mov	r0, r6
 800d43e:	f7ff fe04 	bl	800d04a <strncmp>
 800d442:	9b03      	ldr	r3, [sp, #12]
 800d444:	2800      	cmp	r0, #0
 800d446:	d1e1      	bne.n	800d40c <__gethex+0x1d8>
 800d448:	e7a2      	b.n	800d390 <__gethex+0x15c>
 800d44a:	1ea9      	subs	r1, r5, #2
 800d44c:	4620      	mov	r0, r4
 800d44e:	f7fe f804 	bl	800b45a <__any_on>
 800d452:	2800      	cmp	r0, #0
 800d454:	d0c2      	beq.n	800d3dc <__gethex+0x1a8>
 800d456:	f04f 0903 	mov.w	r9, #3
 800d45a:	e7c1      	b.n	800d3e0 <__gethex+0x1ac>
 800d45c:	da09      	bge.n	800d472 <__gethex+0x23e>
 800d45e:	1b75      	subs	r5, r6, r5
 800d460:	4621      	mov	r1, r4
 800d462:	9801      	ldr	r0, [sp, #4]
 800d464:	462a      	mov	r2, r5
 800d466:	f7fd fdbf 	bl	800afe8 <__lshift>
 800d46a:	1b7f      	subs	r7, r7, r5
 800d46c:	4604      	mov	r4, r0
 800d46e:	f100 0a14 	add.w	sl, r0, #20
 800d472:	f04f 0900 	mov.w	r9, #0
 800d476:	e7b8      	b.n	800d3ea <__gethex+0x1b6>
 800d478:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d47c:	42bd      	cmp	r5, r7
 800d47e:	dd6f      	ble.n	800d560 <__gethex+0x32c>
 800d480:	1bed      	subs	r5, r5, r7
 800d482:	42ae      	cmp	r6, r5
 800d484:	dc34      	bgt.n	800d4f0 <__gethex+0x2bc>
 800d486:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d48a:	2b02      	cmp	r3, #2
 800d48c:	d022      	beq.n	800d4d4 <__gethex+0x2a0>
 800d48e:	2b03      	cmp	r3, #3
 800d490:	d024      	beq.n	800d4dc <__gethex+0x2a8>
 800d492:	2b01      	cmp	r3, #1
 800d494:	d115      	bne.n	800d4c2 <__gethex+0x28e>
 800d496:	42ae      	cmp	r6, r5
 800d498:	d113      	bne.n	800d4c2 <__gethex+0x28e>
 800d49a:	2e01      	cmp	r6, #1
 800d49c:	d10b      	bne.n	800d4b6 <__gethex+0x282>
 800d49e:	9a02      	ldr	r2, [sp, #8]
 800d4a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d4a4:	6013      	str	r3, [r2, #0]
 800d4a6:	2301      	movs	r3, #1
 800d4a8:	6123      	str	r3, [r4, #16]
 800d4aa:	f8ca 3000 	str.w	r3, [sl]
 800d4ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d4b0:	2562      	movs	r5, #98	@ 0x62
 800d4b2:	601c      	str	r4, [r3, #0]
 800d4b4:	e73a      	b.n	800d32c <__gethex+0xf8>
 800d4b6:	1e71      	subs	r1, r6, #1
 800d4b8:	4620      	mov	r0, r4
 800d4ba:	f7fd ffce 	bl	800b45a <__any_on>
 800d4be:	2800      	cmp	r0, #0
 800d4c0:	d1ed      	bne.n	800d49e <__gethex+0x26a>
 800d4c2:	9801      	ldr	r0, [sp, #4]
 800d4c4:	4621      	mov	r1, r4
 800d4c6:	f7fd fb7f 	bl	800abc8 <_Bfree>
 800d4ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	6013      	str	r3, [r2, #0]
 800d4d0:	2550      	movs	r5, #80	@ 0x50
 800d4d2:	e72b      	b.n	800d32c <__gethex+0xf8>
 800d4d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d1f3      	bne.n	800d4c2 <__gethex+0x28e>
 800d4da:	e7e0      	b.n	800d49e <__gethex+0x26a>
 800d4dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d1dd      	bne.n	800d49e <__gethex+0x26a>
 800d4e2:	e7ee      	b.n	800d4c2 <__gethex+0x28e>
 800d4e4:	0800dcc9 	.word	0x0800dcc9
 800d4e8:	0800dc5f 	.word	0x0800dc5f
 800d4ec:	0800dd3b 	.word	0x0800dd3b
 800d4f0:	1e6f      	subs	r7, r5, #1
 800d4f2:	f1b9 0f00 	cmp.w	r9, #0
 800d4f6:	d130      	bne.n	800d55a <__gethex+0x326>
 800d4f8:	b127      	cbz	r7, 800d504 <__gethex+0x2d0>
 800d4fa:	4639      	mov	r1, r7
 800d4fc:	4620      	mov	r0, r4
 800d4fe:	f7fd ffac 	bl	800b45a <__any_on>
 800d502:	4681      	mov	r9, r0
 800d504:	117a      	asrs	r2, r7, #5
 800d506:	2301      	movs	r3, #1
 800d508:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d50c:	f007 071f 	and.w	r7, r7, #31
 800d510:	40bb      	lsls	r3, r7
 800d512:	4213      	tst	r3, r2
 800d514:	4629      	mov	r1, r5
 800d516:	4620      	mov	r0, r4
 800d518:	bf18      	it	ne
 800d51a:	f049 0902 	orrne.w	r9, r9, #2
 800d51e:	f7ff fe21 	bl	800d164 <rshift>
 800d522:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800d526:	1b76      	subs	r6, r6, r5
 800d528:	2502      	movs	r5, #2
 800d52a:	f1b9 0f00 	cmp.w	r9, #0
 800d52e:	d047      	beq.n	800d5c0 <__gethex+0x38c>
 800d530:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d534:	2b02      	cmp	r3, #2
 800d536:	d015      	beq.n	800d564 <__gethex+0x330>
 800d538:	2b03      	cmp	r3, #3
 800d53a:	d017      	beq.n	800d56c <__gethex+0x338>
 800d53c:	2b01      	cmp	r3, #1
 800d53e:	d109      	bne.n	800d554 <__gethex+0x320>
 800d540:	f019 0f02 	tst.w	r9, #2
 800d544:	d006      	beq.n	800d554 <__gethex+0x320>
 800d546:	f8da 3000 	ldr.w	r3, [sl]
 800d54a:	ea49 0903 	orr.w	r9, r9, r3
 800d54e:	f019 0f01 	tst.w	r9, #1
 800d552:	d10e      	bne.n	800d572 <__gethex+0x33e>
 800d554:	f045 0510 	orr.w	r5, r5, #16
 800d558:	e032      	b.n	800d5c0 <__gethex+0x38c>
 800d55a:	f04f 0901 	mov.w	r9, #1
 800d55e:	e7d1      	b.n	800d504 <__gethex+0x2d0>
 800d560:	2501      	movs	r5, #1
 800d562:	e7e2      	b.n	800d52a <__gethex+0x2f6>
 800d564:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d566:	f1c3 0301 	rsb	r3, r3, #1
 800d56a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d56c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d0f0      	beq.n	800d554 <__gethex+0x320>
 800d572:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d576:	f104 0314 	add.w	r3, r4, #20
 800d57a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d57e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d582:	f04f 0c00 	mov.w	ip, #0
 800d586:	4618      	mov	r0, r3
 800d588:	f853 2b04 	ldr.w	r2, [r3], #4
 800d58c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d590:	d01b      	beq.n	800d5ca <__gethex+0x396>
 800d592:	3201      	adds	r2, #1
 800d594:	6002      	str	r2, [r0, #0]
 800d596:	2d02      	cmp	r5, #2
 800d598:	f104 0314 	add.w	r3, r4, #20
 800d59c:	d13c      	bne.n	800d618 <__gethex+0x3e4>
 800d59e:	f8d8 2000 	ldr.w	r2, [r8]
 800d5a2:	3a01      	subs	r2, #1
 800d5a4:	42b2      	cmp	r2, r6
 800d5a6:	d109      	bne.n	800d5bc <__gethex+0x388>
 800d5a8:	1171      	asrs	r1, r6, #5
 800d5aa:	2201      	movs	r2, #1
 800d5ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d5b0:	f006 061f 	and.w	r6, r6, #31
 800d5b4:	fa02 f606 	lsl.w	r6, r2, r6
 800d5b8:	421e      	tst	r6, r3
 800d5ba:	d13a      	bne.n	800d632 <__gethex+0x3fe>
 800d5bc:	f045 0520 	orr.w	r5, r5, #32
 800d5c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d5c2:	601c      	str	r4, [r3, #0]
 800d5c4:	9b02      	ldr	r3, [sp, #8]
 800d5c6:	601f      	str	r7, [r3, #0]
 800d5c8:	e6b0      	b.n	800d32c <__gethex+0xf8>
 800d5ca:	4299      	cmp	r1, r3
 800d5cc:	f843 cc04 	str.w	ip, [r3, #-4]
 800d5d0:	d8d9      	bhi.n	800d586 <__gethex+0x352>
 800d5d2:	68a3      	ldr	r3, [r4, #8]
 800d5d4:	459b      	cmp	fp, r3
 800d5d6:	db17      	blt.n	800d608 <__gethex+0x3d4>
 800d5d8:	6861      	ldr	r1, [r4, #4]
 800d5da:	9801      	ldr	r0, [sp, #4]
 800d5dc:	3101      	adds	r1, #1
 800d5de:	f7fd fab3 	bl	800ab48 <_Balloc>
 800d5e2:	4681      	mov	r9, r0
 800d5e4:	b918      	cbnz	r0, 800d5ee <__gethex+0x3ba>
 800d5e6:	4b1a      	ldr	r3, [pc, #104]	@ (800d650 <__gethex+0x41c>)
 800d5e8:	4602      	mov	r2, r0
 800d5ea:	2184      	movs	r1, #132	@ 0x84
 800d5ec:	e6c5      	b.n	800d37a <__gethex+0x146>
 800d5ee:	6922      	ldr	r2, [r4, #16]
 800d5f0:	3202      	adds	r2, #2
 800d5f2:	f104 010c 	add.w	r1, r4, #12
 800d5f6:	0092      	lsls	r2, r2, #2
 800d5f8:	300c      	adds	r0, #12
 800d5fa:	f7ff fd6b 	bl	800d0d4 <memcpy>
 800d5fe:	4621      	mov	r1, r4
 800d600:	9801      	ldr	r0, [sp, #4]
 800d602:	f7fd fae1 	bl	800abc8 <_Bfree>
 800d606:	464c      	mov	r4, r9
 800d608:	6923      	ldr	r3, [r4, #16]
 800d60a:	1c5a      	adds	r2, r3, #1
 800d60c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d610:	6122      	str	r2, [r4, #16]
 800d612:	2201      	movs	r2, #1
 800d614:	615a      	str	r2, [r3, #20]
 800d616:	e7be      	b.n	800d596 <__gethex+0x362>
 800d618:	6922      	ldr	r2, [r4, #16]
 800d61a:	455a      	cmp	r2, fp
 800d61c:	dd0b      	ble.n	800d636 <__gethex+0x402>
 800d61e:	2101      	movs	r1, #1
 800d620:	4620      	mov	r0, r4
 800d622:	f7ff fd9f 	bl	800d164 <rshift>
 800d626:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d62a:	3701      	adds	r7, #1
 800d62c:	42bb      	cmp	r3, r7
 800d62e:	f6ff aee0 	blt.w	800d3f2 <__gethex+0x1be>
 800d632:	2501      	movs	r5, #1
 800d634:	e7c2      	b.n	800d5bc <__gethex+0x388>
 800d636:	f016 061f 	ands.w	r6, r6, #31
 800d63a:	d0fa      	beq.n	800d632 <__gethex+0x3fe>
 800d63c:	4453      	add	r3, sl
 800d63e:	f1c6 0620 	rsb	r6, r6, #32
 800d642:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d646:	f7fd fb71 	bl	800ad2c <__hi0bits>
 800d64a:	42b0      	cmp	r0, r6
 800d64c:	dbe7      	blt.n	800d61e <__gethex+0x3ea>
 800d64e:	e7f0      	b.n	800d632 <__gethex+0x3fe>
 800d650:	0800dc5f 	.word	0x0800dc5f

0800d654 <L_shift>:
 800d654:	f1c2 0208 	rsb	r2, r2, #8
 800d658:	0092      	lsls	r2, r2, #2
 800d65a:	b570      	push	{r4, r5, r6, lr}
 800d65c:	f1c2 0620 	rsb	r6, r2, #32
 800d660:	6843      	ldr	r3, [r0, #4]
 800d662:	6804      	ldr	r4, [r0, #0]
 800d664:	fa03 f506 	lsl.w	r5, r3, r6
 800d668:	432c      	orrs	r4, r5
 800d66a:	40d3      	lsrs	r3, r2
 800d66c:	6004      	str	r4, [r0, #0]
 800d66e:	f840 3f04 	str.w	r3, [r0, #4]!
 800d672:	4288      	cmp	r0, r1
 800d674:	d3f4      	bcc.n	800d660 <L_shift+0xc>
 800d676:	bd70      	pop	{r4, r5, r6, pc}

0800d678 <__match>:
 800d678:	b530      	push	{r4, r5, lr}
 800d67a:	6803      	ldr	r3, [r0, #0]
 800d67c:	3301      	adds	r3, #1
 800d67e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d682:	b914      	cbnz	r4, 800d68a <__match+0x12>
 800d684:	6003      	str	r3, [r0, #0]
 800d686:	2001      	movs	r0, #1
 800d688:	bd30      	pop	{r4, r5, pc}
 800d68a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d68e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800d692:	2d19      	cmp	r5, #25
 800d694:	bf98      	it	ls
 800d696:	3220      	addls	r2, #32
 800d698:	42a2      	cmp	r2, r4
 800d69a:	d0f0      	beq.n	800d67e <__match+0x6>
 800d69c:	2000      	movs	r0, #0
 800d69e:	e7f3      	b.n	800d688 <__match+0x10>

0800d6a0 <__hexnan>:
 800d6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6a4:	680b      	ldr	r3, [r1, #0]
 800d6a6:	6801      	ldr	r1, [r0, #0]
 800d6a8:	115e      	asrs	r6, r3, #5
 800d6aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d6ae:	f013 031f 	ands.w	r3, r3, #31
 800d6b2:	b087      	sub	sp, #28
 800d6b4:	bf18      	it	ne
 800d6b6:	3604      	addne	r6, #4
 800d6b8:	2500      	movs	r5, #0
 800d6ba:	1f37      	subs	r7, r6, #4
 800d6bc:	4682      	mov	sl, r0
 800d6be:	4690      	mov	r8, r2
 800d6c0:	9301      	str	r3, [sp, #4]
 800d6c2:	f846 5c04 	str.w	r5, [r6, #-4]
 800d6c6:	46b9      	mov	r9, r7
 800d6c8:	463c      	mov	r4, r7
 800d6ca:	9502      	str	r5, [sp, #8]
 800d6cc:	46ab      	mov	fp, r5
 800d6ce:	784a      	ldrb	r2, [r1, #1]
 800d6d0:	1c4b      	adds	r3, r1, #1
 800d6d2:	9303      	str	r3, [sp, #12]
 800d6d4:	b342      	cbz	r2, 800d728 <__hexnan+0x88>
 800d6d6:	4610      	mov	r0, r2
 800d6d8:	9105      	str	r1, [sp, #20]
 800d6da:	9204      	str	r2, [sp, #16]
 800d6dc:	f7ff fd94 	bl	800d208 <__hexdig_fun>
 800d6e0:	2800      	cmp	r0, #0
 800d6e2:	d151      	bne.n	800d788 <__hexnan+0xe8>
 800d6e4:	9a04      	ldr	r2, [sp, #16]
 800d6e6:	9905      	ldr	r1, [sp, #20]
 800d6e8:	2a20      	cmp	r2, #32
 800d6ea:	d818      	bhi.n	800d71e <__hexnan+0x7e>
 800d6ec:	9b02      	ldr	r3, [sp, #8]
 800d6ee:	459b      	cmp	fp, r3
 800d6f0:	dd13      	ble.n	800d71a <__hexnan+0x7a>
 800d6f2:	454c      	cmp	r4, r9
 800d6f4:	d206      	bcs.n	800d704 <__hexnan+0x64>
 800d6f6:	2d07      	cmp	r5, #7
 800d6f8:	dc04      	bgt.n	800d704 <__hexnan+0x64>
 800d6fa:	462a      	mov	r2, r5
 800d6fc:	4649      	mov	r1, r9
 800d6fe:	4620      	mov	r0, r4
 800d700:	f7ff ffa8 	bl	800d654 <L_shift>
 800d704:	4544      	cmp	r4, r8
 800d706:	d952      	bls.n	800d7ae <__hexnan+0x10e>
 800d708:	2300      	movs	r3, #0
 800d70a:	f1a4 0904 	sub.w	r9, r4, #4
 800d70e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d712:	f8cd b008 	str.w	fp, [sp, #8]
 800d716:	464c      	mov	r4, r9
 800d718:	461d      	mov	r5, r3
 800d71a:	9903      	ldr	r1, [sp, #12]
 800d71c:	e7d7      	b.n	800d6ce <__hexnan+0x2e>
 800d71e:	2a29      	cmp	r2, #41	@ 0x29
 800d720:	d157      	bne.n	800d7d2 <__hexnan+0x132>
 800d722:	3102      	adds	r1, #2
 800d724:	f8ca 1000 	str.w	r1, [sl]
 800d728:	f1bb 0f00 	cmp.w	fp, #0
 800d72c:	d051      	beq.n	800d7d2 <__hexnan+0x132>
 800d72e:	454c      	cmp	r4, r9
 800d730:	d206      	bcs.n	800d740 <__hexnan+0xa0>
 800d732:	2d07      	cmp	r5, #7
 800d734:	dc04      	bgt.n	800d740 <__hexnan+0xa0>
 800d736:	462a      	mov	r2, r5
 800d738:	4649      	mov	r1, r9
 800d73a:	4620      	mov	r0, r4
 800d73c:	f7ff ff8a 	bl	800d654 <L_shift>
 800d740:	4544      	cmp	r4, r8
 800d742:	d936      	bls.n	800d7b2 <__hexnan+0x112>
 800d744:	f1a8 0204 	sub.w	r2, r8, #4
 800d748:	4623      	mov	r3, r4
 800d74a:	f853 1b04 	ldr.w	r1, [r3], #4
 800d74e:	f842 1f04 	str.w	r1, [r2, #4]!
 800d752:	429f      	cmp	r7, r3
 800d754:	d2f9      	bcs.n	800d74a <__hexnan+0xaa>
 800d756:	1b3b      	subs	r3, r7, r4
 800d758:	f023 0303 	bic.w	r3, r3, #3
 800d75c:	3304      	adds	r3, #4
 800d75e:	3401      	adds	r4, #1
 800d760:	3e03      	subs	r6, #3
 800d762:	42b4      	cmp	r4, r6
 800d764:	bf88      	it	hi
 800d766:	2304      	movhi	r3, #4
 800d768:	4443      	add	r3, r8
 800d76a:	2200      	movs	r2, #0
 800d76c:	f843 2b04 	str.w	r2, [r3], #4
 800d770:	429f      	cmp	r7, r3
 800d772:	d2fb      	bcs.n	800d76c <__hexnan+0xcc>
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	b91b      	cbnz	r3, 800d780 <__hexnan+0xe0>
 800d778:	4547      	cmp	r7, r8
 800d77a:	d128      	bne.n	800d7ce <__hexnan+0x12e>
 800d77c:	2301      	movs	r3, #1
 800d77e:	603b      	str	r3, [r7, #0]
 800d780:	2005      	movs	r0, #5
 800d782:	b007      	add	sp, #28
 800d784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d788:	3501      	adds	r5, #1
 800d78a:	2d08      	cmp	r5, #8
 800d78c:	f10b 0b01 	add.w	fp, fp, #1
 800d790:	dd06      	ble.n	800d7a0 <__hexnan+0x100>
 800d792:	4544      	cmp	r4, r8
 800d794:	d9c1      	bls.n	800d71a <__hexnan+0x7a>
 800d796:	2300      	movs	r3, #0
 800d798:	f844 3c04 	str.w	r3, [r4, #-4]
 800d79c:	2501      	movs	r5, #1
 800d79e:	3c04      	subs	r4, #4
 800d7a0:	6822      	ldr	r2, [r4, #0]
 800d7a2:	f000 000f 	and.w	r0, r0, #15
 800d7a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d7aa:	6020      	str	r0, [r4, #0]
 800d7ac:	e7b5      	b.n	800d71a <__hexnan+0x7a>
 800d7ae:	2508      	movs	r5, #8
 800d7b0:	e7b3      	b.n	800d71a <__hexnan+0x7a>
 800d7b2:	9b01      	ldr	r3, [sp, #4]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d0dd      	beq.n	800d774 <__hexnan+0xd4>
 800d7b8:	f1c3 0320 	rsb	r3, r3, #32
 800d7bc:	f04f 32ff 	mov.w	r2, #4294967295
 800d7c0:	40da      	lsrs	r2, r3
 800d7c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d7c6:	4013      	ands	r3, r2
 800d7c8:	f846 3c04 	str.w	r3, [r6, #-4]
 800d7cc:	e7d2      	b.n	800d774 <__hexnan+0xd4>
 800d7ce:	3f04      	subs	r7, #4
 800d7d0:	e7d0      	b.n	800d774 <__hexnan+0xd4>
 800d7d2:	2004      	movs	r0, #4
 800d7d4:	e7d5      	b.n	800d782 <__hexnan+0xe2>

0800d7d6 <__ascii_mbtowc>:
 800d7d6:	b082      	sub	sp, #8
 800d7d8:	b901      	cbnz	r1, 800d7dc <__ascii_mbtowc+0x6>
 800d7da:	a901      	add	r1, sp, #4
 800d7dc:	b142      	cbz	r2, 800d7f0 <__ascii_mbtowc+0x1a>
 800d7de:	b14b      	cbz	r3, 800d7f4 <__ascii_mbtowc+0x1e>
 800d7e0:	7813      	ldrb	r3, [r2, #0]
 800d7e2:	600b      	str	r3, [r1, #0]
 800d7e4:	7812      	ldrb	r2, [r2, #0]
 800d7e6:	1e10      	subs	r0, r2, #0
 800d7e8:	bf18      	it	ne
 800d7ea:	2001      	movne	r0, #1
 800d7ec:	b002      	add	sp, #8
 800d7ee:	4770      	bx	lr
 800d7f0:	4610      	mov	r0, r2
 800d7f2:	e7fb      	b.n	800d7ec <__ascii_mbtowc+0x16>
 800d7f4:	f06f 0001 	mvn.w	r0, #1
 800d7f8:	e7f8      	b.n	800d7ec <__ascii_mbtowc+0x16>

0800d7fa <_realloc_r>:
 800d7fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7fe:	4607      	mov	r7, r0
 800d800:	4614      	mov	r4, r2
 800d802:	460d      	mov	r5, r1
 800d804:	b921      	cbnz	r1, 800d810 <_realloc_r+0x16>
 800d806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d80a:	4611      	mov	r1, r2
 800d80c:	f7fd b910 	b.w	800aa30 <_malloc_r>
 800d810:	b92a      	cbnz	r2, 800d81e <_realloc_r+0x24>
 800d812:	f7fd f899 	bl	800a948 <_free_r>
 800d816:	4625      	mov	r5, r4
 800d818:	4628      	mov	r0, r5
 800d81a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d81e:	f000 f8b2 	bl	800d986 <_malloc_usable_size_r>
 800d822:	4284      	cmp	r4, r0
 800d824:	4606      	mov	r6, r0
 800d826:	d802      	bhi.n	800d82e <_realloc_r+0x34>
 800d828:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d82c:	d8f4      	bhi.n	800d818 <_realloc_r+0x1e>
 800d82e:	4621      	mov	r1, r4
 800d830:	4638      	mov	r0, r7
 800d832:	f7fd f8fd 	bl	800aa30 <_malloc_r>
 800d836:	4680      	mov	r8, r0
 800d838:	b908      	cbnz	r0, 800d83e <_realloc_r+0x44>
 800d83a:	4645      	mov	r5, r8
 800d83c:	e7ec      	b.n	800d818 <_realloc_r+0x1e>
 800d83e:	42b4      	cmp	r4, r6
 800d840:	4622      	mov	r2, r4
 800d842:	4629      	mov	r1, r5
 800d844:	bf28      	it	cs
 800d846:	4632      	movcs	r2, r6
 800d848:	f7ff fc44 	bl	800d0d4 <memcpy>
 800d84c:	4629      	mov	r1, r5
 800d84e:	4638      	mov	r0, r7
 800d850:	f7fd f87a 	bl	800a948 <_free_r>
 800d854:	e7f1      	b.n	800d83a <_realloc_r+0x40>
	...

0800d858 <_strtoul_l.isra.0>:
 800d858:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d85c:	4e34      	ldr	r6, [pc, #208]	@ (800d930 <_strtoul_l.isra.0+0xd8>)
 800d85e:	4686      	mov	lr, r0
 800d860:	460d      	mov	r5, r1
 800d862:	4628      	mov	r0, r5
 800d864:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d868:	5d37      	ldrb	r7, [r6, r4]
 800d86a:	f017 0708 	ands.w	r7, r7, #8
 800d86e:	d1f8      	bne.n	800d862 <_strtoul_l.isra.0+0xa>
 800d870:	2c2d      	cmp	r4, #45	@ 0x2d
 800d872:	d110      	bne.n	800d896 <_strtoul_l.isra.0+0x3e>
 800d874:	782c      	ldrb	r4, [r5, #0]
 800d876:	2701      	movs	r7, #1
 800d878:	1c85      	adds	r5, r0, #2
 800d87a:	f033 0010 	bics.w	r0, r3, #16
 800d87e:	d115      	bne.n	800d8ac <_strtoul_l.isra.0+0x54>
 800d880:	2c30      	cmp	r4, #48	@ 0x30
 800d882:	d10d      	bne.n	800d8a0 <_strtoul_l.isra.0+0x48>
 800d884:	7828      	ldrb	r0, [r5, #0]
 800d886:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800d88a:	2858      	cmp	r0, #88	@ 0x58
 800d88c:	d108      	bne.n	800d8a0 <_strtoul_l.isra.0+0x48>
 800d88e:	786c      	ldrb	r4, [r5, #1]
 800d890:	3502      	adds	r5, #2
 800d892:	2310      	movs	r3, #16
 800d894:	e00a      	b.n	800d8ac <_strtoul_l.isra.0+0x54>
 800d896:	2c2b      	cmp	r4, #43	@ 0x2b
 800d898:	bf04      	itt	eq
 800d89a:	782c      	ldrbeq	r4, [r5, #0]
 800d89c:	1c85      	addeq	r5, r0, #2
 800d89e:	e7ec      	b.n	800d87a <_strtoul_l.isra.0+0x22>
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d1f6      	bne.n	800d892 <_strtoul_l.isra.0+0x3a>
 800d8a4:	2c30      	cmp	r4, #48	@ 0x30
 800d8a6:	bf14      	ite	ne
 800d8a8:	230a      	movne	r3, #10
 800d8aa:	2308      	moveq	r3, #8
 800d8ac:	f04f 38ff 	mov.w	r8, #4294967295
 800d8b0:	2600      	movs	r6, #0
 800d8b2:	fbb8 f8f3 	udiv	r8, r8, r3
 800d8b6:	fb03 f908 	mul.w	r9, r3, r8
 800d8ba:	ea6f 0909 	mvn.w	r9, r9
 800d8be:	4630      	mov	r0, r6
 800d8c0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800d8c4:	f1bc 0f09 	cmp.w	ip, #9
 800d8c8:	d810      	bhi.n	800d8ec <_strtoul_l.isra.0+0x94>
 800d8ca:	4664      	mov	r4, ip
 800d8cc:	42a3      	cmp	r3, r4
 800d8ce:	dd1e      	ble.n	800d90e <_strtoul_l.isra.0+0xb6>
 800d8d0:	f1b6 3fff 	cmp.w	r6, #4294967295
 800d8d4:	d007      	beq.n	800d8e6 <_strtoul_l.isra.0+0x8e>
 800d8d6:	4580      	cmp	r8, r0
 800d8d8:	d316      	bcc.n	800d908 <_strtoul_l.isra.0+0xb0>
 800d8da:	d101      	bne.n	800d8e0 <_strtoul_l.isra.0+0x88>
 800d8dc:	45a1      	cmp	r9, r4
 800d8de:	db13      	blt.n	800d908 <_strtoul_l.isra.0+0xb0>
 800d8e0:	fb00 4003 	mla	r0, r0, r3, r4
 800d8e4:	2601      	movs	r6, #1
 800d8e6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d8ea:	e7e9      	b.n	800d8c0 <_strtoul_l.isra.0+0x68>
 800d8ec:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800d8f0:	f1bc 0f19 	cmp.w	ip, #25
 800d8f4:	d801      	bhi.n	800d8fa <_strtoul_l.isra.0+0xa2>
 800d8f6:	3c37      	subs	r4, #55	@ 0x37
 800d8f8:	e7e8      	b.n	800d8cc <_strtoul_l.isra.0+0x74>
 800d8fa:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800d8fe:	f1bc 0f19 	cmp.w	ip, #25
 800d902:	d804      	bhi.n	800d90e <_strtoul_l.isra.0+0xb6>
 800d904:	3c57      	subs	r4, #87	@ 0x57
 800d906:	e7e1      	b.n	800d8cc <_strtoul_l.isra.0+0x74>
 800d908:	f04f 36ff 	mov.w	r6, #4294967295
 800d90c:	e7eb      	b.n	800d8e6 <_strtoul_l.isra.0+0x8e>
 800d90e:	1c73      	adds	r3, r6, #1
 800d910:	d106      	bne.n	800d920 <_strtoul_l.isra.0+0xc8>
 800d912:	2322      	movs	r3, #34	@ 0x22
 800d914:	f8ce 3000 	str.w	r3, [lr]
 800d918:	4630      	mov	r0, r6
 800d91a:	b932      	cbnz	r2, 800d92a <_strtoul_l.isra.0+0xd2>
 800d91c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d920:	b107      	cbz	r7, 800d924 <_strtoul_l.isra.0+0xcc>
 800d922:	4240      	negs	r0, r0
 800d924:	2a00      	cmp	r2, #0
 800d926:	d0f9      	beq.n	800d91c <_strtoul_l.isra.0+0xc4>
 800d928:	b106      	cbz	r6, 800d92c <_strtoul_l.isra.0+0xd4>
 800d92a:	1e69      	subs	r1, r5, #1
 800d92c:	6011      	str	r1, [r2, #0]
 800d92e:	e7f5      	b.n	800d91c <_strtoul_l.isra.0+0xc4>
 800d930:	0800dee9 	.word	0x0800dee9

0800d934 <_strtoul_r>:
 800d934:	f7ff bf90 	b.w	800d858 <_strtoul_l.isra.0>

0800d938 <__ascii_wctomb>:
 800d938:	4603      	mov	r3, r0
 800d93a:	4608      	mov	r0, r1
 800d93c:	b141      	cbz	r1, 800d950 <__ascii_wctomb+0x18>
 800d93e:	2aff      	cmp	r2, #255	@ 0xff
 800d940:	d904      	bls.n	800d94c <__ascii_wctomb+0x14>
 800d942:	228a      	movs	r2, #138	@ 0x8a
 800d944:	601a      	str	r2, [r3, #0]
 800d946:	f04f 30ff 	mov.w	r0, #4294967295
 800d94a:	4770      	bx	lr
 800d94c:	700a      	strb	r2, [r1, #0]
 800d94e:	2001      	movs	r0, #1
 800d950:	4770      	bx	lr
	...

0800d954 <fiprintf>:
 800d954:	b40e      	push	{r1, r2, r3}
 800d956:	b503      	push	{r0, r1, lr}
 800d958:	4601      	mov	r1, r0
 800d95a:	ab03      	add	r3, sp, #12
 800d95c:	4805      	ldr	r0, [pc, #20]	@ (800d974 <fiprintf+0x20>)
 800d95e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d962:	6800      	ldr	r0, [r0, #0]
 800d964:	9301      	str	r3, [sp, #4]
 800d966:	f7fe ff6f 	bl	800c848 <_vfiprintf_r>
 800d96a:	b002      	add	sp, #8
 800d96c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d970:	b003      	add	sp, #12
 800d972:	4770      	bx	lr
 800d974:	20000018 	.word	0x20000018

0800d978 <abort>:
 800d978:	b508      	push	{r3, lr}
 800d97a:	2006      	movs	r0, #6
 800d97c:	f000 f834 	bl	800d9e8 <raise>
 800d980:	2001      	movs	r0, #1
 800d982:	f7f4 fe4b 	bl	800261c <_exit>

0800d986 <_malloc_usable_size_r>:
 800d986:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d98a:	1f18      	subs	r0, r3, #4
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	bfbc      	itt	lt
 800d990:	580b      	ldrlt	r3, [r1, r0]
 800d992:	18c0      	addlt	r0, r0, r3
 800d994:	4770      	bx	lr

0800d996 <_raise_r>:
 800d996:	291f      	cmp	r1, #31
 800d998:	b538      	push	{r3, r4, r5, lr}
 800d99a:	4605      	mov	r5, r0
 800d99c:	460c      	mov	r4, r1
 800d99e:	d904      	bls.n	800d9aa <_raise_r+0x14>
 800d9a0:	2316      	movs	r3, #22
 800d9a2:	6003      	str	r3, [r0, #0]
 800d9a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d9a8:	bd38      	pop	{r3, r4, r5, pc}
 800d9aa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d9ac:	b112      	cbz	r2, 800d9b4 <_raise_r+0x1e>
 800d9ae:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d9b2:	b94b      	cbnz	r3, 800d9c8 <_raise_r+0x32>
 800d9b4:	4628      	mov	r0, r5
 800d9b6:	f000 f831 	bl	800da1c <_getpid_r>
 800d9ba:	4622      	mov	r2, r4
 800d9bc:	4601      	mov	r1, r0
 800d9be:	4628      	mov	r0, r5
 800d9c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9c4:	f000 b818 	b.w	800d9f8 <_kill_r>
 800d9c8:	2b01      	cmp	r3, #1
 800d9ca:	d00a      	beq.n	800d9e2 <_raise_r+0x4c>
 800d9cc:	1c59      	adds	r1, r3, #1
 800d9ce:	d103      	bne.n	800d9d8 <_raise_r+0x42>
 800d9d0:	2316      	movs	r3, #22
 800d9d2:	6003      	str	r3, [r0, #0]
 800d9d4:	2001      	movs	r0, #1
 800d9d6:	e7e7      	b.n	800d9a8 <_raise_r+0x12>
 800d9d8:	2100      	movs	r1, #0
 800d9da:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d9de:	4620      	mov	r0, r4
 800d9e0:	4798      	blx	r3
 800d9e2:	2000      	movs	r0, #0
 800d9e4:	e7e0      	b.n	800d9a8 <_raise_r+0x12>
	...

0800d9e8 <raise>:
 800d9e8:	4b02      	ldr	r3, [pc, #8]	@ (800d9f4 <raise+0xc>)
 800d9ea:	4601      	mov	r1, r0
 800d9ec:	6818      	ldr	r0, [r3, #0]
 800d9ee:	f7ff bfd2 	b.w	800d996 <_raise_r>
 800d9f2:	bf00      	nop
 800d9f4:	20000018 	.word	0x20000018

0800d9f8 <_kill_r>:
 800d9f8:	b538      	push	{r3, r4, r5, lr}
 800d9fa:	4d07      	ldr	r5, [pc, #28]	@ (800da18 <_kill_r+0x20>)
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	4604      	mov	r4, r0
 800da00:	4608      	mov	r0, r1
 800da02:	4611      	mov	r1, r2
 800da04:	602b      	str	r3, [r5, #0]
 800da06:	f7f4 fdf9 	bl	80025fc <_kill>
 800da0a:	1c43      	adds	r3, r0, #1
 800da0c:	d102      	bne.n	800da14 <_kill_r+0x1c>
 800da0e:	682b      	ldr	r3, [r5, #0]
 800da10:	b103      	cbz	r3, 800da14 <_kill_r+0x1c>
 800da12:	6023      	str	r3, [r4, #0]
 800da14:	bd38      	pop	{r3, r4, r5, pc}
 800da16:	bf00      	nop
 800da18:	200006bc 	.word	0x200006bc

0800da1c <_getpid_r>:
 800da1c:	f7f4 bde6 	b.w	80025ec <_getpid>

0800da20 <_init>:
 800da20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da22:	bf00      	nop
 800da24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da26:	bc08      	pop	{r3}
 800da28:	469e      	mov	lr, r3
 800da2a:	4770      	bx	lr

0800da2c <_fini>:
 800da2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da2e:	bf00      	nop
 800da30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da32:	bc08      	pop	{r3}
 800da34:	469e      	mov	lr, r3
 800da36:	4770      	bx	lr
